{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Replit.md\n\n## Overview\n\nThis is a full-stack AI automation platform called \"Fluix AI\" that enables users to create and manage automated workflows using conversational AI. The application has been successfully migrated from Lovable/Supabase to Replit with local PostgreSQL. It features intelligent workflow generation through multi-AI orchestration (OpenAI → Claude → DeepSeek → N8N JSON output) and provides both anonymous consultation chat and authenticated user sessions with persistent workflow storage.\n\n## Recent Changes (August 2025)\n\n- **Brand Update**: Changed from \"Precensusu AI\" to \"Fluix AI\" across all application components\n- **UI Modernization**: Implemented futuristic design with gradient backgrounds and smooth animations\n- **Logo Integration**: Successfully integrated new company logo throughout the interface\n- **Color Palette**: Applied new brand colors (blue #1E3A8A, violet #6D28D9, white #F9FAFB)\n- **Migration Complete**: Successfully migrated from Supabase to local PostgreSQL with Drizzle ORM\n- **Multi-AI Workflow Generation**: Completely restructured with specialized AI roles and real DeepSeek integration\n- **DeepSeek Integration**: Connected real DeepSeek API for advanced JSON workflow generation\n- **Specialized AI Orchestration**: ChatGPT (Consultor) → Claude (Arquitecto) → DeepSeek (Ingeniero) → ChatGPT-4o mini (Validador)\n- **Enhanced Chat Intelligence**: Detects creation requests and triggers multi-stage AI processing\n- **Database Schema**: Full schema with users, profiles, chat sessions, messages, workflows, automations, templates\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript running on Vite for development\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design system variables\n- **State Management**: TanStack React Query for server state management\n- **Routing**: React Router for client-side navigation\n- **Authentication**: Supabase Auth integration with JWT tokens\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database ORM**: Drizzle ORM with PostgreSQL dialect\n- **Authentication**: JWT-based authentication with bcrypt for password hashing\n- **API Design**: RESTful endpoints with middleware for request logging and error handling\n- **Development**: Hot module replacement via Vite integration\n\n### Database Design\n- **Provider**: Neon Database (PostgreSQL)\n- **Schema**: User management (users, profiles), chat system (chat_sessions, messages), and workflow management (workflows, automations, templates)\n- **Relationships**: Foreign key constraints with cascade deletions for data integrity\n- **Migration**: Drizzle Kit for schema management\n\n### AI Integration Pipeline\n- **Multi-Stage Processing**: Four-stage AI workflow generation using different AI providers\n  1. ChatGPT Planner: Initial workflow planning and structure\n  2. Claude Refiner: Optimization and error handling enhancement\n  3. DeepSeek Optimizer: Performance and scalability improvements\n  4. N8N Assistant: Final JSON generation for workflow execution\n- **Orchestration**: Central orchestration service coordinates the multi-AI pipeline\n- **Validation**: Dry-run execution and workflow validation before deployment\n\n### Chat System\n- **Dual Chat Modes**: Standard automation chat and specialized business consultation\n- **Real-time Messaging**: Session-based chat with persistent message history\n- **AI Response Types**: Support for multiple AI providers (ChatGPT, Claude, DeepSeek, N8N)\n- **Workflow Integration**: Direct workflow generation from chat conversations\n\n## External Dependencies\n\n### Core Infrastructure\n- **Database**: Neon Database (PostgreSQL) for data persistence\n- **Authentication**: Supabase for user authentication and session management\n- **Deployment**: Replit platform integration with custom Vite plugins\n\n### AI Services\n- **OpenAI API**: ChatGPT for initial workflow planning and general chat responses\n- **Anthropic API**: Claude for workflow refinement and optimization\n- **DeepSeek API**: Advanced optimization and performance tuning\n- **N8N Integration**: Workflow execution platform for automation deployment\n\n### Communication Services\n- **Email**: Resend API for transactional emails and lead notifications\n- **Notifications**: Custom credential request system for missing API configurations\n\n### Frontend Libraries\n- **UI Components**: Extensive Radix UI component library for accessible interfaces\n- **Form Handling**: React Hook Form with Zod validation\n- **Markdown**: React Markdown with GitHub Flavored Markdown support\n- **Icons**: Lucide React for consistent iconography\n\n### Development Tools\n- **Build System**: Vite with React plugin and TypeScript support\n- **Code Quality**: ESBuild for production bundling\n- **Error Handling**: Replit error overlay for development debugging\n- **Hot Reload**: Custom Vite middleware for seamless development experience","size_bytes":5063},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n});\n","size_bytes":894},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1921},"server/routes.ts":{"content":"import type { Express, Request, Response, NextFunction } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport sgMail from \"@sendgrid/mail\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertChatSessionSchema, insertMessageSchema, insertWorkflowSchema, insertAutomationSchema, type User } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\n\n// Configure SendGrid\nif (process.env.SENDGRID_API_KEY) {\n  sgMail.setApiKey(process.env.SENDGRID_API_KEY);\n}\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"dev-secret-key\";\n\n// Function to send workflow JSON via email\nasync function sendWorkflowEmail(workflowJson: any, userEmail: string, userPhone: string, conversationContext: string) {\n  if (!process.env.SENDGRID_API_KEY) {\n    console.error('SendGrid API key not configured');\n    return { success: false, error: 'Email service not configured' };\n  }\n\n  // Your company emails - you can change these to your real emails\n  const companyEmails = ['fluix.ai.bb@gmail.com'];\n  \n  // Email to company\n  const companyMsg = {\n    to: companyEmails,\n    from: 'fluix.ai.bb@gmail.com', // Using verified sender email\n    subject: `Nueva automatización generada - Cliente: ${userEmail}`,\n    text: `Se ha generado una nueva automatización para el cliente:\n\nEmail: ${userEmail}\nTeléfono: ${userPhone}\n\nContexto de la conversación:\n${conversationContext}\n\nEl archivo JSON está adjunto como attachment.`,\n    html: `\n      <h2>Nueva Automatización Generada</h2>\n      <p><strong>Cliente:</strong> ${userEmail}</p>\n      <p><strong>Teléfono:</strong> ${userPhone}</p>\n      \n      <h3>Contexto de la conversación:</h3>\n      <p>${conversationContext.replace(/\\n/g, '<br>')}</p>\n      \n      <p>El archivo JSON de la automatización está adjunto.</p>\n      \n      <hr>\n      <p><em>Este email fue generado automáticamente por Fluix AI</em></p>\n    `,\n    attachments: [\n      {\n        content: Buffer.from(JSON.stringify(workflowJson, null, 2)).toString('base64'),\n        filename: `workflow-${Date.now()}.json`,\n        type: 'application/json',\n        disposition: 'attachment'\n      }\n    ]\n  };\n\n  // Email to user\n  const userMsg = {\n    to: userEmail,\n    from: 'fluix.ai.bb@gmail.com',\n    subject: '🤖 Tu automatización personalizada está lista - Fluix AI',\n    text: `¡Hola!\n\nTu automatización personalizada ha sido creada exitosamente basada en la información que nos proporcionaste.\n\nNuestro equipo revisará la automatización y te contactaremos pronto para coordinar la implementación.\n\nDatos de tu solicitud:\n- Email: ${userEmail}\n- Teléfono: ${userPhone}\n\nEl archivo de automatización está adjunto para tu revisión.\n\n¡Gracias por confiar en Fluix AI!\n\nSaludos,\nEquipo Fluix AI`,\n    html: `\n      <h2 style=\"color: #1E3A8A;\">🤖 Tu automatización está lista</h2>\n      <p>¡Hola!</p>\n      \n      <p>Tu automatización personalizada ha sido <strong>creada exitosamente</strong> basada en la información que nos proporcionaste.</p>\n      \n      <p>Nuestro equipo revisará la automatización y <strong>te contactaremos pronto</strong> para coordinar la implementación.</p>\n      \n      <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n        <h3>📋 Datos de tu solicitud:</h3>\n        <p><strong>Email:</strong> ${userEmail}</p>\n        <p><strong>Teléfono:</strong> ${userPhone}</p>\n      </div>\n      \n      <p>El archivo de automatización está adjunto para tu revisión.</p>\n      \n      <p>¡Gracias por confiar en <strong>Fluix AI</strong>! 🚀</p>\n      \n      <hr style=\"margin: 30px 0;\">\n      <p style=\"color: #6b7280; font-size: 12px;\">\n        <em>Este email fue generado automáticamente por Fluix AI</em><br>\n        Si tienes alguna pregunta, no dudes en contactarnos.\n      </p>\n    `,\n    attachments: [\n      {\n        content: Buffer.from(JSON.stringify(workflowJson, null, 2)).toString('base64'),\n        filename: `automatizacion-${Date.now()}.json`,\n        type: 'application/json',\n        disposition: 'attachment'\n      }\n    ]\n  };\n\n  try {\n    // Send email to company\n    await sgMail.send(companyMsg);\n    console.log('Company workflow email sent successfully');\n    \n    // Send email to user\n    await sgMail.send(userMsg);\n    console.log('User workflow email sent successfully to:', userEmail);\n    \n    return { success: true };\n  } catch (error: any) {\n    console.error('Error sending workflow email:', error);\n    \n    // Provide more specific error messages based on SendGrid errors\n    let errorMessage = 'Error enviando el email';\n    if (error.code === 403) {\n      errorMessage = 'Servicio de email temporalmente no disponible (permisos)';\n    } else if (error.code === 401) {\n      errorMessage = 'Servicio de email no configurado correctamente';\n    } else if (error.response?.body?.errors) {\n      errorMessage = `Error de email: ${error.response.body.errors[0]?.message || 'Error desconocido'}`;\n    }\n    \n    return { success: false, error: errorMessage };\n  }\n}\n\n// Middleware to verify JWT token\nconst authenticateToken = async (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access token required' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, JWT_SECRET) as any;\n    const user = await storage.getUser(decoded.userId);\n    if (!user) {\n      return res.status(401).json({ error: 'Invalid token' });\n    }\n    req.user = user;\n    next();\n  } catch (error: any) {\n    return res.status(403).json({ error: 'Invalid token' });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/register\", async (req: Request, res: Response) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ error: \"User already exists\" });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password!, 10);\n      \n      // Create user\n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword\n      });\n\n      // Create profile\n      await storage.createProfile({\n        userId: user.id,\n        username: validatedData.username\n      });\n\n      // Generate token\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n\n      res.json({ user: { id: user.id, email: user.email, username: user.username }, token });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req: Request, res: Response) => {\n    try {\n      const { email, password } = req.body;\n      \n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.password) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      const token = jwt.sign({ userId: user.id }, JWT_SECRET, { expiresIn: '7d' });\n\n      res.json({ user: { id: user.id, email: user.email, username: user.username }, token });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authenticateToken, async (req: any, res: any) => {\n    const user = req.user;\n    res.json({ user: { id: user.id, email: user.email, username: user.username } });\n  });\n\n  // Chat Sessions routes\n  app.get(\"/api/chat-sessions\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const sessions = await storage.getChatSessionsByUser(req.user.id);\n      res.json(sessions);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/chat-sessions\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const validatedData = insertChatSessionSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const session = await storage.createChatSession(validatedData);\n      res.json(session);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/chat-sessions/:id\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const session = await storage.getChatSession(req.params.id);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Chat session not found\" });\n      }\n      res.json(session);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/chat-sessions/:id\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const session = await storage.getChatSession(req.params.id);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Chat session not found\" });\n      }\n      await storage.deleteChatSession(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Messages routes\n  app.get(\"/api/chat-sessions/:sessionId/messages\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const session = await storage.getChatSession(req.params.sessionId);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Chat session not found\" });\n      }\n      \n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const messages = await storage.getMessagesBySession(req.params.sessionId, limit);\n      res.json(messages);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/messages\", authenticateToken, async (req: any, res: any) => {\n    try {\n      // Verify session belongs to user\n      const session = await storage.getChatSession(req.body.chatSessionId);\n      if (!session || session.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Chat session not found\" });\n      }\n\n      const validatedData = insertMessageSchema.parse(req.body);\n      const message = await storage.createMessage(validatedData);\n      res.json(message);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Workflows routes\n  app.get(\"/api/workflows\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const workflows = await storage.getWorkflowsByUser(req.user.id);\n      res.json(workflows);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/workflows\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const validatedData = insertWorkflowSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const workflow = await storage.createWorkflow(validatedData);\n      res.json(workflow);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get(\"/api/workflows/:id\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const workflow = await storage.getWorkflow(req.params.id);\n      if (!workflow || workflow.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Workflow not found\" });\n      }\n      res.json(workflow);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.put(\"/api/workflows/:id\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const workflow = await storage.getWorkflow(req.params.id);\n      if (!workflow || workflow.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Workflow not found\" });\n      }\n\n      const updates = req.body;\n      const updatedWorkflow = await storage.updateWorkflow(req.params.id, updates);\n      res.json(updatedWorkflow);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.delete(\"/api/workflows/:id\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const workflow = await storage.getWorkflow(req.params.id);\n      if (!workflow || workflow.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Workflow not found\" });\n      }\n      await storage.deleteWorkflow(req.params.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Automations routes\n  app.get(\"/api/automations\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const automations = await storage.getAutomationsByUser(req.user.id);\n      res.json(automations);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post(\"/api/automations\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const validatedData = insertAutomationSchema.parse({\n        ...req.body,\n        userId: req.user.id\n      });\n      \n      const automation = await storage.createAutomation(validatedData);\n      res.json(automation);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // Check if message triggers workflow creation\n  const isWorkflowCreationRequest = (message: string): boolean => {\n    const triggers = [\n      'crear agente', 'crear automatización', 'crear workflow', 'crear flujo',\n      'creame', 'hazme', 'genera', 'construye', 'desarrolla',\n      'quiero que crees', 'necesito un agente', 'necesito automatizar',\n      'créalo', 'créame', 'hazlo', 'genéralo'\n    ];\n    \n    const lowerMessage = message.toLowerCase();\n    return triggers.some(trigger => lowerMessage.includes(trigger));\n  };\n\n  // Check if we have complete information to create workflow\n  // New intelligent automation detection that follows the 3-step process\n  const hasCompleteAutomationInfo = (conversationHistory: string): boolean => {\n    const conversation = conversationHistory.toLowerCase();\n    \n    // Step 1: Check if we have comprehensive business information\n    const businessInfoKeywords = [\n      'empresa', 'negocio', 'compañía', 'industria', 'sector', 'mercado',\n      'clientes', 'productos', 'servicios', 'ventas', 'marketing', \n      'procesos', 'operaciones', 'equipo', 'personal', 'departamento'\n    ];\n    const hasBusinessInfo = businessInfoKeywords.filter(keyword => \n      conversation.includes(keyword)\n    ).length >= 4; // Need at least 4 business context keywords\n\n    // Step 2: Check if we have agent/automation proposal and client approval\n    const proposalKeywords = [\n      'propongo', 'recomiendo', 'sugiero', 'podríamos crear', 'te ayudo a',\n      'automatización', 'agente', 'workflow', 'proceso automático'\n    ];\n    const approvalKeywords = [\n      'acepto', 'perfecto', 'genial', 'sí', 'adelante', 'hazlo', \n      'me gusta', 'aprovado', 'correcto', 'eso es lo que necesito',\n      'exactamente', 'perfecto', 'créalo', 'procede'\n    ];\n    const hasProposal = proposalKeywords.some(keyword => conversation.includes(keyword));\n    const hasApproval = approvalKeywords.some(keyword => conversation.includes(keyword));\n\n    // Step 3: Check if we have specific configuration details and tools\n    const toolsConfig = {\n      communication: ['whatsapp', 'telegram', 'email', 'sms', 'slack', 'discord'],\n      platforms: ['facebook', 'instagram', 'linkedin', 'website', 'shopify', 'woocommerce'],\n      storage: ['google drive', 'dropbox', 'sheets', 'excel', 'base de datos', 'notion'],\n      integrations: ['api', 'webhook', 'zapier', 'n8n', 'integración']\n    };\n    \n    let configuredToolsCount = 0;\n    for (const [category, tools] of Object.entries(toolsConfig)) {\n      if (tools.some(tool => conversation.includes(tool))) {\n        configuredToolsCount++;\n      }\n    }\n\n    // Advanced detection: check for specific configuration details\n    const hasSpecificConfig = conversation.includes('cuando') && \n                             conversation.includes('entonces') &&\n                             (conversation.includes('enviar') || conversation.includes('guardar') || \n                              conversation.includes('notificar') || conversation.includes('procesar'));\n\n    // All 3 steps must be completed:\n    // 1. Business information comprehensive\n    // 2. Proposal made and approved by client  \n    // 3. Tools and configuration specified (at least 2 tool categories + specific config)\n    return hasBusinessInfo && \n           hasProposal && \n           hasApproval && \n           configuredToolsCount >= 2 && \n           hasSpecificConfig;\n  };\n\n  // Multi-AI workflow orchestration - Nueva estructura especializada\n  async function orchestrateWorkflowCreation(prompt: string, userId?: string) {\n    const steps = [];\n    \n    try {\n      // Step 1: ChatGPT (full) → Consultor IA & Estratega de Automatizaciones\n      steps.push(\"🔍 Iniciando consultoría completa con ChatGPT...\");\n      const consultorResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'gpt-4',\n          messages: [{\n            role: 'system',\n            content: `Actúa como un consultor senior de automatización empresarial con enfoque en IA y n8n.  \nTu tarea es realizar una consultoría con el cliente para entender su empresa, procesos, objetivos y puntos débiles.  \n\n1. Haz preguntas en profundidad sobre:\n   - Industria, tamaño y estructura de la empresa.\n   - Procesos internos críticos (ventas, marketing, atención al cliente, finanzas, operaciones, IT).\n   - Herramientas y software actuales (ERP, CRM, email, bases de datos, APIs, etc.).\n   - Problemas y cuellos de botella frecuentes.\n   - Metas a corto y largo plazo (eficiencia, reducción de costos, escalabilidad).\n   - Nivel de madurez digital y de automatización actual.\n\n2. Analiza las respuestas y genera un **mapa de oportunidades**:\n   - Identifica procesos repetitivos, manuales o con alto costo de tiempo.\n   - Señala dónde la automatización con n8n tendría mayor impacto.\n   - Prioriza en base a impacto vs. facilidad de implementación.\n\n3. Propón al menos **3 automatizaciones o agentes candidatos** con:\n   - Nombre atractivo y claro.\n   - Objetivo del flujo.\n   - Apps y servicios involucrados.\n   - Beneficio esperado.\n\n4. Devuelve la salida en JSON estructurado:\n{\n \"empresa\": {...},\n \"problemas_detectados\": [\"...\"],\n \"automatizaciones_propuestas\": [\n   {\n     \"nombre\": \"...\",\n     \"objetivo\": \"...\",\n     \"apps\": [\"...\"],\n     \"beneficio\": \"...\"\n   }\n ]\n}`\n          }, {\n            role: 'user',\n            content: prompt\n          }],\n          temperature: 0.2,\n          max_tokens: 2000,\n        }),\n      });\n\n      if (!consultorResponse.ok) {\n        throw new Error(`Error en ChatGPT Consultor: ${consultorResponse.statusText}`);\n      }\n\n      const consultorData = await consultorResponse.json();\n      if (!consultorData.choices || !consultorData.choices[0]) {\n        throw new Error('Respuesta inválida de ChatGPT Consultor');\n      }\n\n      const consultoria = consultorData.choices[0].message.content;\n      steps.push(\"✅ Consultoría empresarial completada\");\n\n      // Step 2: Claude AI → Diseñador de arquitectura de workflow\n      let workflowDesign = consultoria;\n      if (process.env.ANTHROPIC_API_KEY) {\n        try {\n          steps.push(\"🏗️ Diseñando arquitectura de workflow con Claude...\");\n          const claudeResponse = await fetch('https://api.anthropic.com/v1/messages', {\n            method: 'POST',\n            headers: {\n              'x-api-key': process.env.ANTHROPIC_API_KEY,\n              'Content-Type': 'application/json',\n              'anthropic-version': '2023-06-01'\n            },\n            body: JSON.stringify({\n              model: 'claude-3-sonnet-20240229',\n              max_tokens: 2000,\n              messages: [{\n                role: 'user',\n                content: `Eres un arquitecto de automatizaciones experto en n8n.\nRecibirás un JSON con una automatización seleccionada por el cliente.\n\nTarea:\n\nConvierte esa descripción en un diseño técnico detallado de workflow en n8n.\n\nIdentifica:\n\nNodos requeridos (triggers, acciones, transformadores, condicionales, errores).\nConfiguración de cada nodo (parámetros principales).\nFlujo lógico paso a paso de los datos.\nManejo de excepciones o errores (qué pasa si un paso falla).\nPosibles variables dinámicas necesarias.\nPropón nombres cortos y claros para cada nodo (ej: \"Trigger_Gmail\", \"Guardar_Drive\", \"Notificar_Slack\").\n\nDevuelve la salida en JSON:\n{\n\"nodos_requeridos\": [\n{\"tipo\": \"Trigger\", \"nombre\": \"...\", \"detalle\": \"...\"},\n{\"tipo\": \"Accion\", \"nombre\": \"...\", \"detalle\": \"...\"},\n{\"tipo\": \"Condicion\", \"nombre\": \"...\", \"detalle\": \"...\"}\n],\n\"flujo_logico\": \"Descripción paso a paso\",\n\"manejo_errores\": \"...\"\n}\n\nCONSULTORÍA EMPRESARIAL REALIZADA:\n${consultoria}`\n              }]\n            }),\n          });\n\n          if (claudeResponse.ok) {\n            const claudeData = await claudeResponse.json();\n            if (claudeData.content && claudeData.content[0]) {\n              workflowDesign = claudeData.content[0].text;\n              steps.push(\"✅ Arquitectura de workflow diseñada\");\n            } else {\n              steps.push(\"⚠️ Claude: respuesta inválida, usando consultoría inicial\");\n            }\n          } else {\n            steps.push(\"⚠️ Claude: API error, usando consultoría inicial\");\n          }\n        } catch (claudeError: any) {\n          console.error('Claude API error:', claudeError);\n          steps.push(`⚠️ Claude: ${claudeError.message}, usando consultoría inicial`);\n        }\n      } else {\n        steps.push(\"⚠️ Claude API key no configurada, saltando diseño de arquitectura\");\n      }\n\n      // Step 3: DeepSeek → Ingeniero JSON / Generador técnico (API REAL)\n      steps.push(\"⚙️ Generando JSON workflow con DeepSeek...\");\n      let workflowJson = \"\";\n      \n      if (process.env.DEEPSEEK_API_KEY) {\n        try {\n          const deepseekResponse = await fetch('https://api.deepseek.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${process.env.DEEPSEEK_API_KEY}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              model: 'deepseek-chat',\n              messages: [{\n                role: 'system',\n                content: `Eres un ingeniero técnico especializado en n8n.  \nRecibirás un diseño en JSON con nodos requeridos y flujo lógico.  \n\nTarea:\n1. Genera el workflow completo en formato JSON válido de n8n.\n2. Cada nodo debe tener:\n   - \"parameters\"\n   - \"id\"\n   - \"name\"\n   - \"type\"\n   - \"typeVersion\"\n   - \"position\"\n3. Incluye conexiones en \"connections\" indicando el flujo correcto.\n4. Usa ejemplos de valores por defecto cuando no se definan (ej: emails, nombres de archivo).\n5. Optimiza para que el workflow sea claro, modular y fácil de mantener.\n\nLa salida debe ser un único objeto JSON válido como este:\n{\n \"nodes\": [...],\n \"connections\": {...}\n}`\n              }, {\n                role: 'user',\n                content: `Convierte este diseño de arquitectura en un workflow JSON de n8n:\\n\\n${workflowDesign}`\n              }],\n              temperature: 0.1,\n              max_tokens: 2500,\n            }),\n          });\n\n          if (deepseekResponse.ok) {\n            const deepseekData = await deepseekResponse.json();\n            if (deepseekData.choices && deepseekData.choices[0]) {\n              workflowJson = deepseekData.choices[0].message.content;\n              steps.push(\"✅ JSON workflow generado con DeepSeek real\");\n            } else {\n              throw new Error('Respuesta inválida de DeepSeek');\n            }\n          } else {\n            throw new Error(`Error en DeepSeek: ${deepseekResponse.statusText}`);\n          }\n        } catch (deepseekError: any) {\n          console.error('DeepSeek API error:', deepseekError);\n          steps.push(`⚠️ DeepSeek: ${deepseekError.message}, usando fallback`);\n          \n          // Fallback a ChatGPT si DeepSeek falla\n          const fallbackResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n              'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              model: 'gpt-4o-mini',\n              messages: [{\n                role: 'system',\n                content: `Eres un ingeniero técnico especializado en n8n. Genera un workflow JSON válido.`\n              }, {\n                role: 'user',\n                content: `Convierte este diseño en un workflow JSON de n8n:\\n\\n${workflowDesign}`\n              }],\n              temperature: 0.1,\n              max_tokens: 2500,\n            }),\n          });\n          \n          if (fallbackResponse.ok) {\n            const fallbackData = await fallbackResponse.json();\n            workflowJson = fallbackData.choices[0].message.content;\n            steps.push(\"✅ JSON generado con ChatGPT fallback\");\n          } else {\n            throw new Error('Error en ambas APIs: DeepSeek y ChatGPT fallback');\n          }\n        }\n      } else {\n        steps.push(\"⚠️ DeepSeek API key no configurada, usando ChatGPT fallback\");\n        \n        // Fallback a ChatGPT si no hay API key de DeepSeek\n        const fallbackResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: 'gpt-4o-mini',\n            messages: [{\n              role: 'system',\n              content: `Eres un ingeniero técnico especializado en n8n. Genera un workflow JSON válido.`\n            }, {\n              role: 'user',\n              content: `Convierte este diseño en un workflow JSON de n8n:\\n\\n${workflowDesign}`\n            }],\n            temperature: 0.1,\n            max_tokens: 2500,\n          }),\n        });\n        \n        const fallbackData = await fallbackResponse.json();\n        workflowJson = fallbackData.choices[0].message.content;\n        steps.push(\"✅ JSON generado con ChatGPT fallback\");\n      }\n\n      // Step 4: ChatGPT-4o mini → Validador rápido & Ajustador final\n      steps.push(\"✅ Validando y ajustando JSON con ChatGPT-4o mini...\");\n      const validatorResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'gpt-4o-mini',\n          messages: [{\n            role: 'system',\n            content: `Eres un verificador y ajustador final de workflows en n8n.  \nRecibirás un JSON generado por otra IA.\n\nTarea:\n1. Revisa que sea JSON válido y bien formado.\n2. Verifica que los nodos tengan nombre, tipo y posición coherente.\n3. Ajusta detalles mínimos (formato, posiciones duplicadas, faltas en conexiones).\n4. Devuelve el JSON final optimizado para importar en n8n.\n5. Antes del JSON, escribe una sola línea de confirmación: \n   \"✅ Workflow validado y listo para importar en n8n\"`\n          }, {\n            role: 'user',\n            content: `Valida y ajusta este JSON de n8n:\\n\\n${workflowJson}`\n          }],\n          temperature: 0.1,\n          max_tokens: 2000,\n        }),\n      });\n\n      if (!validatorResponse.ok) {\n        throw new Error(`Error en validador final: ${validatorResponse.statusText}`);\n      }\n\n      const validatorData = await validatorResponse.json();\n      let finalWorkflowJson = validatorData.choices[0].message.content;\n      steps.push(\"✅ JSON validado y ajustado\");\n\n      // Clean JSON string - remove markdown formatting\n      finalWorkflowJson = finalWorkflowJson.replace(/```json/g, '').replace(/```/g, '').trim();\n      \n      // Validate JSON\n      let parsedJson;\n      try {\n        parsedJson = JSON.parse(finalWorkflowJson);\n      } catch (parseError) {\n        // If JSON is invalid, create a basic workflow structure\n        parsedJson = {\n          name: \"Automatización Personalizada\",\n          nodes: [\n            {\n              name: \"Start\",\n              type: \"n8n-nodes-base.start\",\n              parameters: {},\n              position: [250, 300]\n            }\n          ],\n          connections: {}\n        };\n        finalWorkflowJson = JSON.stringify(parsedJson, null, 2);\n        steps.push(\"⚠️ JSON corregido - estructura básica aplicada\");\n      }\n\n      // Save to database if user is authenticated\n      if (userId) {\n        try {\n          const automation = await storage.createAutomation({\n            prompt,\n            workflowJson: parsedJson,\n            userId,\n            title: `Automatización generada desde chat`,\n            status: 'completed'\n          });\n          steps.push(`✅ Guardado en base de datos (ID: ${automation.id})`);\n        } catch (dbError: any) {\n          console.error('Error saving to database:', dbError);\n          steps.push(`⚠️ Error guardando en BD: ${dbError.message}`);\n        }\n      }\n\n      return {\n        success: true,\n        steps,\n        finalPlan: workflowDesign,\n        workflowJson: finalWorkflowJson,\n        message: \"🎉 ¡Workflow creado exitosamente! Sistema Multi-IA completado: ChatGPT (Consultor) → Claude (Arquitecto) → DeepSeek (Ingeniero) → ChatGPT-4o mini (Validador).\"\n      };\n\n    } catch (error: any) {\n      return {\n        success: false,\n        steps,\n        error: error.message,\n        message: \"❌ Hubo un error en la generación del workflow. Por favor, intenta nuevamente.\"\n      };\n    }\n  }\n\n  // AI Chat endpoint (replacing Supabase Edge Function)\n  app.post(\"/api/chat\", async (req: Request, res: Response) => {\n    try {\n      const { message, sessionId } = req.body;\n      \n      if (!message) {\n        return res.status(400).json({ error: 'Message is required' });\n      }\n\n      // Get OpenAI API key\n      const openAIApiKey = process.env.OPENAI_API_KEY;\n      if (!openAIApiKey) {\n        return res.status(500).json({ error: 'OpenAI API key not configured' });\n      }\n\n      let user = null;\n      let conversationHistory: Array<{role: string, content: string}> = [];\n\n      // Handle authenticated vs anonymous chat\n      if (sessionId !== 'landing-page-chat') {\n        // For authenticated users\n        const authHeader = req.headers['authorization'];\n        const token = authHeader && authHeader.split(' ')[1];\n        \n        if (token) {\n          try {\n            const decoded = jwt.verify(token, JWT_SECRET) as any;\n            user = await storage.getUser(decoded.userId);\n            \n            if (user) {\n              try {\n                // Save user message\n                await storage.createMessage({\n                  chatSessionId: sessionId,\n                  content: message,\n                  sender: 'user',\n                  role: 'user'\n                });\n\n                // Get conversation history\n                const messages = await storage.getMessagesBySession(sessionId, 10);\n                conversationHistory = messages.map(msg => ({\n                  role: msg.role || 'user',\n                  content: msg.content\n                }));\n              } catch (storageError) {\n                console.error('Storage error in chat:', storageError);\n                // Continue without saving to database for now\n              }\n            }\n          } catch (error) {\n            // Continue as anonymous\n          }\n        }\n      }\n\n      // Check if this is a workflow creation request\n      if (isWorkflowCreationRequest(message)) {\n        // Get conversation history to check if we have complete information\n        const fullConversation = conversationHistory.map(msg => msg.content).join(' ') + ' ' + message;\n        \n        if (hasCompleteAutomationInfo(fullConversation)) {\n          // We have enough information, show the create button\n          const response = `🎯 **¡Excelente!** He completado los 3 pasos necesarios para crear tu automatización:\n\n✅ **Paso 1 - Información empresarial:** Tengo clara la información sobre tu empresa y procesos\n✅ **Paso 2 - Propuesta aprobada:** Has aprobado la automatización que te he propuesto\n✅ **Paso 3 - Configuración técnica:** Tienes especificadas las herramientas y configuraciones necesarias\n\n🚀 **Todo está listo para crear tu automatización personalizada**\n\nEl sistema procederá con la generación automática usando múltiples IAs especializadas (ChatGPT → Claude → DeepSeek → N8N) para obtener el mejor resultado posible.`;\n          \n          // Save AI response\n          if (user && sessionId !== 'landing-page-chat') {\n            try {\n              await storage.createMessage({\n                chatSessionId: sessionId,\n                content: response,\n                sender: 'ai',\n                role: 'assistant'\n              });\n            } catch (storageError) {\n              console.error('Storage error saving AI response:', storageError);\n            }\n          }\n\n          return res.json({ \n            response, \n            sessionId,\n            showCreateButton: true\n          });\n        } else {\n          // We need more information, don't show the button yet\n          const response = `¡Entiendo que quieres crear una automatización! Para diseñar el agente perfecto para tu negocio, necesito algunos detalles más específicos:\n\n🔧 **Herramientas de comunicación:**\n- ¿Usarás WhatsApp, Telegram, email, SMS?\n\n🌐 **Plataformas de integración:**\n- ¿Facebook, Instagram, LinkedIn, tu website?\n\n💾 **Almacenamiento de datos:**\n- ¿Google Drive, Dropbox, servidor local, base de datos?\n\n📝 **Proceso específico:** \n- ¿Qué tareas exactas quieres automatizar?\n- ¿Cuándo debe activarse la automatización?\n- ¿Qué debe hacer el sistema cuando recibe información?\n\n📢 **¿Cómo quieres recibir notificaciones?**\n- Email, Slack, Discord, WhatsApp\n\nCuando me proporciones estos detalles, podré generar tu automatización completa con nuestro sistema de 4 IAs especializadas.`;\n          \n          // Save AI response\n          if (user && sessionId !== 'landing-page-chat') {\n            try {\n              await storage.createMessage({\n                chatSessionId: sessionId,\n                content: response,\n                sender: 'ai',\n                role: 'assistant'\n              });\n            } catch (storageError) {\n              console.error('Storage error saving AI response:', storageError);\n            }\n          }\n\n          return res.json({ \n            response, \n            sessionId,\n            showCreateButton: false // Don't show button until we have complete info\n          });\n        }\n      }\n\n      // Regular chat flow\n      const systemMessage = sessionId === 'landing-page-chat' ? {\n        role: 'system',\n        content: `Eres un consultor senior especializado en IA y automatización empresarial para Precensus AI. Tu misión es ofrecer una CONSULTORÍA GRATUITA personalizada, analizando el negocio del usuario y recomendando las mejores automatizaciones antes de presentar planes.\n\nCUANDO EL USUARIO MENCIONE CREAR UN AGENTE O AUTOMATIZACIÓN:\n1. Pregunta qué HERRAMIENTAS específicas quiere usar:\n   - ¿WhatsApp, Telegram, email, SMS para comunicación?\n   - ¿Facebook, Instagram, LinkedIn, website para integración?\n   - ¿Google Drive, Dropbox para almacenamiento?\n   - ¿Slack, Discord, email para notificaciones?\n   - ¿Hojas de cálculo, CRM específico para datos?\n\n2. Si dice \"créame ese agente\" o \"créalo\", explica que iniciarás el proceso completo de generación automática.\n\nMETODOLOGÍA DE CONSULTORÍA:\n1. DIAGNÓSTICO: Haz preguntas específicas sobre su negocio, procesos actuales, dolores y objetivos\n2. ANÁLISIS: Identifica oportunidades de automatización y agentes que más beneficio traerán\n3. RECOMENDACIÓN: Presenta agentes específicos con ROI estimado\n4. PROPUESTA: Recomienda el plan ideal y presenta todas las opciones\n\nINFORMACIÓN SOBRE PRECENSUS AI:\n- Empresa líder en automatización empresarial con IA\n- Sistema multi-IA (ChatGPT, Claude, DeepSeek, N8N Assistant) para código JSON optimizado\n- Implementación inmediata con n8n + asesorías continuas\n- +100 empresas automatizadas con resultados comprobados\n\nAGENTES DISPONIBLES Y SUS BENEFICIOS:\n• Agente de Atención al Cliente: Respuestas WhatsApp 24/7, reduce 80% consultas repetitivas\n• Agente de Ventas: Califica leads automáticamente, aumenta conversión 40%\n• Agente de Operaciones: Procesa facturas y gestiona inventario, ahorra 15h/semana\n• Agente de Marketing: Segmentación automática, mejora engagement 60%\n• Agente de RRHH: Screening candidatos, reduce tiempo de contratación 70%\n• Agente Financiero: Conciliación bancaria automática, elimina errores manuales\n\nPLANES DISPONIBLES (presentar DESPUÉS de la consultoría):\n🔹 FREEMIUM ($0/mes): 1 asesoría IA gratis, acceso al chat\n🔹 INICIO ($299/mes): 1 automatización completa, 2h asesoría, soporte WhatsApp\n🔹 PROFESIONAL ($599/mes) ⭐ MÁS POPULAR: 3 automatizaciones, 4h asesoría, chatbot multicanal\n🔹 EMPRESA ($1,199/mes): 5 automatizaciones + chatbots, 8h asesoría, implementación prioritaria  \n🔹 ENTERPRISE ($2,499/mes base): Automatizaciones ilimitadas, asesor dedicado 20h/mes, SLA 99.9%\n\nActúa como un consultor experto, amigable pero profesional. Haz preguntas inteligentes, escucha atentamente y personaliza cada recomendación al negocio específico del usuario.`\n      } : {\n        role: 'system',\n        content: `Eres un asistente especializado en automatización de procesos. Tu trabajo es:\n\nCUANDO EL USUARIO MENCIONE CREAR UN AGENTE:\n1. Pregunta ESPECÍFICAMENTE qué herramientas quiere usar:\n   - ¿WhatsApp, Telegram, email, SMS para comunicación?\n   - ¿En qué plataforma quiere que se suba? (Facebook, Instagram, LinkedIn, website)\n   - ¿Dónde almacenar datos? (Google Drive, Dropbox, servidor)\n   - ¿Cómo recibir notificaciones? (email, Slack, Discord)\n   - ¿Qué sistema de datos usar? (Hojas de cálculo, CRM específico)\n\n2. NUNCA generes automáticamente el workflow. Siempre pide información específica primero.\n\n3. Una vez que tengas suficiente información detallada, responde: \"Ya tengo toda la información necesaria. Puedes usar el botón 'Crear Automatización' para que nuestro equipo de 4 IAs especialistas genere tu workflow personalizado.\"\n\nOTRAS TAREAS:\n1. Entender los procesos que describe el usuario\n2. Sugerir automatizaciones específicas y prácticas\n3. Ofrecer crear workflows para n8n cuando sea apropiado\n4. Ser claro, conciso y actionable en tus respuestas\n5. Preguntar detalles específicos cuando necesites más información\n\nSiempre responde en español y enfócate en soluciones de automatización reales con herramientas específicas.`\n      };\n\n      const openAIMessages = [\n        systemMessage,\n        ...conversationHistory.reverse(), // Reverse to get chronological order\n        { role: 'user', content: message }\n      ];\n\n      // Call OpenAI API\n      const response = await fetch('https://api.openai.com/v1/chat/completions', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${openAIApiKey}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          model: 'gpt-4o-mini',\n          messages: openAIMessages,\n          temperature: 0.7,\n          max_tokens: 1000,\n        }),\n      });\n\n      if (!response.ok) {\n        return res.status(500).json({ error: 'Error generating AI response' });\n      }\n\n      const data = await response.json();\n      const aiResponse = data.choices[0].message.content;\n\n      // Save AI response for authenticated users\n      if (user && sessionId !== 'landing-page-chat') {\n        try {\n          await storage.createMessage({\n            chatSessionId: sessionId,\n            content: aiResponse,\n            sender: 'ai',\n            role: 'assistant'\n          });\n        } catch (storageError) {\n          console.error('Storage error saving final AI response:', storageError);\n        }\n      }\n\n      // Check if user has provided enough information and we should show create button\n      const fullConversation = conversationHistory.map(msg => msg.content).join(' ') + ' ' + message + ' ' + aiResponse;\n      const shouldShowButton = hasCompleteAutomationInfo(fullConversation);\n\n      res.json({ \n        response: aiResponse, \n        sessionId,\n        showCreateButton: shouldShowButton\n      });\n    } catch (error) {\n      console.error('Chat API error:', error);\n      res.status(500).json({ error: 'Error generating AI response' });\n    }\n  });\n\n  // Create automation with contact form\n  app.post(\"/api/create-automation\", async (req: Request, res: Response) => {\n    try {\n      const { conversationContext, email, phone } = req.body;\n      \n      if (!conversationContext || !email || !phone) {\n        return res.status(400).json({ error: 'Faltan datos requeridos' });\n      }\n\n      // Execute multi-AI workflow\n      const workflowResult = await orchestrateWorkflowCreation(conversationContext);\n      \n      if (workflowResult.success && workflowResult.workflowJson) {\n        // Try to send email with the JSON\n        const emailResult = await sendWorkflowEmail(workflowResult.workflowJson, email, phone, conversationContext);\n        \n        // Save contact info\n        console.log('New automation request:', { email, phone, timestamp: new Date() });\n        \n        if (emailResult.success) {\n          return res.json({ \n            success: true, \n            message: '✅ Automatización creada exitosamente. Hemos enviado el archivo JSON a tu email. Te contactaremos pronto.',\n            emailSent: true\n          });\n        } else {\n          // Email failed, provide JSON directly and inform user\n          return res.json({ \n            success: true, \n            message: `⚠️ Automatización creada exitosamente, pero hubo un problema enviando el email (${emailResult.error}). Puedes descargar el archivo JSON abajo. Te contactaremos pronto.`,\n            emailSent: false,\n            emailError: emailResult.error,\n            workflowJson: workflowResult.workflowJson,\n            downloadAvailable: true\n          });\n        }\n      } else {\n        return res.status(500).json({ \n          error: 'Error generando la automatización', \n          details: workflowResult.error \n        });\n      }\n    } catch (error: any) {\n      console.error('Error creating automation:', error);\n      res.status(500).json({ error: 'Error interno del servidor' });\n    }\n  });\n\n  // Lead form endpoint\n  app.post(\"/api/send-lead\", async (req, res) => {\n    try {\n      const { name, email, details } = req.body;\n      \n      // For now, just log the lead - in production you'd send an email\n      console.log('New lead received:', { name, email, details });\n      \n      res.json({ success: true, message: 'Lead received successfully' });\n    } catch (error) {\n      res.status(500).json({ error: 'Error processing lead' });\n    }\n  });\n\n  // Download workflow JSON endpoint\n  app.get(\"/api/automations/:id/download\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const automation = await storage.getAutomation(req.params.id);\n      if (!automation || automation.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Automation not found\" });\n      }\n\n      const filename = `workflow-${automation.id}.json`;\n      \n      res.setHeader('Content-Type', 'application/json');\n      res.setHeader('Content-Disposition', `attachment; filename=\"${filename}\"`);\n      res.json(automation.workflowJson);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Get automation details endpoint\n  app.get(\"/api/automations/:id\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const automation = await storage.getAutomation(req.params.id);\n      if (!automation || automation.userId !== req.user.id) {\n        return res.status(404).json({ error: \"Automation not found\" });\n      }\n      res.json(automation);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // Orchestrate workflow endpoint (for manual trigger)\n  app.post(\"/api/orchestrate\", authenticateToken, async (req: any, res: any) => {\n    try {\n      const { prompt } = req.body;\n      \n      if (!prompt) {\n        return res.status(400).json({ error: 'Prompt is required' });\n      }\n\n      const workflowResult = await orchestrateWorkflowCreation(prompt, req.user.id);\n      \n      if (workflowResult.success) {\n        res.json({\n          success: true,\n          message: workflowResult.message,\n          steps: workflowResult.steps,\n          plan: workflowResult.finalPlan,\n          workflowJson: workflowResult.workflowJson\n        });\n      } else {\n        res.status(500).json({\n          success: false,\n          message: workflowResult.message,\n          error: workflowResult.error,\n          steps: workflowResult.steps\n        });\n      }\n    } catch (error: any) {\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":46203},"server/storage.ts":{"content":"import { \n  users, \n  profiles,\n  chatSessions,\n  messages,\n  workflows,\n  automations,\n  templates,\n  type User, \n  type InsertUser,\n  type Profile,\n  type InsertProfile,\n  type ChatSession,\n  type InsertChatSession,\n  type Message,\n  type InsertMessage,\n  type Workflow,\n  type InsertWorkflow,\n  type Automation,\n  type InsertAutomation,\n  type Template,\n  type InsertTemplate\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined>;\n\n  // Profile operations\n  getProfile(userId: string): Promise<Profile | undefined>;\n  createProfile(profile: InsertProfile): Promise<Profile>;\n  updateProfile(userId: string, updates: Partial<InsertProfile>): Promise<Profile | undefined>;\n\n  // Chat session operations\n  getChatSession(id: string): Promise<ChatSession | undefined>;\n  getChatSessionsByUser(userId: string): Promise<ChatSession[]>;\n  createChatSession(session: InsertChatSession): Promise<ChatSession>;\n  updateChatSession(id: string, updates: Partial<InsertChatSession>): Promise<ChatSession | undefined>;\n  deleteChatSession(id: string): Promise<void>;\n\n  // Message operations\n  getMessage(id: string): Promise<Message | undefined>;\n  getMessagesBySession(sessionId: string, limit?: number): Promise<Message[]>;\n  createMessage(message: InsertMessage): Promise<Message>;\n  updateMessage(id: string, updates: Partial<InsertMessage>): Promise<Message | undefined>;\n\n  // Workflow operations\n  getWorkflow(id: string): Promise<Workflow | undefined>;\n  getWorkflowsByUser(userId: string): Promise<Workflow[]>;\n  createWorkflow(workflow: InsertWorkflow): Promise<Workflow>;\n  updateWorkflow(id: string, updates: Partial<InsertWorkflow>): Promise<Workflow | undefined>;\n  deleteWorkflow(id: string): Promise<void>;\n\n  // Automation operations\n  getAutomation(id: string): Promise<Automation | undefined>;\n  getAutomationsByUser(userId: string): Promise<Automation[]>;\n  createAutomation(automation: InsertAutomation): Promise<Automation>;\n  updateAutomation(id: string, updates: Partial<InsertAutomation>): Promise<Automation | undefined>;\n  deleteAutomation(id: string): Promise<void>;\n\n  // Template operations\n  getTemplate(id: string): Promise<Template | undefined>;\n  getActiveTemplates(): Promise<Template[]>;\n  getTemplatesByCategory(category: string): Promise<Template[]>;\n  createTemplate(template: InsertTemplate): Promise<Template>;\n  updateTemplate(id: string, updates: Partial<InsertTemplate>): Promise<Template | undefined>;\n  deleteTemplate(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<InsertUser>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  // Profile operations\n  async getProfile(userId: string): Promise<Profile | undefined> {\n    const [profile] = await db.select().from(profiles).where(eq(profiles.userId, userId));\n    return profile || undefined;\n  }\n\n  async createProfile(insertProfile: InsertProfile): Promise<Profile> {\n    const [profile] = await db\n      .insert(profiles)\n      .values(insertProfile)\n      .returning();\n    return profile;\n  }\n\n  async updateProfile(userId: string, updates: Partial<InsertProfile>): Promise<Profile | undefined> {\n    const [profile] = await db\n      .update(profiles)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(profiles.userId, userId))\n      .returning();\n    return profile || undefined;\n  }\n\n  // Chat session operations\n  async getChatSession(id: string): Promise<ChatSession | undefined> {\n    const [session] = await db.select().from(chatSessions).where(eq(chatSessions.id, id));\n    return session || undefined;\n  }\n\n  async getChatSessionsByUser(userId: string): Promise<ChatSession[]> {\n    return await db.select().from(chatSessions).where(eq(chatSessions.userId, userId)).orderBy(desc(chatSessions.updatedAt));\n  }\n\n  async createChatSession(insertSession: InsertChatSession): Promise<ChatSession> {\n    const [session] = await db\n      .insert(chatSessions)\n      .values(insertSession)\n      .returning();\n    return session;\n  }\n\n  async updateChatSession(id: string, updates: Partial<InsertChatSession>): Promise<ChatSession | undefined> {\n    const [session] = await db\n      .update(chatSessions)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(chatSessions.id, id))\n      .returning();\n    return session || undefined;\n  }\n\n  async deleteChatSession(id: string): Promise<void> {\n    await db.delete(chatSessions).where(eq(chatSessions.id, id));\n  }\n\n  // Message operations\n  async getMessage(id: string): Promise<Message | undefined> {\n    const [message] = await db.select().from(messages).where(eq(messages.id, id));\n    return message || undefined;\n  }\n\n  async getMessagesBySession(sessionId: string, limit: number = 50): Promise<Message[]> {\n    return await db.select().from(messages).where(eq(messages.chatSessionId, sessionId)).orderBy(asc(messages.createdAt)).limit(limit);\n  }\n\n  async createMessage(insertMessage: InsertMessage): Promise<Message> {\n    const [message] = await db\n      .insert(messages)\n      .values(insertMessage)\n      .returning();\n    return message;\n  }\n\n  async updateMessage(id: string, updates: Partial<InsertMessage>): Promise<Message | undefined> {\n    const [message] = await db\n      .update(messages)\n      .set(updates)\n      .where(eq(messages.id, id))\n      .returning();\n    return message || undefined;\n  }\n\n  // Workflow operations\n  async getWorkflow(id: string): Promise<Workflow | undefined> {\n    const [workflow] = await db.select().from(workflows).where(eq(workflows.id, id));\n    return workflow || undefined;\n  }\n\n  async getWorkflowsByUser(userId: string): Promise<Workflow[]> {\n    return await db.select().from(workflows).where(eq(workflows.userId, userId)).orderBy(desc(workflows.updatedAt));\n  }\n\n  async createWorkflow(insertWorkflow: InsertWorkflow): Promise<Workflow> {\n    const [workflow] = await db\n      .insert(workflows)\n      .values(insertWorkflow)\n      .returning();\n    return workflow;\n  }\n\n  async updateWorkflow(id: string, updates: Partial<InsertWorkflow>): Promise<Workflow | undefined> {\n    const [workflow] = await db\n      .update(workflows)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(workflows.id, id))\n      .returning();\n    return workflow || undefined;\n  }\n\n  async deleteWorkflow(id: string): Promise<void> {\n    await db.delete(workflows).where(eq(workflows.id, id));\n  }\n\n  // Automation operations\n  async getAutomation(id: string): Promise<Automation | undefined> {\n    const [automation] = await db.select().from(automations).where(eq(automations.id, id));\n    return automation || undefined;\n  }\n\n  async getAutomationsByUser(userId: string): Promise<Automation[]> {\n    return await db.select().from(automations).where(eq(automations.userId, userId)).orderBy(desc(automations.createdAt));\n  }\n\n  async createAutomation(insertAutomation: InsertAutomation): Promise<Automation> {\n    const [automation] = await db\n      .insert(automations)\n      .values(insertAutomation)\n      .returning();\n    return automation;\n  }\n\n  async updateAutomation(id: string, updates: Partial<InsertAutomation>): Promise<Automation | undefined> {\n    const [automation] = await db\n      .update(automations)\n      .set(updates)\n      .where(eq(automations.id, id))\n      .returning();\n    return automation || undefined;\n  }\n\n  async deleteAutomation(id: string): Promise<void> {\n    await db.delete(automations).where(eq(automations.id, id));\n  }\n\n  // Template operations\n  async getTemplate(id: string): Promise<Template | undefined> {\n    const [template] = await db.select().from(templates).where(eq(templates.id, id));\n    return template || undefined;\n  }\n\n  async getActiveTemplates(): Promise<Template[]> {\n    return await db.select().from(templates).where(eq(templates.isActive, true)).orderBy(desc(templates.updatedAt));\n  }\n\n  async getTemplatesByCategory(category: string): Promise<Template[]> {\n    return await db.select().from(templates).where(and(eq(templates.category, category), eq(templates.isActive, true))).orderBy(desc(templates.updatedAt));\n  }\n\n  async createTemplate(insertTemplate: InsertTemplate): Promise<Template> {\n    const [template] = await db\n      .insert(templates)\n      .values(insertTemplate)\n      .returning();\n    return template;\n  }\n\n  async updateTemplate(id: string, updates: Partial<InsertTemplate>): Promise<Template | undefined> {\n    const [template] = await db\n      .update(templates)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(templates.id, id))\n      .returning();\n    return template || undefined;\n  }\n\n  async deleteTemplate(id: string): Promise<void> {\n    await db.delete(templates).where(eq(templates.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":10073},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2254},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, uuid, timestamp, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\nimport { relations } from \"drizzle-orm\";\n\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  username: text(\"username\"),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const profiles = pgTable(\"profiles\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  username: text(\"username\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const chatSessions = pgTable(\"chat_sessions\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  chatSessionId: uuid(\"chat_session_id\").notNull().references(() => chatSessions.id, { onDelete: \"cascade\" }),\n  content: text(\"content\").notNull(),\n  sender: text(\"sender\").notNull(), // 'user' or 'ai'\n  role: text(\"role\").default(\"user\"), // 'user' or 'assistant'\n  aiType: text(\"ai_type\"), // 'chatgpt', 'claude', 'deepseek', 'n8n'\n  workflowStatus: text(\"workflow_status\"), // 'sending', 'success', 'error'\n  workflowId: text(\"workflow_id\"),\n  workflowError: text(\"workflow_error\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const workflows = pgTable(\"workflows\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  userId: uuid(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  workflowJson: jsonb(\"workflow_json\").notNull(),\n  templateUsed: text(\"template_used\"),\n  status: text(\"status\").notNull().default(\"draft\"),\n  validationErrors: jsonb(\"validation_errors\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const automations = pgTable(\"automations\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  prompt: text(\"prompt\").notNull(),\n  workflowJson: jsonb(\"workflow_json\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  userId: uuid(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  title: text(\"title\"),\n  status: text(\"status\").default(\"completed\"),\n});\n\nexport const templates = pgTable(\"templates\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: text(\"name\").notNull().unique(),\n  category: text(\"category\").notNull(),\n  subcategory: text(\"subcategory\"),\n  templateJson: jsonb(\"template_json\").notNull(),\n  description: text(\"description\"),\n  keywords: text(\"keywords\").array(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many, one }) => ({\n  profile: one(profiles, {\n    fields: [users.id],\n    references: [profiles.userId],\n  }),\n  chatSessions: many(chatSessions),\n  workflows: many(workflows),\n  automations: many(automations),\n}));\n\nexport const profilesRelations = relations(profiles, ({ one }) => ({\n  user: one(users, {\n    fields: [profiles.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const chatSessionsRelations = relations(chatSessions, ({ one, many }) => ({\n  user: one(users, {\n    fields: [chatSessions.userId],\n    references: [users.id],\n  }),\n  messages: many(messages),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  chatSession: one(chatSessions, {\n    fields: [messages.chatSessionId],\n    references: [chatSessions.id],\n  }),\n}));\n\nexport const workflowsRelations = relations(workflows, ({ one }) => ({\n  user: one(users, {\n    fields: [workflows.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const automationsRelations = relations(automations, ({ one }) => ({\n  user: one(users, {\n    fields: [automations.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  email: true,\n  password: true,\n});\n\nexport const insertProfileSchema = createInsertSchema(profiles).pick({\n  userId: true,\n  username: true,\n});\n\nexport const insertChatSessionSchema = createInsertSchema(chatSessions).pick({\n  userId: true,\n  title: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).pick({\n  chatSessionId: true,\n  content: true,\n  sender: true,\n  role: true,\n  aiType: true,\n  workflowStatus: true,\n  workflowId: true,\n  workflowError: true,\n});\n\nexport const insertWorkflowSchema = createInsertSchema(workflows).pick({\n  userId: true,\n  title: true,\n  description: true,\n  workflowJson: true,\n  templateUsed: true,\n  status: true,\n  validationErrors: true,\n});\n\nexport const insertAutomationSchema = createInsertSchema(automations).pick({\n  prompt: true,\n  workflowJson: true,\n  userId: true,\n  title: true,\n  status: true,\n});\n\nexport const insertTemplateSchema = createInsertSchema(templates).pick({\n  name: true,\n  category: true,\n  subcategory: true,\n  templateJson: true,\n  description: true,\n  keywords: true,\n  isActive: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Profile = typeof profiles.$inferSelect;\nexport type InsertProfile = z.infer<typeof insertProfileSchema>;\nexport type ChatSession = typeof chatSessions.$inferSelect;\nexport type InsertChatSession = z.infer<typeof insertChatSessionSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type Workflow = typeof workflows.$inferSelect;\nexport type InsertWorkflow = z.infer<typeof insertWorkflowSchema>;\nexport type Automation = typeof automations.$inferSelect;\nexport type InsertAutomation = z.infer<typeof insertAutomationSchema>;\nexport type Template = typeof templates.$inferSelect;\nexport type InsertTemplate = z.infer<typeof insertTemplateSchema>;\n","size_bytes":6576},"client/src/App.css":{"content":"#root {\n  max-width: 1280px;\n  margin: 0 auto;\n  padding: 2rem;\n  text-align: center;\n}\n\n.logo {\n  height: 6em;\n  padding: 1.5em;\n  will-change: filter;\n  transition: filter 300ms;\n}\n.logo:hover {\n  filter: drop-shadow(0 0 2em #646cffaa);\n}\n.logo.react:hover {\n  filter: drop-shadow(0 0 2em #61dafbaa);\n}\n\n@keyframes logo-spin {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n@media (prefers-reduced-motion: no-preference) {\n  a:nth-of-type(2) .logo {\n    animation: logo-spin infinite 20s linear;\n  }\n}\n\n.card {\n  padding: 2em;\n}\n\n.read-the-docs {\n  color: #888;\n}\n","size_bytes":606},"client/src/App.tsx":{"content":"import { Toaster } from \"@/components/ui/toaster\";\nimport { Toaster as Sonner } from \"@/components/ui/sonner\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport Index from \"./pages/Index\";\nimport NotFound from \"./pages/NotFound\";\nimport Auth from \"./pages/Auth\";\nimport Chat from \"./pages/Chat\";\nimport BusinessChat from \"./pages/BusinessChat\";\n\nconst queryClient = new QueryClient();\n\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <TooltipProvider>\n      <Toaster />\n      <Sonner />\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<Index />} />\n          <Route path=\"/auth\" element={<Auth />} />\n          <Route path=\"/chat\" element={<Chat />} />\n          <Route path=\"/business-chat\" element={<BusinessChat />} />\n          {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL \"*\" ROUTE */}\n          <Route path=\"*\" element={<NotFound />} />\n        </Routes>\n      </BrowserRouter>\n    </TooltipProvider>\n  </QueryClientProvider>\n);\n\nexport default App;\n","size_bytes":1159},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(var(--primary)), hsl(var(--primary)) 50%, hsl(var(--foreground)) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n}\n\n/* Definition of the design system. All colors, gradients, fonts, etc should be defined here. \nAll colors MUST be HSL.\n*/\n\n@layer base {\n  :root {\n    --background: 220 14% 97%;\n    --foreground: 222.2 84% 4.9%;\n\n    --card: 0 0% 100%;\n    --card-foreground: 222.2 84% 4.9%;\n\n    --popover: 0 0% 100%;\n    --popover-foreground: 222.2 84% 4.9%;\n\n    --primary: 217 91% 27%;\n    --primary-foreground: 0 0% 98%;\n\n    --secondary: 220 14% 96%;\n    --secondary-foreground: 217 91% 27%;\n\n    --muted: 220 14% 95%;\n    --muted-foreground: 215 16% 47%;\n\n    --accent: 271 81% 56%;\n    --accent-foreground: 0 0% 98%;\n\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 214.3 31.8% 91.4%;\n    --input: 214.3 31.8% 91.4%;\n    --ring: 222.2 84% 4.9%;\n\n    --radius: 0.5rem;\n\n    --sidebar-background: 0 0% 98%;\n\n    --sidebar-foreground: 240 5.3% 26.1%;\n\n    --sidebar-primary: 240 5.9% 10%;\n\n    --sidebar-primary-foreground: 0 0% 98%;\n\n    --sidebar-accent: 240 4.8% 95.9%;\n\n    --sidebar-accent-foreground: 240 5.9% 10%;\n\n    --sidebar-border: 220 13% 91%;\n\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n\n  .dark {\n    --background: 222.2 84% 4.9%;\n    --foreground: 210 40% 98%;\n\n    --card: 222.2 84% 4.9%;\n    --card-foreground: 210 40% 98%;\n\n    --popover: 222.2 84% 4.9%;\n    --popover-foreground: 210 40% 98%;\n\n    --primary: 210 40% 98%;\n    --primary-foreground: 222.2 47.4% 11.2%;\n\n    --secondary: 217.2 32.6% 17.5%;\n    --secondary-foreground: 210 40% 98%;\n\n    --muted: 217.2 32.6% 17.5%;\n    --muted-foreground: 215 20.2% 65.1%;\n\n    --accent: 217.2 32.6% 17.5%;\n    --accent-foreground: 210 40% 98%;\n\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 210 40% 98%;\n\n    --border: 217.2 32.6% 17.5%;\n    --input: 217.2 32.6% 17.5%;\n    --ring: 212.7 26.8% 83.9%;\n    --sidebar-background: 240 5.9% 10%;\n    --sidebar-foreground: 240 4.8% 95.9%;\n    --sidebar-primary: 224.3 76.3% 48%;\n    --sidebar-primary-foreground: 0 0% 100%;\n    --sidebar-accent: 240 3.7% 15.9%;\n    --sidebar-accent-foreground: 240 4.8% 95.9%;\n    --sidebar-border: 240 3.7% 15.9%;\n    --sidebar-ring: 217.2 91.2% 59.8%;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n  }\n}","size_bytes":2693},"client/src/main.tsx":{"content":"import { createRoot } from 'react-dom/client'\nimport App from './App.tsx'\nimport './index.css'\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":158},"client/src/vite-env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n","size_bytes":38},"client/src/components/AutomationForm.tsx":{"content":"import { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { supabase } from '@/integrations/supabase/client';\nimport { useEffect } from 'react';\n\ninterface AutomationFormProps {\n  onWorkflowGenerated?: (workflow: any) => void;\n}\n\nexport const AutomationForm = ({ onWorkflowGenerated }: AutomationFormProps) => {\n  const [prompt, setPrompt] = useState('');\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [result, setResult] = useState<any>(null);\n  const [currentStep, setCurrentStep] = useState<string>('');\n  const [user, setUser] = useState<any>(null);\n\n  useEffect(() => {\n    // Get current user\n    const getCurrentUser = async () => {\n      const { data: { user } } = await supabase.auth.getUser();\n      setUser(user);\n    };\n    getCurrentUser();\n  }, []);\n\n  const handleGenerate = async () => {\n    if (!prompt.trim()) return;\n\n    if (!user) {\n      setResult({ error: 'Debes estar autenticado para crear automatizaciones' });\n      return;\n    }\n\n    setIsGenerating(true);\n    setCurrentStep('Iniciando orquestación...');\n    \n    try {\n      // Check if essential credentials are configured by testing the orchestrate function\n      setCurrentStep('Verificando credenciales...');\n      \n      const { data, error } = await supabase.functions.invoke('orchestrate', {\n        body: { \n          prompt: prompt.trim(),\n          user_id: user.id,\n          dry_run: false \n        }\n      });\n\n      if (error) {\n        console.error('Detailed error from orchestrate function:', error);\n        \n        // Check if it's a credentials error\n        if (error.message?.includes('API key') || error.message?.includes('credential') || \n            error.message?.includes('OpenAI') || error.message?.includes('Claude') || \n            error.message?.includes('DeepSeek')) {\n          setCurrentStep('Solicitando credenciales por email...');\n          \n          // Send email request for missing credentials\n          await supabase.functions.invoke('request-credentials', {\n            body: {\n              service: 'Sistema de Automatización',\n              api_key_name: 'MULTIPLE_APIS',\n              message: `Faltan credenciales para completar la automatización: \"${prompt.substring(0, 100)}...\". Error: ${error.message}`\n            }\n          });\n          \n          setResult({ \n            error: 'Faltan credenciales de API. Se ha enviado un correo solicitando la configuración necesaria.',\n            credentials_requested: true,\n            technical_error: error.message\n          });\n          setCurrentStep('Credenciales solicitadas por email');\n          return;\n        }\n        \n        // For other errors, show more detail\n        setResult({ \n          error: `Error en el proceso de automatización: ${error.message}`,\n          technical_details: error\n        });\n        setCurrentStep('Error detectado');\n        return;\n      }\n\n      setResult(data);\n      onWorkflowGenerated?.(data);\n      setCurrentStep('¡Completado!');\n    } catch (error: any) {\n      console.error('Error generating workflow:', error);\n      setResult({ error: error.message });\n      setCurrentStep('Error en la generación');\n    } finally {\n      setIsGenerating(false);\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      <Card>\n        <CardHeader>\n          <CardTitle>Crear Automatización</CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Textarea\n            placeholder=\"Describe la automatización que necesitas (ej: crear reels automáticos, generar posts de blog, etc.)\"\n            value={prompt}\n            onChange={(e) => setPrompt(e.target.value)}\n            rows={4}\n          />\n          \n          <div className=\"flex gap-2\">\n            <Button \n              onClick={handleGenerate}\n              disabled={isGenerating || !prompt.trim() || !user}\n              className=\"flex-1\"\n            >\n              {isGenerating ? 'Generando...' : 'Generar Automatización'}\n            </Button>\n            <Button \n              variant=\"outline\"\n              onClick={() => window.location.href = '/business-chat'}\n              disabled={isGenerating}\n            >\n              Consultor IA\n            </Button>\n          </div>\n\n          {!user && (\n            <p className=\"text-sm text-muted-foreground text-center\">\n              Debes estar autenticado para crear automatizaciones\n            </p>\n          )}\n\n          {isGenerating && (\n            <div className=\"text-center\">\n              <Badge variant=\"secondary\">{currentStep}</Badge>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {result && (\n        <Card>\n          <CardHeader>\n            <CardTitle>\n              {result.success ? '✅ Workflow Generado' : '❌ Error'}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {result.success ? (\n              <div className=\"space-y-4\">\n                <p>Workflow ID: <code>{result.workflow_id}</code></p>\n                <details>\n                  <summary className=\"cursor-pointer font-medium\">Ver JSON del Workflow</summary>\n                  <pre className=\"mt-2 p-4 bg-muted rounded text-sm overflow-auto\">\n                    {JSON.stringify(result.workflow_json, null, 2)}\n                  </pre>\n                </details>\n              </div>\n            ) : (\n              <div className=\"space-y-2\">\n                <div className=\"text-destructive\">\n                  <p>Error: {result.error}</p>\n                </div>\n                {result.credentials_requested && (\n                  <div className=\"bg-blue-50 dark:bg-blue-950 p-3 rounded border border-blue-200 dark:border-blue-800\">\n                    <p className=\"text-sm text-blue-700 dark:text-blue-300\">\n                      📧 Se ha enviado una solicitud de credenciales a u1974564828@gmail.com\n                    </p>\n                  </div>\n                )}\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n};","size_bytes":6272},"client/src/components/BusinessChatArea.tsx":{"content":"\nimport { useState, useEffect, useRef } from \"react\";\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n}\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Building2, Send, Bot, User as UserIcon, Lightbulb, Target, Settings, ArrowRight } from \"lucide-react\";\nimport { WorkflowComplexityVisualization } from \"./WorkflowComplexityVisualization\";\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: \"user\" | \"ai\";\n  session_id: string;\n  created_at: string;\n  message_type?: 'question' | 'proposal' | 'standard';\n}\n\ninterface BusinessChatAreaProps {\n  user: User;\n  currentChatId: string | null;\n  onCreateChat: (title?: string) => Promise<string | null>;\n}\n\n\nexport function BusinessChatArea({ user, currentChatId, onCreateChat }: BusinessChatAreaProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [currentPhase, setCurrentPhase] = useState<'discovery' | 'analysis' | 'proposal' | 'creation'>('discovery');\n  const [businessData, setBusinessData] = useState<{\n    company?: string;\n    mainActivity?: string;\n    challenges?: string;\n    processes?: string;\n  }>({});\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [awaitingResponse, setAwaitingResponse] = useState(false);\n  const [proposals, setProposals] = useState<any[]>([]);\n  const [directAutomation, setDirectAutomation] = useState<string | null>(null);\n  const [latestWorkflow, setLatestWorkflow] = useState<any>(null);\n  const [showComplexityVisualization, setShowComplexityVisualization] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  useEffect(() => {\n    if (currentChatId) {\n      fetchMessages();\n    } else {\n      setMessages([]);\n      setCurrentPhase('discovery');\n      setBusinessData({});\n      setCurrentQuestion(0);\n      setAwaitingResponse(false);\n      setProposals([]);\n      setDirectAutomation(null);\n    }\n  }, [currentChatId]);\n\n  const fetchMessages = async () => {\n    if (!currentChatId) return;\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return;\n\n      const response = await fetch(`/api/chat-sessions/${currentChatId}/messages`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        console.error(\"Error fetching messages\");\n        return;\n      }\n\n      const data = await response.json();\n\n      // Transform database records to Message interface\n      const transformedMessages: Message[] = (data || []).map((record: any) => ({\n        id: record.id,\n        content: record.content,\n        sender: record.sender as \"user\" | \"ai\",\n        session_id: record.chatSessionId,\n        created_at: record.createdAt,\n        message_type: record.role as 'question' | 'proposal' | 'standard' | undefined\n      }));\n\n      setMessages(transformedMessages);\n      scrollToBottom();\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    }\n  };\n\n  const saveMessage = async (message: Omit<Message, \"id\" | \"created_at\">) => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return null;\n\n      const response = await fetch('/api/messages', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          content: message.content,\n          sender: message.sender,\n          chatSessionId: message.session_id,\n          role: message.message_type || 'standard'\n        })\n      });\n\n      if (!response.ok) {\n        console.error(\"Error saving message\");\n        return null;\n      }\n\n      const data = await response.json();\n\n      // Transform database record to Message interface\n      const transformedMessage: Message = {\n        id: data.id,\n        content: data.content,\n        sender: data.sender as \"user\" | \"ai\",\n        session_id: data.chatSessionId,\n        created_at: data.createdAt,\n        message_type: data.role as 'question' | 'proposal' | 'standard' | undefined\n      };\n\n      return transformedMessage;\n    } catch (error) {\n      console.error(\"Error saving message:\", error);\n      return null;\n    }\n  };\n\n  const discoveryQuestions = [\n    {\n      text: \"¡Hola! Para diseñarte las mejores automatizaciones, me gustaría conocer mejor tu negocio. ¿Cuál es el nombre de tu empresa y a qué sector pertenece?\",\n      field: \"company\" as keyof typeof businessData,\n      followUp: \"Por favor, comparte el nombre de tu empresa y especifica claramente el sector (por ejemplo: moda, e-commerce, marketing digital, restaurante, consultoría, etc.).\"\n    },\n    {\n      text: \"¿Cuál es la principal actividad de vuestra empresa? ¿Qué productos vendéis o servicios ofrecéis exactamente?\",\n      field: \"mainActivity\" as keyof typeof businessData,\n      followUp: \"Describe específicamente qué hace vuestra empresa: venta de productos, servicios de marketing, creación de contenido, etc. Sé lo más concreto posible.\"\n    },\n    {\n      text: \"¿Cuáles son las tareas o procesos más repetitivos que realizáis? ¿Qué actividades os consumen más tiempo del día?\",\n      field: \"processes\" as keyof typeof businessData,\n      followUp: \"Detalla las tareas manuales repetitivas: gestión de pedidos, creación de contenido, atención al cliente, etc.\"\n    },\n    {\n      text: \"¿Cuáles son los principales retos o problemas en esos procesos? ¿Qué os gustaría mejorar o automatizar?\",\n      field: \"challenges\" as keyof typeof businessData,\n      followUp: \"Explica los problemas específicos: falta de tiempo para crear contenido, dificultades con el inventario, problemas de comunicación, etc.\"\n    }\n  ];\n\n  const isResponseComplete = (response: string, field: keyof typeof businessData): boolean => {\n    const cleanResponse = response.trim().toLowerCase();\n    const words = cleanResponse.split(' ').filter(word => word.length > 2);\n    \n    // Check for minimal information requirements\n    if (cleanResponse.length < 15 || words.length < 3) return false;\n    \n    switch (field) {\n      case 'company':\n        // Should contain company name and sector/industry\n        const hasCompanyIndicators = cleanResponse.includes('empresa') || cleanResponse.includes('compañía') || \n                                   cleanResponse.includes('negocio') || cleanResponse.includes('llamamos') ||\n                                   cleanResponse.includes('somos');\n        const hasSectorIndicators = ['marketing', 'ventas', 'restaurante', 'tienda', 'ecommerce', 'consultora', \n                                   'servicios', 'tecnología', 'salud', 'educación', 'retail', 'inmobiliaria'].some(sector => \n                                   cleanResponse.includes(sector));\n        return hasCompanyIndicators || hasSectorIndicators || cleanResponse.length > 25;\n        \n      case 'mainActivity':\n        // Should describe business model or revenue generation\n        const activityKeywords = ['vendemos', 'ofrecemos', 'servicios', 'productos', 'clientes', 'facturación',\n                                'ingresos', 'comercializamos', 'distribuimos', 'consultamos', 'asesoramos'];\n        return activityKeywords.some(keyword => cleanResponse.includes(keyword)) || words.length >= 6;\n        \n      case 'challenges':\n        // Should describe specific problems or pain points\n        const challengeKeywords = ['problema', 'desafío', 'dificultad', 'tiempo', 'lento', 'error', 'manual', \n                                 'repetitivo', 'ineficiente', 'costoso', 'difícil', 'complicado', 'perdemos'];\n        return challengeKeywords.some(keyword => cleanResponse.includes(keyword)) || words.length >= 5;\n        \n      case 'processes':\n        // Should describe repetitive tasks or time-consuming activities\n        const processKeywords = ['proceso', 'tarea', 'actividad', 'tiempo', 'horas', 'manual', 'repetitivo',\n                               'administración', 'gestión', 'entrada', 'registro', 'control', 'seguimiento'];\n        return processKeywords.some(keyword => cleanResponse.includes(keyword)) || words.length >= 4;\n        \n      default:\n        return false;\n    }\n  };\n\n  // Function to detect if user wants direct automation\n  const detectDirectAutomation = (message: string): boolean => {\n    const cleanMessage = message.trim().toLowerCase();\n    \n    // Specific direct automation patterns\n    const directPatterns = [\n      /quiero.*(?:bot|agente|automatizar|automatización)/,\n      /necesito.*(?:automatizar|automatización|bot|agente)/,\n      /crear.*(?:agente|bot|automatización)/,\n      /generar.*(?:automatización|bot|agente)/,\n      /hacer.*automático/,\n      /automatización.*(?:de|para|que)/,\n      /bot.*(?:de|para|que)/,\n      /agente.*(?:de|para|que)/,\n      /automatizar.*(?:el|la|los|las|mi|mis)/\n    ];\n    \n    // Specific business processes that indicate direct automation\n    const processAutomationPatterns = [\n      /automatizar.*(?:facturas|ventas|inventario|pedidos|clientes)/,\n      /bot.*(?:atención|servicio|ventas|soporte)/,\n      /agente.*(?:ventas|marketing|administrativo|servicio)/,\n      /automatización.*(?:facturas|contabilidad|inventario|crm)/\n    ];\n    \n    const hasDirectPattern = directPatterns.some(pattern => pattern.test(cleanMessage));\n    const hasProcessPattern = processAutomationPatterns.some(pattern => pattern.test(cleanMessage));\n    \n    // Also check for specific automation types\n    const automationTypes = ['chatbot', 'crm', 'facturación', 'inventario', 'leads', 'marketing', 'ventas'];\n    const hasAutomationType = automationTypes.some(type => cleanMessage.includes(type));\n    \n    return hasDirectPattern || hasProcessPattern || hasAutomationType;\n  };\n\n  // Function to generate AI agent proposals based on business data\n  const generateAgentProposals = (businessData: any) => {\n    const proposals = [];\n    \n    // Combine all business data into one text for analysis\n    const allText = Object.values(businessData).join(\" \").toLowerCase();\n    \n    console.log('Analyzing business data:', { businessData, allText });\n    \n    // Detect specific keywords and propose relevant automations\n    \n    // Video content creation\n    if (allText.includes('video') || allText.includes('vídeo') || allText.includes('contenido') || \n        allText.includes('publicidad') || allText.includes('redes')) {\n      proposals.push({\n        id: 'video-generator',\n        title: '🎞️ Generador de Videos de Producto',\n        description: 'Automatiza la creación de videos promocionales de tus productos para anuncios y redes sociales.',\n        benefits: ['Videos profesionales en minutos', 'Optimizado para cada plataforma', 'Aumenta engagement y ventas'],\n        useCases: ['Videos para Instagram y TikTok', 'Anuncios para Facebook Ads', 'Contenido para e-commerce']\n      });\n    }\n    \n    // Social media scheduler\n    if (allText.includes('redes') || allText.includes('publicar') || allText.includes('post') ||\n        allText.includes('instagram') || allText.includes('facebook') || allText.includes('tiktok')) {\n      proposals.push({\n        id: 'social-scheduler',\n        title: '📅 Planificador de Publicaciones en Redes Sociales',\n        description: 'Automatiza la programación y publicación de contenido en Instagram, TikTok y otras plataformas.',\n        benefits: ['Programación automática 24/7', 'Contenido optimizado por plataforma', 'Mejor engagement'],\n        useCases: ['Programar posts de productos', 'Stories automáticas', 'Campañas de temporada']\n      });\n    }\n    \n    // Inventory management\n    if (allText.includes('inventario') || allText.includes('stock') || allText.includes('almacén') ||\n        allText.includes('productos') || allText.includes('mercancia')) {\n      proposals.push({\n        id: 'inventory-manager',\n        title: '📦 Gestor de Inventario',\n        description: 'Automatiza el control de stock, predicción de demanda y gestión de proveedores.',\n        benefits: ['Control automático de stock', 'Predicción de demanda', 'Optimiza compras'],\n        useCases: ['Seguimiento de inventario', 'Alertas de reposición', 'Análisis de rotación']\n      });\n    }\n    \n    // Sales agent\n    if (allText.includes('ventas') || allText.includes('prospectos') || allText.includes('leads') ||\n        allText.includes('comercial') || allText.includes('clientes potenciales')) {\n      proposals.push({\n        id: 'sales-agent',\n        title: '💼 Agente de Ventas',\n        description: 'Automatiza el proceso de ventas desde la prospección hasta el cierre, con seguimientos personalizados.',\n        benefits: ['Prospección automática', 'Seguimiento personalizado', 'Aumenta conversiones'],\n        useCases: ['Calificar prospectos', 'Seguimiento automático', 'Programación de reuniones']\n      });\n    }\n    \n    // Marketing agent\n    if (allText.includes('marketing') || allText.includes('publicidad') || allText.includes('campañas') ||\n        allText.includes('promocion') || allText.includes('anuncios')) {\n      proposals.push({\n        id: 'marketing-agent',\n        title: '📱 Agente de Marketing',\n        description: 'Automatiza campañas de marketing, gestiona redes sociales y analiza métricas de rendimiento.',\n        benefits: ['Campañas automáticas', 'Analiza tendencias', 'Optimiza presupuesto publicitario'],\n        useCases: ['Publicar en redes sociales', 'Segmentar audiencias', 'Analizar ROI de campañas']\n      });\n    }\n    \n    // Customer service\n    if (allText.includes('atencion') || allText.includes('atención') || allText.includes('clientes') ||\n        allText.includes('soporte') || allText.includes('consultas') || allText.includes('servicio')) {\n      proposals.push({\n        id: 'customer-service',\n        title: '🤖 Agente de Atención al Cliente',\n        description: 'Automatiza respuestas a consultas frecuentes y gestiona la atención al cliente 24/7.',\n        benefits: ['Respuesta inmediata 24/7', 'Mejora satisfacción', 'Libera tiempo del equipo'],\n        useCases: ['Consultas frecuentes', 'Soporte técnico básico', 'Seguimiento post-venta']\n      });\n    }\n    \n    // If no specific matches, offer generic automation\n    if (proposals.length === 0) {\n      proposals.push({\n        id: 'custom-agent',\n        title: '🛠️ Agente Personalizado',\n        description: 'Automatización específica diseñada para las necesidades únicas de tu empresa.',\n        benefits: ['Solución a medida', 'Integración completa', 'Máximo ROI'],\n        useCases: ['Procesos específicos', 'Integraciones personalizadas', 'Automatización avanzada']\n      });\n    }\n    \n    console.log('Generated proposals:', proposals);\n    return proposals.slice(0, 3); // Maximum 3 proposals\n  };\n\n  const askNextQuestion = async (sessionId: string) => {\n    console.log('askNextQuestion called with currentQuestion:', currentQuestion, 'total:', discoveryQuestions.length);\n    await askNextQuestionByIndex(sessionId, currentQuestion);\n  };\n\n  const askNextQuestionByIndex = async (sessionId: string, questionIndex: number) => {\n    console.log('askNextQuestionByIndex called with questionIndex:', questionIndex, 'total:', discoveryQuestions.length);\n    if (questionIndex >= discoveryQuestions.length) {\n      // All questions completed, generate proposals\n      console.log('All questions completed, generating proposals');\n      await generateProposalsPhase(sessionId);\n      return;\n    }\n\n    const question = discoveryQuestions[questionIndex];\n    const aiMessage: Message = {\n      id: Date.now().toString(),\n      content: question.text,\n      sender: \"ai\",\n      session_id: sessionId,\n      message_type: 'question',\n      created_at: new Date().toISOString()\n    };\n\n    const savedMessage = await saveMessage(aiMessage);\n    if (savedMessage) {\n      setMessages(prev => [...prev, savedMessage]);\n      scrollToBottom();\n    }\n    \n    setAwaitingResponse(true);\n  };\n\n  // Generate and show AI agent proposals\n  const generateProposalsPhase = async (sessionId: string) => {\n    setCurrentPhase('analysis');\n    \n    const analysisMessage: Message = {\n      id: Date.now().toString(),\n      content: `🔍 **Analizando tu empresa...**\n\nPerfecto! He recopilado información valiosa sobre tu empresa:\n\n🏢 **${businessData.company}**\n📋 **Actividad:** ${businessData.mainActivity || 'Información no especificada'}\n⚠️ **Principales desafíos:** ${businessData.challenges}\n⏰ **Procesos que consumen más tiempo:** ${businessData.processes}\n\nAhora voy a generar propuestas de agentes IA específicamente diseñados para resolver los desafíos de tu empresa...`,\n      sender: \"ai\",\n      session_id: sessionId,\n      created_at: new Date().toISOString()\n    };\n\n    const savedAnalysis = await saveMessage(analysisMessage);\n    if (savedAnalysis) {\n      setMessages(prev => [...prev, savedAnalysis]);\n      scrollToBottom();\n    }\n\n    // Generate proposals after a brief delay\n    setTimeout(() => {\n      showProposals(sessionId);\n    }, 3000);\n  };\n\n  const showProposals = async (sessionId: string) => {\n    setCurrentPhase('proposal');\n    const generatedProposals = generateAgentProposals(businessData);\n    setProposals(generatedProposals);\n\n    let proposalsContent = `🚀 **Propuestas de Agentes IA para tu empresa**\n\nBasado en el análisis de tu empresa, estas son las automatizaciones que más impacto tendrían:\n\n`;\n\n    generatedProposals.forEach((proposal, index) => {\n      proposalsContent += `**${index + 1}. ${proposal.title}**\n${proposal.description}\n\n✅ **Beneficios:**\n${proposal.benefits.map(benefit => `• ${benefit}`).join('\\n')}\n\n🎯 **Casos de uso:**\n${proposal.useCases.map(useCase => `• ${useCase}`).join('\\n')}\n\n---\n\n`;\n    });\n\n    proposalsContent += `💡 **¿Qué automatización te parece más útil para tu empresa?**\n\nPuedes responder de varias formas:\n• El **número** (1, 2, 3...)\n• \"La primera\", \"la segunda\", \"la tercera\"\n• Simplemente \"sí\" si te gusta alguna\n• O descríbeme una automatización personalizada\n\n¡Elige la que más te ayudaría a ahorrar tiempo y dinero!`;\n\n    const proposalMessage: Message = {\n      id: Date.now().toString(),\n      content: proposalsContent,\n      sender: \"ai\",\n      session_id: sessionId,\n      message_type: 'proposal',\n      created_at: new Date().toISOString()\n    };\n\n    const savedProposal = await saveMessage(proposalMessage);\n    if (savedProposal) {\n      setMessages(prev => [...prev, savedProposal]);\n      scrollToBottom();\n    }\n\n    setAwaitingResponse(true);\n  };\n\n  // Handle proposal selection\n  const handleProposalSelection = async (sessionId: string, userResponse: string) => {\n    const response = userResponse.trim().toLowerCase();\n    let selectedProposal = null;\n\n    // Check if user selected a number directly\n    const numberMatch = response.match(/(\\d+)/);\n    if (numberMatch) {\n      const proposalIndex = parseInt(numberMatch[1]) - 1;\n      if (proposalIndex >= 0 && proposalIndex < proposals.length) {\n        selectedProposal = proposals[proposalIndex];\n      }\n    }\n    \n    // Check for natural language selection (\"la primera\", \"la segunda\", etc.)\n    if (!selectedProposal) {\n      const naturalSelections = [\n        { patterns: [/la primera/, /primera opción/, /opción 1/, /primer/, /primero/], index: 0 },\n        { patterns: [/la segunda/, /segunda opción/, /opción 2/, /segundo/], index: 1 },\n        { patterns: [/la tercera/, /tercera opción/, /opción 3/, /tercer/, /tercero/], index: 2 }\n      ];\n      \n      for (const selection of naturalSelections) {\n        if (selection.patterns.some(pattern => pattern.test(response)) && \n            selection.index < proposals.length) {\n          selectedProposal = proposals[selection.index];\n          break;\n        }\n      }\n    }\n    \n    // Check for mentions of proposal titles or keywords\n    if (!selectedProposal && proposals.length > 0) {\n      for (let i = 0; i < proposals.length; i++) {\n        const proposal = proposals[i];\n        const titleWords = proposal.title.toLowerCase().split(' ').filter((word: string) => word.length > 3);\n        const keywordMatches = [\n          'contenido', 'generador', 'marketing', 'leads', 'ventas', 'pedidos', 'inventario', \n          'chatbot', 'atención', 'cliente', 'reportes', 'seguimiento', 'administrativo'\n        ];\n        \n        // Check if user mentions proposal title words or related keywords\n        const titleMatch = titleWords.some((word: string) => response.includes(word));\n        const keywordMatch = keywordMatches.some(keyword => \n          response.includes(keyword) && proposal.title.toLowerCase().includes(keyword)\n        );\n        \n        if (titleMatch || keywordMatch) {\n          selectedProposal = proposal;\n          break;\n        }\n      }\n    }\n    \n    // Check for general acceptance responses (\"sí\", \"me gusta\", etc.)\n    if (!selectedProposal) {\n      const acceptancePatterns = [\n        /^sí$/,\n        /^si$/,\n        /^yes$/,\n        /me gusta/,\n        /me parece bien/,\n        /perfecto/,\n        /acepto/,\n        /genial/,\n        /excelente/,\n        /bueno/,\n        /quiero.*automatización/,\n        /quiero.*agente/,\n        /quiero.*bot/,\n        /crear.*automatización/,\n        /crear.*agente/,\n        /me interesa/,\n        /está bien/,\n        /vale/,\n        /ok/,\n        /de acuerdo/,\n        /quiero esta/,\n        /quiero esa/,\n        /esa automatización/,\n        /esta automatización/,\n        /hacer.*automatización/,\n        /implementar/,\n        /adelante/,\n        /vamos/\n      ];\n      \n      if (acceptancePatterns.some(pattern => pattern.test(response))) {\n        if (proposals.length === 1) {\n          // If only one proposal, select it\n          selectedProposal = proposals[0];\n        } else {\n          // Multiple proposals, ask for clarification\n          const clarificationMessage: Message = {\n            id: Date.now().toString(),\n            content: `¡Perfecto! Veo que te interesa una de las automatizaciones. \n\n¿Cuál de las ${proposals.length} opciones te parece más útil?\n\nPuedes responder con:\n• El **número** (1, 2, 3...)\n• \"La primera\", \"la segunda\", etc.\n• O menciona palabras clave de la automatización que prefieras\n\n¿Cuál eliges?`,\n            sender: \"ai\",\n            session_id: sessionId,\n            message_type: 'question',\n            created_at: new Date().toISOString()\n          };\n\n          const savedMessage = await saveMessage(clarificationMessage);\n          if (savedMessage) {\n            setMessages(prev => [...prev, savedMessage]);\n            scrollToBottom();\n          }\n          return;\n        }\n      }\n    }\n\n    if (selectedProposal) {\n      // User selected a proposal - proceed with automation creation\n      await triggerAutomationCreation(sessionId, selectedProposal);\n    } else if (response.includes('personalizado') || response.includes('específico') || \n               response.includes('otro') || response.includes('diferente') || \n               response.includes('custom') || response.includes('distinto')) {\n      // User wants something custom\n      const customMessage: Message = {\n        id: Date.now().toString(),\n        content: `¡Perfecto! Me encanta que busques una solución personalizada.\n\nPor favor, describe con más detalle:\n• ¿Qué proceso específico quieres automatizar?\n• ¿Cuáles serían los pasos ideales de esta automatización?\n• ¿Qué resultado final esperas obtener?\n\nUna vez que tenga estos detalles, crearé una automatización completamente personalizada para vuestra empresa.`,\n        sender: \"ai\",\n        session_id: sessionId,\n        message_type: 'question',\n        created_at: new Date().toISOString()\n      };\n\n      const savedMessage = await saveMessage(customMessage);\n      if (savedMessage) {\n        setMessages(prev => [...prev, savedMessage]);\n        scrollToBottom();\n      }\n\n      setDirectAutomation(userResponse);\n      setAwaitingResponse(true);\n    } else {\n      // Invalid response, ask again with more examples\n      const clarificationMessage: Message = {\n        id: Date.now().toString(),\n        content: `No he podido identificar tu selección. \n\nPuedes responder de varias formas:\n• El **número** de la propuesta (1, 2, 3...)\n• \"La primera\", \"la segunda\", \"la tercera\"\n• Simplemente \"sí\" si te gusta alguna\n• Menciona palabras clave de la automatización que prefieras\n• O di \"personalizado\" si necesitas algo diferente\n\n¿Cuál de las automatizaciones te parece más útil para vuestra empresa?`,\n        sender: \"ai\",\n        session_id: sessionId,\n        message_type: 'question',\n        created_at: new Date().toISOString()\n      };\n\n      const savedMessage = await saveMessage(clarificationMessage);\n      if (savedMessage) {\n        setMessages(prev => [...prev, savedMessage]);\n        scrollToBottom();\n      }\n    }\n  };\n\n  const triggerAutomationCreation = async (sessionId: string, selectedProposal?: any) => {\n    setCurrentPhase('creation');\n    \n    let content = '';\n    if (selectedProposal) {\n      content = `🎉 **¡Excelente elección!**\n\nHas seleccionado: **${selectedProposal.title}**\n\n${selectedProposal.description}\n\nAhora voy a crear esta automatización específicamente para tu empresa utilizando nuestro sistema de IA avanzado. Este proceso puede tomar unos momentos...\n\n🤖 Iniciando creación de automatización personalizada...`;\n    } else if (directAutomation) {\n      content = `🚀 **Creación de automatización personalizada**\n\nVoy a crear la automatización específica que has solicitado, adaptada perfectamente a las necesidades de tu empresa.\n\nEste proceso utiliza nuestro sistema de IA avanzado con múltiples etapas de optimización...\n\n🤖 Iniciando creación de automatización personalizada...`;\n    } else {\n      content = `🎯 **Creando tu automatización empresarial**\n\nBasado en el análisis completo de tu empresa, voy a crear una automatización que resuelva los desafíos específicos que identificamos.\n\n🏢 **Empresa:** ${businessData.company}\n📋 **Actividad:** ${businessData.mainActivity}\n⚠️ **Desafíos:** ${businessData.challenges}\n⏰ **Procesos a optimizar:** ${businessData.processes}\n\n🤖 Iniciando creación de automatización...`;\n    }\n\n    const aiMessage: Message = {\n      id: Date.now().toString(),\n      content,\n      sender: \"ai\",\n      session_id: sessionId,\n      created_at: new Date().toISOString()\n    };\n\n    const savedMessage = await saveMessage(aiMessage);\n    if (savedMessage) {\n      setMessages(prev => [...prev, savedMessage]);\n      scrollToBottom();\n    }\n\n    // Trigger the multi-AI automation creation\n    setTimeout(() => {\n      createAutomationFlow(sessionId, selectedProposal);\n    }, 2000);\n  };\n\n  const createAutomationFlow = async (sessionId: string, selectedProposal?: any) => {\n    setLoading(true);\n    try {\n      // Get conversation context \n      let conversationContext = '';\n      \n      if (selectedProposal) {\n        conversationContext = `Empresa: ${businessData.company}\nActividad: ${businessData.mainActivity}\nDesafíos: ${businessData.challenges}\nProcesos: ${businessData.processes}\n\nAutomatización seleccionada: ${selectedProposal.title}\nDescripción: ${selectedProposal.description}\nBeneficios esperados: ${selectedProposal.benefits.join(', ')}\nCasos de uso: ${selectedProposal.useCases.join(', ')}`;\n      } else if (directAutomation) {\n        conversationContext = `Automatización solicitada directamente: ${directAutomation}\nUsuario: ${user.email}`;\n      } else {\n        conversationContext = `Empresa: ${businessData.company}\nActividad: ${businessData.mainActivity}\nDesafíos: ${businessData.challenges}\nProcesos: ${businessData.processes}`;\n      }\n      \n      const response = await fetch('/api/create-automation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          conversationContext,\n          email: user.email,\n          phone: 'No proporcionado'\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Error creating automation');\n      }\n\n      const data = await response.json();\n      console.log('Automation creation response:', data);\n\n      // Store workflow data for complexity analysis\n      if (data.workflowJson) {\n        setLatestWorkflow(data.workflowJson);\n        setShowComplexityVisualization(true);\n      }\n\n      // Create download function for JSON if available\n      const downloadJSON = (jsonData: any) => {\n        const dataStr = JSON.stringify(jsonData, null, 2);\n        const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);\n        const exportFileDefaultName = `automatizacion-${Date.now()}.json`;\n        const linkElement = document.createElement('a');\n        linkElement.setAttribute('href', dataUri);\n        linkElement.setAttribute('download', exportFileDefaultName);\n        linkElement.click();\n      };\n\n      let successContent = '';\n      let downloadButton = '';\n      \n      // Base success message\n      if (selectedProposal) {\n        successContent = `🎉 ¡${selectedProposal.title} creada exitosamente!\n\nHemos generado tu automatización específicamente diseñada para:\n• **Empresa:** ${businessData.company}\n• **Automatización:** ${selectedProposal.title}\n• **Beneficios esperados:** ${selectedProposal.benefits.join(', ')}`;\n      } else {\n        successContent = `🎉 ¡Automatización personalizada creada exitosamente!\n\nHemos generado tu automatización basada en el análisis de:\n• **Tu empresa:** ${businessData.company}\n• **Actividad:** ${businessData.mainActivity}\n• **Desafíos identificados:** ${businessData.challenges}\n• **Procesos optimizados:** ${businessData.processes}`;\n      }\n      \n      // Add email status and download info\n      if (data.emailSent) {\n        successContent += `\n\n✅ **Email enviado exitosamente**\nEl archivo JSON ha sido enviado a tu email: ${user.email}\n\n📧 Te contactaremos pronto con los detalles de implementación.`;\n      } else if (data.downloadAvailable && data.workflowJson) {\n        successContent += `\n\n⚠️ **Problema con email**: ${data.emailError || 'No se pudo enviar el email'}\n\n📋 **Descarga disponible**: Tu automatización está lista. Haz clic en el botón de abajo para descargar el archivo JSON.\n\n📧 Te contactaremos pronto a ${user.email} con los detalles de implementación.`;\n        downloadButton = `\n\n[Descargar JSON de Automatización]`;\n      } else {\n        successContent += `\n\n📋 El archivo JSON de la automatización ha sido generado.\n\n📧 Te contactaremos pronto a ${user.email} con los detalles de implementación.`;\n      }\n      \n      successContent += `\n\n¡Gracias por confiar en Fluix AI para automatizar tu negocio! 🚀`;\n\n      const successMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: successContent,\n        sender: \"ai\",\n        session_id: sessionId,\n        created_at: new Date().toISOString()\n      };\n\n      const savedMessage = await saveMessage(successMessage);\n      if (savedMessage) {\n        setMessages(prev => [...prev, savedMessage]);\n        scrollToBottom();\n      }\n      \n      // If download is available, add download message/button\n      if (data.downloadAvailable && data.workflowJson) {\n        const downloadMessage: Message = {\n          id: (Date.now() + 2).toString(),\n          content: `📋 **Descarga tu automatización**\n\nHaz clic en el botón de abajo para descargar el archivo JSON de tu automatización:\n\n🔽 [DESCARGAR AUTOMATIZACIÓN.JSON] 🔽\n\n*Este archivo contiene toda la configuración de tu automatización y puede importarse en N8N o sistemas similares.*`,\n          sender: \"ai\",\n          session_id: sessionId,\n          created_at: new Date().toISOString()\n        };\n\n        const savedDownloadMessage = await saveMessage(downloadMessage);\n        if (savedDownloadMessage) {\n          setMessages(prev => [...prev, savedDownloadMessage]);\n          scrollToBottom();\n        }\n        \n        // Auto-trigger download\n        setTimeout(() => {\n          downloadJSON(data.workflowJson);\n        }, 1000);\n      }\n\n      toast({\n        title: \"¡Éxito!\",\n        description: data.emailSent ? \"Automatización creada y enviada por email.\" : \"Automatización creada. ¡Descarga disponible!\",\n      });\n\n    } catch (error) {\n      console.error('Error creating automation:', error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: 'Lo siento, hubo un error al crear la automatización. Por favor, intenta de nuevo.',\n        sender: \"ai\",\n        session_id: sessionId,\n        created_at: new Date().toISOString()\n      };\n      const savedErrorMessage = await saveMessage(errorMessage);\n      if (savedErrorMessage) {\n        setMessages(prev => [...prev, savedErrorMessage]);\n        scrollToBottom();\n      }\n\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo crear la automatización.\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n\n\n\n  const handleSend = async () => {\n    if (!newMessage.trim()) return;\n\n    let sessionId = currentChatId;\n    if (!sessionId) {\n      sessionId = await onCreateChat(`Consulta: ${newMessage.substring(0, 30)}...`);\n      if (!sessionId) return;\n    }\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: newMessage,\n      sender: \"user\",\n      session_id: sessionId,\n      created_at: new Date().toISOString()\n    };\n\n    // Save user message\n    const savedUserMessage = await saveMessage(userMessage);\n    if (savedUserMessage) {\n      setMessages(prev => [...prev, savedUserMessage]);\n      scrollToBottom();\n    }\n\n    const originalMessage = newMessage;\n    setNewMessage(\"\");\n    setLoading(true);\n\n    // Phase-based logic handling\n    if (currentPhase === 'discovery') {\n      if (!awaitingResponse && currentQuestion === 0) {\n        // First message - decide if direct automation or discovery\n        if (detectDirectAutomation(originalMessage)) {\n          // User wants direct automation\n          setDirectAutomation(originalMessage);\n          await triggerAutomationCreation(sessionId);\n          setLoading(false);\n          return;\n        } else {\n          // Start discovery process\n          await askNextQuestion(sessionId);\n          setLoading(false);\n          return;\n        }\n      }\n\n      // Handle discovery questions\n      if (awaitingResponse && currentQuestion < discoveryQuestions.length) {\n        const currentQuestionData = discoveryQuestions[currentQuestion];\n        const isComplete = isResponseComplete(originalMessage, currentQuestionData.field);\n        \n        if (isComplete) {\n          // Save the response to business data\n          const updatedData = { ...businessData };\n          updatedData[currentQuestionData.field] = originalMessage;\n          setBusinessData(updatedData);\n          \n          // Move to next question\n          const nextQuestionIndex = currentQuestion + 1;\n          setCurrentQuestion(nextQuestionIndex);\n          setAwaitingResponse(false);\n          \n          // Ask next question or complete the flow\n          setTimeout(async () => {\n            console.log('About to ask next question. nextQuestionIndex:', nextQuestionIndex, 'total questions:', discoveryQuestions.length);\n            await askNextQuestionByIndex(sessionId, nextQuestionIndex);\n            setLoading(false);\n          }, 1000);\n        } else {\n          // Response is incomplete, ask for more details\n          const followUpMessage: Message = {\n            id: Date.now().toString(),\n            content: currentQuestionData.followUp,\n            sender: \"ai\",\n            session_id: sessionId,\n            message_type: 'question',\n            created_at: new Date().toISOString()\n          };\n\n          const savedFollowUp = await saveMessage(followUpMessage);\n          if (savedFollowUp) {\n            setMessages(prev => [...prev, savedFollowUp]);\n            scrollToBottom();\n          }\n          setLoading(false);\n        }\n        return;\n      }\n    }\n\n    if (currentPhase === 'proposal') {\n      // Handle proposal selection\n      if (awaitingResponse) {\n        await handleProposalSelection(sessionId, originalMessage);\n        setAwaitingResponse(false);\n        setLoading(false);\n        return;\n      }\n    }\n\n    if (currentPhase === 'creation') {\n      // Handle custom automation details if requested\n      if (directAutomation && awaitingResponse) {\n        // User provided custom automation details\n        setDirectAutomation(directAutomation + '\\n\\nDetalles adicionales: ' + originalMessage);\n        await triggerAutomationCreation(sessionId);\n        setAwaitingResponse(false);\n        setLoading(false);\n        return;\n      }\n    }\n\n    // General conversation after automation is created or other phases\n    const generalResponse: Message = {\n      id: Date.now().toString(),\n      content: \"Gracias por tu mensaje. ¿Hay algo más en lo que pueda ayudarte con respecto a la automatización de tu empresa?\",\n      sender: \"ai\",\n      session_id: sessionId,\n      created_at: new Date().toISOString()\n    };\n\n    const savedResponse = await saveMessage(generalResponse);\n    if (savedResponse) {\n      setMessages(prev => [...prev, savedResponse]);\n      scrollToBottom();\n    }\n    setLoading(false);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n\n  if (!currentChatId) {\n    return (\n      <div className=\"flex-1 flex items-center justify-center\">\n        <div className=\"text-center max-w-2xl mx-auto p-8\">\n          <Building2 className=\"h-16 w-16 text-primary mx-auto mb-6\" />\n          <h1 className=\"text-3xl font-bold mb-4\">Consultor IA Empresarial</h1>\n          <p className=\"text-lg text-muted-foreground mb-8\">\n            Analizamos tu empresa y proponemos agentes IA específicos para optimizar tus procesos\n          </p>\n          \n          <div className=\"grid md:grid-cols-3 gap-6 mb-8\">\n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Target className=\"h-8 w-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Análisis Personalizado</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Estudiamos tu empresa y procesos específicos\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Lightbulb className=\"h-8 w-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Propuestas Específicas</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Recomendamos agentes IA adaptados a tus necesidades\n                </p>\n              </CardContent>\n            </Card>\n            \n            <Card>\n              <CardContent className=\"p-6 text-center\">\n                <Settings className=\"h-8 w-8 text-primary mx-auto mb-3\" />\n                <h3 className=\"font-semibold mb-2\">Implementación</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Creamos y configuramos los agentes para tu empresa\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Button\n            onClick={() => onCreateChat()}\n            size=\"lg\"\n            className=\"gap-2\"\n          >\n            <Bot className=\"h-5 w-5\" />\n            Iniciar Consulta Empresarial\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex-1 flex flex-col\">\n      {/* Header */}\n      <div className=\"border-b p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <Building2 className=\"h-6 w-6 text-primary\" />\n            <div>\n              <h1 className=\"font-semibold\">Consultor IA Empresarial</h1>\n              <div className=\"flex items-center gap-2\">\n                <Badge variant={currentPhase === 'discovery' ? 'default' : 'secondary'}>\n                  Descubrimiento ({currentQuestion}/4)\n                </Badge>\n                <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                <Badge variant={currentPhase === 'analysis' ? 'default' : 'secondary'}>\n                  Análisis\n                </Badge>\n                <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                <Badge variant={currentPhase === 'proposal' ? 'default' : 'secondary'}>\n                  Propuestas\n                </Badge>\n                <ArrowRight className=\"h-3 w-3 text-muted-foreground\" />\n                <Badge variant={currentPhase === 'creation' ? 'default' : 'secondary'}>\n                  Creación\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 mb-32 relative max-h-[calc(100vh-200px)]\">\n        {messages.length === 0 && (\n          <div className=\"text-center py-8\">\n            <Bot className=\"h-12 w-12 text-primary mx-auto mb-4\" />\n            <h3 className=\"text-lg font-semibold mb-2\">¡Hola! Soy tu consultor IA empresarial</h3>\n            <p className=\"text-muted-foreground mb-6\">\n              Puedo ayudarte de dos formas: analizando tu empresa para sugerir automatizaciones o creando directamente lo que necesitas.\n            </p>\n            <div className=\"bg-muted/50 rounded-lg p-4 max-w-2xl mx-auto\">\n              <p className=\"font-medium mb-2\">🤖 ¿Cómo puedo ayudarte?</p>\n              <div className=\"text-sm space-y-1\">\n                <p><strong>Automatización directa:</strong> Dime \"quiero automatizar [proceso]\" si ya sabes qué necesitas</p>\n                <p><strong>Consulta empresarial:</strong> Analizo tu empresa y sugiero las mejores automatizaciones para ti</p>\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-3\">\n                💡 Envía cualquier mensaje para comenzar\n              </p>\n            </div>\n          </div>\n        )}\n\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex gap-3 ${\n              message.sender === \"user\" ? \"justify-end\" : \"justify-start\"\n            }`}\n          >\n            {message.sender === \"ai\" && (\n              <div className=\"flex items-start\">\n                <Bot className=\"w-8 h-8 text-primary bg-primary/10 rounded-full p-1\" />\n              </div>\n            )}\n            \n            <div\n              className={`max-w-[70%] rounded-lg p-4 ${\n                message.sender === \"user\"\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-muted\"\n              }`}\n            >\n              <div className=\"whitespace-pre-wrap\">{message.content}</div>\n              \n            </div>\n\n            {message.sender === \"user\" && (\n              <div className=\"flex items-start\">\n                <UserIcon className=\"w-8 h-8 text-muted-foreground bg-muted rounded-full p-1\" />\n              </div>\n            )}\n          </div>\n        ))}\n\n        {loading && (\n          <div className=\"flex justify-start\">\n            <div className=\"flex items-center gap-3\">\n              <Bot className=\"w-8 h-8 text-primary bg-primary/10 rounded-full p-1\" />\n              <div className=\"bg-muted rounded-lg p-4\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-primary\"></div>\n                  <span className=\"text-sm\">Analizando tu empresa...</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Workflow Complexity Visualization */}\n        {showComplexityVisualization && latestWorkflow && (\n          <div className=\"flex justify-start\">\n            <div className=\"flex items-start gap-3 max-w-[85%]\">\n              <Bot className=\"w-8 h-8 text-primary bg-primary/10 rounded-full p-1 flex-shrink-0 mt-1\" />\n              <div className=\"bg-muted rounded-lg p-4 w-full\">\n                <div className=\"mb-3\">\n                  <h4 className=\"font-semibold text-sm mb-1\">📊 Análisis de Complejidad del Workflow</h4>\n                  <p className=\"text-xs text-muted-foreground\">\n                    Analicemos la complejidad de tu automatización generada:\n                  </p>\n                </div>\n                <WorkflowComplexityVisualization \n                  workflowData={latestWorkflow}\n                  showDetailedView={false}\n                  className=\"mb-2\"\n                />\n                <div className=\"text-xs text-muted-foreground mt-3\">\n                  💡 Haz clic en el indicador de complejidad para ver un análisis detallado\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Fixed input area at absolute bottom */}\n      <div className=\"absolute bottom-0 left-0 right-0 bg-background/98 backdrop-blur-md border-t p-4\">\n        <div className=\"flex gap-2 max-w-4xl mx-auto\">\n          <Input\n            value={newMessage}\n            onChange={(e) => setNewMessage(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={awaitingResponse ? \"Responde a la pregunta...\" : \"Escribe cualquier mensaje para comenzar la consulta...\"}\n            disabled={loading}\n            className=\"flex-1\"\n          />\n          <Button onClick={handleSend} disabled={loading || !newMessage.trim()}>\n            <Send className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":46605},"client/src/components/BusinessChatSidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n}\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarTrigger,\n} from \"@/components/ui/sidebar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Building2, MessageSquare, LogOut, Settings, CreditCard, User as UserIcon, Trash2, Plus, Home } from \"lucide-react\";\n\ninterface ChatSession {\n  id: string;\n  title: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface BusinessChatSidebarProps {\n  user: User;\n  currentChatId: string | null;\n  onChatSelect: (chatId: string) => void;\n  onCreateChat: (title?: string) => Promise<string | null>;\n}\n\nexport function BusinessChatSidebar({ user, currentChatId, onChatSelect, onCreateChat }: BusinessChatSidebarProps) {\n  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [chatToDelete, setChatToDelete] = useState<string | null>(null);\n  const navigate = useNavigate();\n\n  const fetchChatSessions = async () => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        navigate(\"/auth\");\n        return;\n      }\n\n      const response = await fetch('/api/chat-sessions', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        console.error(\"Error fetching chat sessions\");\n        return;\n      }\n\n      const data = await response.json();\n      setChatSessions(data || []);\n    } catch (error) {\n      console.error(\"Error fetching chat sessions:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchChatSessions();\n  }, [user.id]);\n\n  const handleNewChat = async () => {\n    const chatId = await onCreateChat(\"Consulta empresarial\");\n    if (chatId) {\n      fetchChatSessions();\n    }\n  };\n\n  const handleDeleteChat = async (chatId: string) => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        navigate(\"/auth\");\n        return;\n      }\n\n      const response = await fetch(`/api/chat-sessions/${chatId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        console.error(\"Error deleting chat session\");\n        return;\n      }\n\n      setChatSessions(prev => prev.filter(chat => chat.id !== chatId));\n      \n      if (currentChatId === chatId) {\n        onChatSelect(\"\");\n      }\n    } catch (error) {\n      console.error(\"Error deleting chat session:\", error);\n    }\n  };\n\n  const handleLogout = async () => {\n    localStorage.removeItem('auth_token');\n    navigate(\"/\");\n  };\n\n  return (\n    <Sidebar className=\"w-80\">\n      <SidebarTrigger className=\"m-2 self-end\" />\n      \n      <SidebarHeader>\n        <div className=\"flex items-center gap-2 px-4 py-2\">\n          <Building2 className=\"h-6 w-6 text-primary\" />\n          <div>\n            <h2 className=\"font-semibold\">Consultor IA Empresarial</h2>\n            <p className=\"text-xs text-muted-foreground\">Análisis y propuesta de agentes</p>\n          </div>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        <SidebarGroup>\n          <SidebarGroupLabel>Navegación</SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              <SidebarMenuItem>\n                <SidebarMenuButton onClick={() => navigate(\"/\")}>\n                  <Home className=\"h-4 w-4\" />\n                  <span>Inicio</span>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n              <SidebarMenuItem>\n                <SidebarMenuButton onClick={handleNewChat}>\n                  <MessageSquare className=\"h-4 w-4\" />\n                  <span>Chat Empresarial</span>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n\n        <SidebarGroup>\n          <SidebarGroupLabel className=\"flex items-center justify-between\">\n            Consultas Empresariales\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleNewChat}\n              className=\"h-6 w-6 p-0\"\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </SidebarGroupLabel>\n          <SidebarGroupContent>\n            <SidebarMenu>\n              {loading ? (\n                <div className=\"p-4 text-center\">\n                  <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                  <p className=\"text-xs text-muted-foreground mt-2\">Cargando...</p>\n                </div>\n              ) : chatSessions.length === 0 ? (\n                <div className=\"p-4 text-center\">\n                  <Building2 className=\"h-8 w-8 text-muted-foreground mx-auto mb-2\" />\n                  <p className=\"text-sm text-muted-foreground\">No hay consultas empresariales</p>\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleNewChat}\n                    className=\"mt-2\"\n                  >\n                    Iniciar consulta\n                  </Button>\n                </div>\n              ) : (\n                chatSessions.map((chat) => (\n                  <SidebarMenuItem key={chat.id}>\n                    <SidebarMenuButton\n                      onClick={() => onChatSelect(chat.id)}\n                      isActive={currentChatId === chat.id}\n                      className=\"w-full justify-between group\"\n                    >\n                      <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                        <Building2 className=\"h-4 w-4 flex-shrink-0\" />\n                        <span className=\"truncate text-left\">\n                          {chat.title}\n                        </span>\n                      </div>\n                      <AlertDialog open={deleteDialogOpen && chatToDelete === chat.id} onOpenChange={setDeleteDialogOpen}>\n                        <AlertDialogTrigger asChild>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-6 w-6 p-0 opacity-0 group-hover:opacity-100 flex-shrink-0\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setChatToDelete(chat.id);\n                              setDeleteDialogOpen(true);\n                            }}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>¿Eliminar consulta?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              Esta acción no se puede deshacer. Se eliminará permanentemente la consulta empresarial y todos sus mensajes.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel onClick={() => {\n                              setDeleteDialogOpen(false);\n                              setChatToDelete(null);\n                            }}>\n                              Cancelar\n                            </AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => {\n                                if (chatToDelete) {\n                                  handleDeleteChat(chatToDelete);\n                                }\n                                setDeleteDialogOpen(false);\n                                setChatToDelete(null);\n                              }}\n                              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                            >\n                              Eliminar\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </SidebarMenuButton>\n                  </SidebarMenuItem>\n                ))\n              )}\n            </SidebarMenu>\n          </SidebarGroupContent>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter>\n        <SidebarMenu>\n          <SidebarMenuItem>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <SidebarMenuButton\n                  size=\"lg\"\n                  className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n                >\n                  <Avatar className=\"h-8 w-8 rounded-lg\">\n                    <AvatarFallback className=\"rounded-lg\">\n                      {user?.email?.[0]?.toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                    <span className=\"truncate font-semibold\">\n                      {user?.email?.split('@')[0] || 'Usuario'}\n                    </span>\n                    <span className=\"truncate text-xs text-muted-foreground\">\n                      {user?.email}\n                    </span>\n                  </div>\n                </SidebarMenuButton>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent\n                className=\"w-[--radix-dropdown-menu-trigger-width] min-w-56 rounded-lg\"\n                side=\"bottom\"\n                align=\"end\"\n                sideOffset={4}\n              >\n                <DropdownMenuItem onClick={() => navigate(\"/account\")}>\n                  <UserIcon className=\"h-4 w-4\" />\n                  Cuenta\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate(\"/pricing\")}>\n                  <CreditCard className=\"h-4 w-4\" />\n                  Precios\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={() => navigate(\"/settings\")}>\n                  <Settings className=\"h-4 w-4\" />\n                  Configuración\n                </DropdownMenuItem>\n                <DropdownMenuItem onClick={handleLogout}>\n                  <LogOut className=\"h-4 w-4\" />\n                  Cerrar sesión\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </SidebarMenuItem>\n        </SidebarMenu>\n      </SidebarFooter>\n    </Sidebar>\n  );\n}","size_bytes":11393},"client/src/components/ChatArea.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n}\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Send, Bot, User as UserIcon, Loader2, CheckCircle, XCircle, Plus, FileJson } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\n\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: \"user\" | \"ai\";\n  ai_type?: \"chatgpt\" | \"claude\" | \"deepseek\" | \"n8n\";\n  workflow_status?: 'sending' | 'success' | 'error';\n  workflow_error?: string;\n  workflow_id?: string;\n  created_at: string;\n  isTyping?: boolean;\n}\n\ninterface ChatAreaProps {\n  user: User;\n  currentChatId: string | null;\n  onCreateChat: (title?: string) => Promise<string | null>;\n}\n\nexport function ChatArea({ user, currentChatId, onCreateChat }: ChatAreaProps) {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(1);\n  const [hasOfferedJson, setHasOfferedJson] = useState(false);\n  const [showCreateButton, setShowCreateButton] = useState(false);\n  const [showContactForm, setShowContactForm] = useState(false);\n  const [contactData, setContactData] = useState({ email: '', phone: '' });\n  const [isCreatingAutomation, setIsCreatingAutomation] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    // Method 1: Use the container ID\n    const container = document.getElementById('messages-container');\n    if (container) {\n      container.scrollTo({\n        top: container.scrollHeight,\n        behavior: 'smooth'\n      });\n    }\n    \n    // Method 2: Use the ref as fallback\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ \n        behavior: \"smooth\",\n        block: \"end\",\n        inline: \"nearest\"\n      });\n    }\n  };\n\n  // Auto-scroll when messages change\n  useEffect(() => {\n    scrollToBottom();\n    // Also scroll after a small delay to ensure DOM has updated\n    const timer = setTimeout(scrollToBottom, 100);\n    return () => clearTimeout(timer);\n  }, [messages]);\n\n  // Auto-scroll when form states change\n  useEffect(() => {\n    const timer = setTimeout(scrollToBottom, 150);\n    return () => clearTimeout(timer);\n  }, [showCreateButton, showContactForm, isCreatingAutomation]);\n\n  // Auto-scroll when loading state changes\n  useEffect(() => {\n    if (isLoading) {\n      const timer = setTimeout(scrollToBottom, 50);\n      return () => clearTimeout(timer);\n    }\n  }, [isLoading]);\n\n  useEffect(() => {\n    if (currentChatId) {\n      fetchMessages();\n    } else {\n      setMessages([]);\n    }\n  }, [currentChatId]);\n\n  // Reset offer flag when chat changes\n  useEffect(() => {\n    setHasOfferedJson(false);\n  }, [currentChatId]);\n\n  // When a new chat has no messages, proactively ask about JSON download\n  useEffect(() => {\n    if (currentChatId && messages.length === 0 && !hasOfferedJson) {\n      const promptMessage: Message = {\n        id: Date.now().toString(),\n        content:\n          \"¿Quieres que te descargue el documento JSON para importarlo en n8n y poder utilizar la automatización? Pulsa el botón ‘Crear documento JSON’.\",\n        sender: \"ai\",\n        ai_type: \"n8n\",\n        created_at: new Date().toISOString(),\n      };\n      setMessages((prev) => [...prev, promptMessage]);\n      saveMessage(promptMessage);\n      setHasOfferedJson(true);\n    }\n  }, [currentChatId, messages.length, hasOfferedJson]);\n\n  const fetchMessages = async () => {\n    if (!currentChatId) return;\n\n    try {\n      const { data, error } = await supabase\n        .from(\"messages\")\n        .select(\"*\")\n        .eq(\"chat_session_id\", currentChatId)\n        .order(\"created_at\", { ascending: true });\n\n      if (error) {\n        console.error(\"Error fetching messages:\", error);\n        return;\n      }\n\n      setMessages((data || []) as Message[]);\n    } catch (error) {\n      console.error(\"Error fetching messages:\", error);\n    }\n  };\n\n  const saveMessage = async (message: Omit<Message, \"id\" | \"created_at\">) => {\n    if (!currentChatId) return null;\n\n    try {\n      const { data, error } = await supabase\n        .from(\"messages\")\n        .insert({\n          chat_session_id: currentChatId,\n          content: message.content,\n          sender: message.sender,\n          ai_type: message.ai_type,\n          workflow_status: message.workflow_status,\n          workflow_id: message.workflow_id,\n          workflow_error: message.workflow_error,\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error(\"Error saving message:\", error);\n        return null;\n      }\n\n      return data;\n    } catch (error) {\n      console.error(\"Error saving message:\", error);\n      return null;\n    }\n  };\n\n  const aiResponses = {\n    step1: {\n      ai: \"chatgpt\",\n      content: \"Perfecto! He analizado tu solicitud y voy a generar el esquema base de automatización. Dame un momento mientras proceso esta información...\"\n    },\n    step2: {\n      ai: \"claude\",\n      content: \"Excelente esquema base de ChatGPT. Ahora voy a ajustar los condicionales, bucles y optimizar la estructura JSON para que sea más eficiente...\"\n    },\n    step3: {\n      ai: \"deepseek\",\n      content: \"Revisando la lógica propuesta por Claude... Puedo optimizar el orden de ejecución y mejorar la eficiencia del flujo. Aplicando mejoras...\"\n    },\n    step4: {\n      ai: \"n8n\",\n      content: \"¡Perfecto! He tomado toda la información optimizada y he generado el JSON final validado para n8n. El workflow está listo para importar.\"\n    }\n  };\n\n  const getAIIcon = (aiType?: string) => {\n    switch (aiType) {\n      case \"chatgpt\":\n        return <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">G</div>;\n      case \"claude\":\n        return <div className=\"w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">C</div>;\n      case \"deepseek\":\n        return <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">D</div>;\n      case \"n8n\":\n        return <div className=\"w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">N</div>;\n      default:\n        return <Bot className=\"w-6 h-6 text-primary\" />;\n    }\n  };\n\n  const sendWorkflowToN8n = async (workflowJson: any, messageId: string) => {\n    try {\n      // Update message status to sending\n      setMessages(prev => prev.map(msg => \n        msg.id === messageId \n          ? { ...msg, workflow_status: 'sending' } \n          : msg\n      ));\n\n      // For now, simulate the n8n integration\n      const data = {\n        success: true,\n        message: \"Workflow exportado correctamente como JSON\",\n        workflowId: \"generated-\" + Date.now()\n      };\n\n      if (data.success) {\n        setMessages(prev => prev.map(msg => \n          msg.id === messageId \n            ? { \n                ...msg, \n                workflow_status: 'success',\n                workflow_id: data.workflowId,\n                content: msg.content + `\\n\\n🎉 ${data.message}`\n              } \n            : msg\n        ));\n        \n        toast({\n          title: \"¡Éxito!\",\n          description: data.message,\n        });\n      } else {\n        throw new Error(data.error || 'Error desconocido');\n      }\n    } catch (error) {\n      console.error('Error sending to n8n:', error);\n      \n      setMessages(prev => prev.map(msg => \n        msg.id === messageId \n          ? { \n              ...msg, \n              workflow_status: 'error',\n              workflow_error: error.message,\n              content: msg.content + `\\n\\n❌ Error al enviar a n8n: ${error.message}`\n            } \n          : msg\n      ));\n      \n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: `No se pudo enviar la automatización a n8n: ${error.message}`,\n      });\n    }\n  };\n\n  const extractWorkflowFromContent = (content: string) => {\n    // 1) Try fenced code block with explicit json\n    let match = content.match(/```json\\s*([\\s\\S]*?)\\s*```/i);\n    if (match) {\n      try {\n        return JSON.parse(match[1]);\n      } catch (e) {\n        console.error('Error parsing JSON from ```json``` block:', e);\n      }\n    }\n\n    // 2) Try any fenced code block\n    match = content.match(/```\\s*([\\s\\S]*?)\\s*```/);\n    if (match) {\n      try {\n        return JSON.parse(match[1]);\n      } catch (e) {\n        console.error('Error parsing JSON from generic ``` ``` block:', e);\n      }\n    }\n\n    // 3) Fallback: try to parse the biggest JSON-looking slice\n    const first = content.indexOf('{');\n    const last = content.lastIndexOf('}');\n    if (first !== -1 && last !== -1 && last > first) {\n      const jsonCandidate = content.slice(first, last + 1).trim();\n      try {\n        return JSON.parse(jsonCandidate);\n      } catch (e) {\n        console.error('Error parsing JSON from braces fallback:', e);\n      }\n    }\n\n    return null;\n  };\n\n  const downloadWorkflowJson = (workflow: any, filename = 'automatizacion-n8n.json') => {\n    try {\n      const blob = new Blob([JSON.stringify(workflow, null, 2)], { type: 'application/json' });\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      a.remove();\n      URL.revokeObjectURL(url);\n    } catch (e) {\n      console.error('Error creating JSON download:', e);\n      toast({\n        variant: 'destructive',\n        title: 'Error',\n        description: 'No se pudo preparar la descarga del JSON.'\n      });\n    }\n  };\n\n  const simulateAIResponse = async (userMessage: string, chatId: string) => {\n    setIsLoading(true);\n    setCurrentStep(1);\n\n    // Simular procesamiento por múltiples IAs\n    const steps = [\n      { delay: 2000, step: \"step1\" as keyof typeof aiResponses },\n      { delay: 3000, step: \"step2\" as keyof typeof aiResponses },\n      { delay: 2500, step: \"step3\" as keyof typeof aiResponses },\n      { delay: 3500, step: \"step4\" as keyof typeof aiResponses }\n    ];\n\n    for (let i = 0; i < steps.length; i++) {\n      const { delay, step } = steps[i];\n      const response = aiResponses[step];\n      \n      // Mostrar mensaje de \"escribiendo...\"\n      const typingId = `typing-${Date.now()}-${i}`;\n      const typingMessage: Message = {\n        id: typingId,\n        content: \"\",\n        sender: \"ai\",\n        ai_type: response.ai as any,\n        created_at: new Date().toISOString(),\n        isTyping: true\n      };\n\n      setMessages(prev => [...prev, typingMessage]);\n\n      await new Promise(resolve => setTimeout(resolve, delay));\n\n      // Reemplazar mensaje de \"escribiendo...\" con respuesta real\n      const aiMessage: Message = {\n        id: Date.now().toString(),\n        content: response.content,\n        sender: \"ai\",\n        ai_type: response.ai as any,\n        created_at: new Date().toISOString(),\n      };\n\n      setMessages(prev => prev.map(msg => \n        msg.id === typingId ? aiMessage : msg\n      ));\n\n      // Guardar en la base de datos\n      await saveMessage(aiMessage);\n      setCurrentStep(i + 2);\n    }\n\n    // Generar JSON final\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const jsonCode = `{\n  \"name\": \"Automatización Personalizada\",\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\"\n          },\n          \"conditions\": [\n            {\n              \"id\": \"condition1\",\n              \"leftValue\": \"{{ $json.trigger }}\",\n              \"rightValue\": \"nuevo_cliente\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              }\n            }\n          ]\n        }\n      },\n      \"id\": \"node1\",\n      \"name\": \"Condición Inicial\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 1,\n      \"position\": [250, 300]\n    }\n  ],\n  \"connections\": {},\n  \"active\": true,\n  \"settings\": {},\n  \"versionId\": \"1.0\"\n}`;\n\n    const finalMessage: Message = {\n      id: Date.now().toString(),\n      content: `¡Automatización completada! Aquí tienes el código JSON listo para importar en n8n:\\n\\n\\`\\`\\`json\\n${jsonCode}\\n\\`\\`\\`\\n\\n✅ **Workflow validado y optimizado**\\n✅ **Listo para importar en n8n**\\n✅ **Incluye validaciones integradas**\\n\\n¿Te gustaría que ajuste algo específico o genere otra automatización?`,\n      sender: \"ai\",\n      ai_type: \"n8n\",\n      created_at: new Date().toISOString()\n    };\n\n    setMessages(prev => [...prev, finalMessage]);\n\n    // Guardar el mensaje final\n    const savedMessage = await saveMessage(finalMessage);\n\n    // Extract and send workflow to n8n\n    const workflow = extractWorkflowFromContent(finalMessage.content);\n    if (workflow && savedMessage) {\n      // Wait a moment for the message to be displayed\n      setTimeout(() => {\n        sendWorkflowToN8n(workflow, savedMessage.id);\n      }, 1000);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleSend = async () => {\n    if (!input.trim() || isLoading) return;\n\n    let chatId = currentChatId;\n    \n    // Create new chat if none exists\n    if (!chatId) {\n      const title = input.length > 50 ? input.substring(0, 50) + \"...\" : input;\n      chatId = await onCreateChat(title);\n      if (!chatId) {\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: \"No se pudo crear la conversación.\",\n        });\n        return;\n      }\n    }\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: input,\n      sender: \"user\",\n      created_at: new Date().toISOString()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    const userInput = input;\n    setInput(\"\");\n    setIsLoading(true);\n\n    // Force scroll to bottom immediately after sending\n    setTimeout(scrollToBottom, 50);\n\n    // Guardar mensaje del usuario\n    await saveMessage(userMessage);\n\n    try {\n      // Call the AI chat function\n      const response = await fetch('/api/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: userInput,\n          sessionId: chatId\n        })\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || 'Error en la respuesta del AI');\n      }\n\n      const data = await response.json();\n      \n      // Check if AI wants to show create button\n      if (data.showCreateButton) {\n        setShowCreateButton(true);\n      }\n      \n      const aiMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: data.response,\n        sender: \"ai\",\n        created_at: new Date().toISOString()\n      };\n\n      setMessages(prev => [...prev, aiMessage]);\n      await saveMessage(aiMessage);\n      \n      // Force scroll to bottom after AI response\n      setTimeout(scrollToBottom, 50);\n      \n    } catch (error) {\n      console.error('Error in chat:', error);\n      \n      const errorMessage: Message = {\n        id: Date.now().toString(),\n        content: 'Lo siento, hubo un error al procesar tu mensaje. Por favor, inténtalo de nuevo.',\n        sender: \"ai\",\n        created_at: new Date().toISOString()\n      };\n\n      setMessages(prev => [...prev, errorMessage]);\n      await saveMessage(errorMessage);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  const handleCreateAutomation = () => {\n    setShowContactForm(true);\n    setShowCreateButton(false);\n  };\n\n  const handleSubmitContactForm = async () => {\n    if (!contactData.email || !contactData.phone) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Por favor, completa todos los campos.\",\n      });\n      return;\n    }\n\n    setIsCreatingAutomation(true);\n    setShowContactForm(false);\n\n    try {\n      // Get conversation context from messages\n      const conversationContext = messages\n        .map(msg => `${msg.sender}: ${msg.content}`)\n        .join('\\n\\n');\n\n      const response = await fetch('/api/create-automation', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          conversationContext,\n          email: contactData.email,\n          phone: contactData.phone\n        })\n      });\n\n      const data = await response.json();\n      \n      if (response.ok && data.success) {\n        const successMessage: Message = {\n          id: Date.now().toString(),\n          content: `✅ **¡Automatización creada exitosamente!**\n\nHemos generado tu workflow personalizado usando nuestro sistema de 4 IAs especializadas y lo hemos enviado por email para revisión.\n\n📧 **¿Qué sigue ahora?**\n- Nuestro equipo técnico revisará tu automatización\n- Te contactaremos en las próximas horas al ${contactData.phone}\n- Recibirás el archivo JSON final por email una vez validado\n\n**¡En breve nos pondremos en contacto contigo!**\n\nGracias por confiar en Fluix AI para automatizar tu negocio. 🚀`,\n          sender: \"ai\",\n          created_at: new Date().toISOString()\n        };\n\n        setMessages(prev => [...prev, successMessage]);\n        await saveMessage(successMessage);\n\n        toast({\n          title: \"¡Éxito!\",\n          description: \"Automatización creada. Te contactaremos pronto.\",\n        });\n      } else {\n        throw new Error(data.error || 'Error creando automatización');\n      }\n    } catch (error) {\n      console.error('Error creating automation:', error);\n      \n      const errorMessage: Message = {\n        id: Date.now().toString(),\n        content: '❌ Hubo un error al crear la automatización. Por favor, inténtalo de nuevo o contacta con soporte.',\n        sender: \"ai\",\n        created_at: new Date().toISOString()\n      };\n\n      setMessages(prev => [...prev, errorMessage]);\n      await saveMessage(errorMessage);\n\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo crear la automatización.\",\n      });\n    } finally {\n      setIsCreatingAutomation(false);\n      setContactData({ email: '', phone: '' });\n    }\n  };\n\n  if (!currentChatId && messages.length === 0) {\n    return (\n      <div className=\"flex flex-col h-screen\">\n        <div className=\"flex-1 flex items-center justify-center\">\n          <div className=\"text-center space-y-6 max-w-md\">\n            <div className=\"p-4 bg-primary/10 rounded-full w-20 h-20 flex items-center justify-center mx-auto\">\n              <Bot className=\"h-10 w-10 text-primary\" />\n            </div>\n            <div>\n              <h2 className=\"text-2xl font-bold mb-2\">¡Bienvenido a Fluix AI!</h2>\n              <p className=\"text-muted-foreground\">\n                Tu asistente de automatización inteligente está listo para ayudarte. \n                Crea una nueva conversación para comenzar.\n              </p>\n            </div>\n            <Button onClick={() => onCreateChat()} size=\"lg\">\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Comenzar nueva conversación\n            </Button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col h-screen\">\n      {/* Header */}\n      <div className=\"border-b p-4 flex-shrink-0\">\n        <div className=\"flex items-center gap-3\">\n          <Bot className=\"h-6 w-6 text-primary\" />\n          <div>\n            <h1 className=\"font-semibold\">Asistente de Automatización IA</h1>\n            <p className=\"text-sm text-muted-foreground\">\n              Sistema Multi-IA: ChatGPT → Claude → DeepSeek → N8N Assistant\n            </p>\n          </div>\n        </div>\n\n        {/* Progress Indicator */}\n        {isLoading && (\n          <div className=\"flex gap-2 mt-4 p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 1 ? 'bg-green-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">ChatGPT</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 2 ? 'bg-orange-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">Claude</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 3 ? 'bg-blue-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">DeepSeek</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 4 ? 'bg-purple-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">N8N</span>\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto p-4 space-y-4 min-h-0\" id=\"messages-container\">\n        {messages.map((message) => (\n          <div\n            key={message.id}\n            className={`flex gap-3 ${\n              message.sender === \"user\" ? \"justify-end\" : \"justify-start\"\n            }`}\n          >\n            {message.sender === \"ai\" && (\n              <div className=\"flex flex-col items-center gap-1\">\n                {getAIIcon(message.ai_type)}\n                {message.ai_type && (\n                  <Badge variant=\"secondary\" className=\"text-xs\">\n                    {message.ai_type.toUpperCase()}\n                  </Badge>\n                )}\n              </div>\n            )}\n            \n            <div\n              className={`max-w-[70%] rounded-lg p-4 ${\n                message.sender === \"user\"\n                  ? \"bg-primary text-primary-foreground\"\n                  : \"bg-muted\"\n              }`}\n            >\n              {message.isTyping ? (\n                <div className=\"flex items-center gap-2\">\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  <span>Procesando...</span>\n                </div>\n              ) : (\n                <>\n                  <ReactMarkdown remarkPlugins={[remarkGfm]}>{message.content}</ReactMarkdown>\n                  \n                  {message.sender === 'ai' && extractWorkflowFromContent(message.content) && (\n                    <div\n                      className=\"mt-3 p-3 rounded-lg border bg-background/60 hover:bg-muted/50 transition-colors cursor-pointer\"\n                      onClick={() => {\n                        const wf = extractWorkflowFromContent(message.content);\n                        if (wf) downloadWorkflowJson(wf, 'automatizacion-n8n.json');\n                      }}\n                    >\n                      <div className=\"flex items-center gap-3\">\n                        <FileJson className=\"h-5 w-5 text-primary\" />\n                        <div>\n                          <p className=\"text-sm font-medium\">automatizacion-n8n.json</p>\n                          <p className=\"text-xs text-muted-foreground\">\n                            ¿Quieres descargar el documento JSON para importarlo en n8n? Pulsa aquí.\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {message.sender === 'ai' && message.ai_type === 'n8n' && message.workflow_status && (\n                    <div className=\"mt-3 p-3 rounded-lg border\">\n                      <div className=\"flex items-center gap-2\">\n                        {message.workflow_status === 'sending' && (\n                          <>\n                            <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n                            <span className=\"text-sm text-blue-600\">Enviando automatización a n8n...</span>\n                          </>\n                        )}\n                        {message.workflow_status === 'success' && (\n                          <>\n                            <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                            <span className=\"text-sm text-green-600\">Automatización enviada exitosamente</span>\n                            {message.workflow_id && (\n                              <span className=\"text-xs text-muted-foreground\">(ID: {message.workflow_id})</span>\n                            )}\n                          </>\n                        )}\n                        {message.workflow_status === 'error' && (\n                          <>\n                            <XCircle className=\"h-4 w-4 text-red-500\" />\n                            <span className=\"text-sm text-red-600\">Error al enviar automatización</span>\n                            {message.workflow_error && (\n                              <span className=\"text-xs text-muted-foreground\">({message.workflow_error})</span>\n                            )}\n                          </>\n                        )}\n                      </div>\n                    </div>\n                  )}\n                </>\n              )}\n            </div>\n\n            {message.sender === \"user\" && (\n              <div className=\"flex items-center\">\n                <UserIcon className=\"w-6 h-6 text-muted-foreground\" />\n              </div>\n            )}\n          </div>\n        ))}\n        <div ref={messagesEndRef} className=\"h-4\" />\n      </div>\n\n      {/* Bottom Section - Fixed at bottom */}\n      <div className=\"flex-shrink-0\">\n        {/* Intelligent Create Automation Button */}\n        {showCreateButton && !showContactForm && !isCreatingAutomation && (\n          <div className=\"border-t bg-gradient-to-r from-primary/10 to-accent/10 p-6\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border border-primary/20\">\n                <div className=\"flex items-center justify-center gap-2 mb-3\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\"></div>\n                  <span className=\"text-sm font-medium text-green-600\">Los 3 pasos están completos</span>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-2 bg-gradient-to-r from-primary to-accent bg-clip-text text-transparent\">\n                  🚀 ¡Crear Automatización Inteligente!\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  Sistema Multi-IA activado. ChatGPT → Claude → DeepSeek → N8N\n                </p>\n                <Button \n                  onClick={handleCreateAutomation} \n                  size=\"lg\" \n                  className=\"w-full sm:w-auto bg-gradient-to-r from-primary to-accent hover:from-primary/90 hover:to-accent/90 transition-all duration-300 transform hover:scale-105\"\n                >\n                  <Zap className=\"h-5 w-5 mr-2\" />\n                  Iniciar Creación Automática\n                </Button>\n                <p className=\"text-xs text-muted-foreground mt-2\">\n                  Proceso automático sin intervención manual\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Contact Form */}\n        {showContactForm && (\n          <div className=\"border-t bg-primary/5 p-6\">\n            <div className=\"max-w-md mx-auto\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border\">\n                <h3 className=\"text-lg font-semibold mb-4\">📧 Datos de contacto</h3>\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Email</label>\n                    <Input\n                      type=\"email\"\n                      value={contactData.email}\n                      onChange={(e) => setContactData({...contactData, email: e.target.value})}\n                      placeholder=\"tu@email.com\"\n                      className=\"w-full\"\n                    />\n                  </div>\n                  <div>\n                    <label className=\"block text-sm font-medium mb-2\">Teléfono</label>\n                    <Input\n                      type=\"tel\"\n                      value={contactData.phone}\n                      onChange={(e) => setContactData({...contactData, phone: e.target.value})}\n                      placeholder=\"+34 123 456 789\"\n                      className=\"w-full\"\n                    />\n                  </div>\n                  <div className=\"flex gap-3\">\n                    <Button onClick={handleSubmitContactForm} className=\"flex-1\">\n                      Enviar y Crear\n                    </Button>\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowContactForm(false)}\n                      className=\"flex-1\"\n                    >\n                      Cancelar\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Creating Automation Loading */}\n        {isCreatingAutomation && (\n          <div className=\"border-t bg-primary/5 p-6\">\n            <div className=\"max-w-4xl mx-auto text-center\">\n              <div className=\"bg-white dark:bg-gray-800 rounded-lg p-6 shadow-lg border\">\n                <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4 text-primary\" />\n                <h3 className=\"text-lg font-semibold mb-2\">🔄 Generando automatización...</h3>\n                <p className=\"text-muted-foreground\">\n                  Nuestras 4 IAs están trabajando en tu workflow personalizado\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Input - Always visible at bottom */}\n        {!showContactForm && !isCreatingAutomation && (\n          <div className=\"border-t p-6 bg-background\">\n            <div className=\"flex gap-3 max-w-4xl mx-auto\">\n              <Input\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Describe el proceso que quieres automatizar...\"\n                disabled={isLoading}\n                className=\"flex-1 h-12 rounded-full px-6 text-base\"\n                data-testid=\"input-chat-message\"\n              />\n              <Button \n                onClick={handleSend} \n                disabled={isLoading || !input.trim()} \n                size=\"lg\" \n                className=\"rounded-full h-12 w-12 p-0\"\n                data-testid=\"button-send-message\"\n              >\n                {isLoading ? (\n                  <Loader2 className=\"h-5 w-5 animate-spin\" />\n                ) : (\n                  <Send className=\"h-5 w-5\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":31467},"client/src/components/ChatInterface.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Send, Bot, User, Loader2, Code, CheckCircle, XCircle } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\ninterface Message {\n  id: string;\n  content: string;\n  sender: \"user\" | \"ai\";\n  aiType?: \"chatgpt\" | \"claude\" | \"deepseek\" | \"n8n\";\n  timestamp: Date;\n  isTyping?: boolean;\n  workflowStatus?: 'sending' | 'success' | 'error';\n  workflowError?: string;\n  workflowId?: string;\n}\n\ninterface ChatInterfaceProps {\n  onClose: () => void;\n}\n\nexport const ChatInterface = ({ onClose }: ChatInterfaceProps) => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: \"1\",\n      content: \"¡Hola! Soy tu asistente de automatización IA. Te ayudaré a crear automatizaciones personalizadas para tu empresa. Para comenzar, cuéntame: ¿qué proceso te gustaría automatizar?\",\n      sender: \"ai\",\n      timestamp: new Date(),\n    }\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentStep, setCurrentStep] = useState(1);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { toast } = useToast();\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const aiResponses = {\n    step1: {\n      ai: \"chatgpt\",\n      content: \"Perfecto! He analizado tu solicitud y voy a generar el esquema base de automatización. Dame un momento mientras proceso esta información...\"\n    },\n    step2: {\n      ai: \"claude\",\n      content: \"Excelente esquema base de ChatGPT. Ahora voy a ajustar los condicionales, bucles y optimizar la estructura JSON para que sea más eficiente...\"\n    },\n    step3: {\n      ai: \"deepseek\",\n      content: \"Revisando la lógica propuesta por Claude... Puedo optimizar el orden de ejecución y mejorar la eficiencia del flujo. Aplicando mejoras...\"\n    },\n    step4: {\n      ai: \"n8n\",\n      content: \"¡Perfecto! He tomado toda la información optimizada y he generado el JSON final validado para n8n. El workflow está listo para importar.\"\n    }\n  };\n\n  const getAIIcon = (aiType?: string) => {\n    switch (aiType) {\n      case \"chatgpt\":\n        return <div className=\"w-6 h-6 bg-green-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">G</div>;\n      case \"claude\":\n        return <div className=\"w-6 h-6 bg-orange-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">C</div>;\n      case \"deepseek\":\n        return <div className=\"w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">D</div>;\n      case \"n8n\":\n        return <div className=\"w-6 h-6 bg-purple-500 rounded-full flex items-center justify-center text-white text-xs font-bold\">N</div>;\n      default:\n        return <Bot className=\"w-6 h-6 text-primary\" />;\n    }\n  };\n\n  const sendWorkflowToN8n = async (workflowJson: any, messageId: string) => {\n    try {\n      // Update message status to sending\n      setMessages(prev => prev.map(msg => \n        msg.id === messageId \n          ? { ...msg, workflowStatus: 'sending' } \n          : msg\n      ));\n\n      const { data, error } = await supabase.functions.invoke('send-to-n8n', {\n        body: { workflow: workflowJson }\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      }\n\n      if (data.success) {\n        setMessages(prev => prev.map(msg => \n          msg.id === messageId \n            ? { \n                ...msg, \n                workflowStatus: 'success',\n                workflowId: data.workflowId,\n                content: msg.content + `\\n\\n🎉 ${data.message}`\n              } \n            : msg\n        ));\n        \n        toast({\n          title: \"¡Éxito!\",\n          description: data.message,\n        });\n      } else {\n        throw new Error(data.error || 'Error desconocido');\n      }\n    } catch (error) {\n      console.error('Error sending to n8n:', error);\n      \n      setMessages(prev => prev.map(msg => \n        msg.id === messageId \n          ? { \n              ...msg, \n              workflowStatus: 'error',\n              workflowError: error.message,\n              content: msg.content + `\\n\\n❌ Error al enviar a n8n: ${error.message}`\n            } \n          : msg\n      ));\n      \n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: `No se pudo enviar la automatización a n8n: ${error.message}`,\n      });\n    }\n  };\n\n  const extractWorkflowFromContent = (content: string) => {\n    const jsonMatch = content.match(/```json\\n([\\s\\S]*?)\\n```/);\n    if (jsonMatch) {\n      try {\n        return JSON.parse(jsonMatch[1]);\n      } catch (e) {\n        console.error('Error parsing JSON:', e);\n        return null;\n      }\n    }\n    return null;\n  };\n\n  const detectAutomationKeywords = (message: string) => {\n    const keywords = [\n      'crear agente', 'creame', 'automatizacion', 'automatización', \n      'agente', 'bot', 'crear bot', 'workflow', 'proceso automatico',\n      'automatizar', 'generar agente', 'hacer agente'\n    ];\n    \n    const lowerMessage = message.toLowerCase();\n    return keywords.some(keyword => lowerMessage.includes(keyword));\n  };\n\n  const createAutomation = async () => {\n    if (!input.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('orchestrate', {\n        body: {\n          prompt: input,\n          dry_run: false\n        }\n      });\n\n      if (error) throw error;\n\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: `🎉 ¡Automatización creada exitosamente!\n\nWorkflow ID: ${data.workflow_id}\n\n📊 **Resumen de ejecución:**\n${data.execution_summary.message}\n\n🤖 **Modelos utilizados:** ${data.models_used.join(', ')}\n\nEl workflow ha sido guardado y está listo para usar.`,\n        sender: \"ai\",\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n      setInput('');\n    } catch (error) {\n      console.error('Error creating automation:', error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        content: 'Lo siento, hubo un error al crear la automatización. Por favor, intenta de nuevo.',\n        sender: \"ai\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const simulateAIResponse = async (userMessage: string) => {\n    setIsLoading(true);\n\n    // Simular procesamiento por múltiples IAs\n    const steps = [\n      { delay: 2000, step: \"step1\" as keyof typeof aiResponses },\n      { delay: 3000, step: \"step2\" as keyof typeof aiResponses },\n      { delay: 2500, step: \"step3\" as keyof typeof aiResponses },\n      { delay: 3500, step: \"step4\" as keyof typeof aiResponses }\n    ];\n\n    for (let i = 0; i < steps.length; i++) {\n      const { delay, step } = steps[i];\n      const response = aiResponses[step];\n      \n      // Mostrar mensaje de \"escribiendo...\"\n      const typingId = `typing-${Date.now()}`;\n      setMessages(prev => [...prev, {\n        id: typingId,\n        content: \"\",\n        sender: \"ai\",\n        aiType: response.ai as any,\n        timestamp: new Date(),\n        isTyping: true\n      }]);\n\n      await new Promise(resolve => setTimeout(resolve, delay));\n\n      // Reemplazar mensaje de \"escribiendo...\" con respuesta real\n      setMessages(prev => prev.map(msg => \n        msg.id === typingId \n          ? { ...msg, content: response.content, isTyping: false }\n          : msg\n      ));\n\n      setCurrentStep(i + 2);\n    }\n\n    // Generar JSON final\n    await new Promise(resolve => setTimeout(resolve, 2000));\n    \n    const jsonCode = `{\n  \"name\": \"Automatización Personalizada\",\n  \"nodes\": [\n    {\n      \"parameters\": {\n        \"conditions\": {\n          \"options\": {\n            \"caseSensitive\": true,\n            \"leftValue\": \"\",\n            \"typeValidation\": \"strict\"\n          },\n          \"conditions\": [\n            {\n              \"id\": \"condition1\",\n              \"leftValue\": \"{{ $json.trigger }}\",\n              \"rightValue\": \"nuevo_cliente\",\n              \"operator\": {\n                \"type\": \"string\",\n                \"operation\": \"equals\"\n              }\n            }\n          ]\n        }\n      },\n      \"id\": \"node1\",\n      \"name\": \"Condición Inicial\",\n      \"type\": \"n8n-nodes-base.if\",\n      \"typeVersion\": 1,\n      \"position\": [250, 300]\n    }\n  ],\n  \"connections\": {},\n  \"active\": true,\n  \"settings\": {},\n  \"versionId\": \"1.0\"\n}`;\n\n    const finalMessageId = Date.now().toString();\n    const aiMessage = {\n      id: finalMessageId,\n      content: `¡Automatización completada! Aquí tienes el código JSON listo para importar en n8n:\\n\\n\\`\\`\\`json\\n${jsonCode}\\n\\`\\`\\`\\n\\n✅ **Workflow validado y optimizado**\\n✅ **Listo para importar en n8n**\\n✅ **Incluye validaciones integradas**\\n\\n¿Te gustaría que ajuste algo específico o genere otra automatización?`,\n      sender: \"ai\" as const,\n      aiType: \"n8n\" as const,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, aiMessage]);\n\n    // Extract and send workflow to n8n\n    const workflow = extractWorkflowFromContent(aiMessage.content);\n    if (workflow) {\n      // Wait a moment for the message to be displayed\n      setTimeout(() => {\n        sendWorkflowToN8n(workflow, finalMessageId);\n      }, 1000);\n    }\n\n    setIsLoading(false);\n  };\n\n  const handleSend = async () => {\n    if (!input.trim()) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      content: input,\n      sender: \"user\",\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    \n    // Check if user wants to create automation\n    if (detectAutomationKeywords(input)) {\n      const suggestionMessage: Message = {\n        id: (Date.now() + 0.5).toString(),\n        content: '🤖 He detectado que quieres crear una automatización. Te recomiendo usar el botón \"Crear Automatización\" para un proceso más completo y eficiente.',\n        sender: \"ai\",\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, suggestionMessage]);\n      setInput('');\n      return;\n    }\n    \n    setInput(\"\");\n\n    await simulateAIResponse(input);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      handleSend();\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-4xl h-[80vh] flex flex-col\">\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-4\">\n          <div>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Bot className=\"h-6 w-6 text-primary\" />\n              Asistente de Automatización IA\n            </CardTitle>\n            <p className=\"text-sm text-muted-foreground\">\n              Sistema Multi-IA: ChatGPT → Claude → DeepSeek → N8N Assistant\n            </p>\n          </div>\n          <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n            <X className=\"h-4 w-4\" />\n          </Button>\n        </CardHeader>\n\n        <CardContent className=\"flex-1 flex flex-col\">\n          {/* Progress Indicator */}\n          <div className=\"flex gap-2 mb-4 p-3 bg-muted/50 rounded-lg\">\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 1 ? 'bg-green-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">ChatGPT</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 2 ? 'bg-orange-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">Claude</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 3 ? 'bg-blue-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">DeepSeek</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className={`w-3 h-3 rounded-full ${currentStep >= 4 ? 'bg-purple-500' : 'bg-gray-300'}`} />\n              <span className=\"text-xs\">N8N</span>\n            </div>\n          </div>\n\n          {/* Messages */}\n          <div className=\"flex-1 overflow-y-auto space-y-4 mb-32\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex gap-3 ${\n                  message.sender === \"user\" ? \"justify-end\" : \"justify-start\"\n                }`}\n              >\n                {message.sender === \"ai\" && (\n                  <div className=\"flex flex-col items-center gap-1\">\n                    {getAIIcon(message.aiType)}\n                    {message.aiType && (\n                      <Badge variant=\"secondary\" className=\"text-xs\">\n                        {message.aiType.toUpperCase()}\n                      </Badge>\n                    )}\n                  </div>\n                )}\n                \n                <div\n                  className={`max-w-[70%] rounded-lg p-3 ${\n                    message.sender === \"user\"\n                      ? \"bg-primary text-primary-foreground\"\n                      : \"bg-muted\"\n                  }`}\n                >\n                  {message.isTyping ? (\n                    <div className=\"flex items-center gap-2\">\n                      <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      <span>Procesando...</span>\n                    </div>\n                  ) : (\n                    <>\n                      <div className=\"whitespace-pre-wrap\">{message.content}</div>\n                      \n                      {/* Workflow status indicator */}\n                      {message.sender === 'ai' && message.aiType === 'n8n' && message.workflowStatus && (\n                        <div className=\"mt-3 p-3 rounded-lg border\">\n                          <div className=\"flex items-center gap-2\">\n                            {message.workflowStatus === 'sending' && (\n                              <>\n                                <Loader2 className=\"h-4 w-4 animate-spin text-blue-500\" />\n                                <span className=\"text-sm text-blue-600\">Enviando automatización a n8n...</span>\n                              </>\n                            )}\n                            {message.workflowStatus === 'success' && (\n                              <>\n                                <CheckCircle className=\"h-4 w-4 text-green-500\" />\n                                <span className=\"text-sm text-green-600\">Automatización enviada exitosamente</span>\n                                {message.workflowId && (\n                                  <span className=\"text-xs text-muted-foreground\">(ID: {message.workflowId})</span>\n                                )}\n                              </>\n                            )}\n                            {message.workflowStatus === 'error' && (\n                              <>\n                                <XCircle className=\"h-4 w-4 text-red-500\" />\n                                <span className=\"text-sm text-red-600\">Error al enviar automatización</span>\n                                {message.workflowError && (\n                                  <span className=\"text-xs text-muted-foreground\">({message.workflowError})</span>\n                                )}\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </>\n                  )}\n                </div>\n\n                {message.sender === \"user\" && (\n                  <div className=\"flex items-center\">\n                    <User className=\"w-6 h-6 text-muted-foreground\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            <div ref={messagesEndRef} />\n          </div>\n\n          {/* Fixed input area at absolute bottom */}\n          <div className=\"absolute bottom-0 left-0 right-0 bg-background/98 backdrop-blur-md border-t p-4\">\n            <div className=\"flex gap-2 max-w-full mx-auto mb-3\">\n              <Button\n                onClick={createAutomation}\n                disabled={isLoading || !input.trim()}\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n              >\n                🤖 Crear Automatización\n              </Button>\n            </div>\n            <div className=\"flex gap-2 max-w-full mx-auto\">\n              <Input\n                value={input}\n                onChange={(e) => setInput(e.target.value)}\n                onKeyPress={handleKeyPress}\n                placeholder=\"Describe el proceso que quieres automatizar...\"\n                disabled={isLoading}\n                className=\"flex-1\"\n              />\n              <Button onClick={handleSend} disabled={isLoading || !input.trim()}>\n                {isLoading ? (\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                ) : (\n                  <Send className=\"h-4 w-4\" />\n                )}\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":17813},"client/src/components/ChatSidebar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n}\nimport { \n  Bot, \n  Plus, \n  MessageSquare, \n  User as UserIcon, \n  CreditCard, \n  LogOut, \n  Trash2,\n  Settings\n} from \"lucide-react\";\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarGroup,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  SidebarHeader,\n  SidebarFooter,\n  SidebarTrigger,\n  useSidebar,\n} from \"@/components/ui/sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\n\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { \n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\n\ninterface ChatSession {\n  id: string;\n  title: string;\n  created_at: string;\n  updated_at: string;\n}\n\ninterface ChatSidebarProps {\n  user: User;\n  currentChatId: string | null;\n  onChatSelect: (chatId: string) => void;\n  onCreateChat: (title?: string) => Promise<string | null>;\n}\n\nexport function ChatSidebar({ \n  user, \n  currentChatId, \n  onChatSelect, \n  onCreateChat \n}: ChatSidebarProps) {\n  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);\n  const [chatToDelete, setChatToDelete] = useState<string | null>(null);\n  const { state } = useSidebar();\n  const collapsed = state === \"collapsed\";\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  const fetchChatSessions = async () => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return;\n\n      const response = await fetch('/api/chat-sessions', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        setChatSessions(data || []);\n      }\n    } catch (error) {\n      console.error(\"Error fetching chat sessions:\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    fetchChatSessions();\n  }, []);\n\n  const handleNewChat = async () => {\n    const chatId = await onCreateChat(\"Nueva conversación\");\n    if (chatId) {\n      await fetchChatSessions();\n    }\n  };\n\n  const handleDeleteChat = async (chatId: string) => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return;\n\n      const response = await fetch(`/api/chat-sessions/${chatId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (!response.ok) {\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: \"No se pudo eliminar la conversación.\",\n        });\n        return;\n      }\n\n      setChatSessions(prev => prev.filter(chat => chat.id !== chatId));\n      \n      if (currentChatId === chatId) {\n        onChatSelect(\"\");\n      }\n\n      toast({\n        title: \"Conversación eliminada\",\n        description: \"La conversación ha sido eliminada correctamente.\",\n      });\n    } catch (error) {\n      console.error(\"Error deleting chat:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo eliminar la conversación.\",\n      });\n    }\n  };\n\n  const handleLogout = async () => {\n    try {\n      localStorage.removeItem('auth_token');\n      navigate(\"/\");\n    } catch (error) {\n      console.error(\"Error signing out:\", error);\n    }\n  };\n\n  const getUserInitials = () => {\n    if (user.user_metadata?.username) {\n      return user.user_metadata.username.slice(0, 2).toUpperCase();\n    }\n    if (user.email) {\n      return user.email.slice(0, 2).toUpperCase();\n    }\n    return \"US\";\n  };\n\n  return (\n    <>\n      <Sidebar className={collapsed ? \"w-14\" : \"w-64\"} collapsible=\"icon\">\n        <SidebarHeader className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"p-2 bg-primary/10 rounded-lg\">\n              <Bot className=\"h-6 w-6 text-primary\" />\n            </div>\n            {!collapsed && (\n              <div>\n                <h1 className=\"font-bold text-lg\">Precensus AI</h1>\n                <p className=\"text-sm text-muted-foreground\">\n                  Automatización Inteligente\n                </p>\n              </div>\n            )}\n          </div>\n          <SidebarTrigger className=\"ml-auto\" />\n        </SidebarHeader>\n\n        <SidebarContent className=\"flex-1\">\n          <SidebarGroup>\n            <SidebarGroupLabel className=\"flex items-center justify-between\">\n              {!collapsed && \"Conversaciones\"}\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleNewChat}\n                className=\"h-6 w-6 p-0\"\n                title=\"Nueva conversación\"\n              >\n                <Plus className=\"h-4 w-4\" />\n              </Button>\n            </SidebarGroupLabel>\n\n            <SidebarGroupContent>\n              <SidebarMenu>\n                {loading ? (\n                  <div className=\"p-4 text-center\">\n                    <div className=\"animate-spin rounded-full h-6 w-6 border-b-2 border-primary mx-auto\"></div>\n                  </div>\n                ) : chatSessions.length === 0 ? (\n                  <div className=\"p-4 text-center text-muted-foreground\">\n                    {!collapsed && \"No hay conversaciones\"}\n                  </div>\n                ) : (\n                  chatSessions.map((chat) => (\n                    <SidebarMenuItem key={chat.id}>\n                      <SidebarMenuButton\n                        onClick={() => onChatSelect(chat.id)}\n                        isActive={currentChatId === chat.id}\n                        className=\"flex items-center justify-between group\"\n                      >\n                        <div className=\"flex items-center gap-2 min-w-0 flex-1\">\n                          <MessageSquare className=\"h-4 w-4 flex-shrink-0\" />\n                          {!collapsed && (\n                            <span className=\"truncate\">{chat.title}</span>\n                          )}\n                        </div>\n                        {!collapsed && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-auto w-auto p-1 opacity-0 group-hover:opacity-100\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              setChatToDelete(chat.id);\n                              setDeleteDialogOpen(true);\n                            }}\n                          >\n                            <Trash2 className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))\n                )}\n              </SidebarMenu>\n            </SidebarGroupContent>\n          </SidebarGroup>\n        </SidebarContent>\n\n        <SidebarFooter className=\"p-4\">\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"w-full justify-start\">\n                <Avatar className=\"h-8 w-8 mr-3\">\n                  <AvatarFallback className=\"text-xs\">\n                    {getUserInitials()}\n                  </AvatarFallback>\n                </Avatar>\n                {!collapsed && (\n                  <div className=\"flex-1 text-left\">\n                    <p className=\"text-sm font-medium\">\n                      {user.user_metadata?.username || user.email?.split(\"@\")[0]}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {user.email}\n                    </p>\n                  </div>\n                )}\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem onClick={() => navigate(\"/\")}>\n                <UserIcon className=\"mr-2 h-4 w-4\" />\n                <span>Mi cuenta</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem onClick={() => navigate(\"/#precios\")}>\n                <CreditCard className=\"mr-2 h-4 w-4\" />\n                <span>Precios</span>\n              </DropdownMenuItem>\n              <DropdownMenuItem>\n                <Settings className=\"mr-2 h-4 w-4\" />\n                <span>Configuración</span>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleLogout}>\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Cerrar sesión</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </SidebarFooter>\n      </Sidebar>\n\n      <AlertDialog open={deleteDialogOpen} onOpenChange={setDeleteDialogOpen}>\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>¿Eliminar conversación?</AlertDialogTitle>\n            <AlertDialogDescription>\n              Esta acción no se puede deshacer. Se eliminará permanentemente la conversación y todos sus mensajes.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel>Cancelar</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={() => {\n                if (chatToDelete) {\n                  handleDeleteChat(chatToDelete);\n                  setChatToDelete(null);\n                }\n                setDeleteDialogOpen(false);\n              }}\n              className=\"bg-destructive text-destructive-foreground\"\n            >\n              Eliminar\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </>\n  );\n}","size_bytes":10271},"client/src/components/HeroChat.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Send, Bot, User } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface Message {\n  id: string;\n  text: string;\n  isBot: boolean;\n  timestamp: Date;\n}\n\nexport const HeroChat = () => {\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: '¿Necesitas información? Pregúntame lo que quieras 💬',\n      isBot: true,\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const detectAutomationKeywords = (message: string) => {\n    const keywords = [\n      'crear agente', 'creame', 'automatizacion', 'automatización', \n      'agente', 'bot', 'crear bot', 'workflow', 'proceso automatico',\n      'automatizar', 'generar agente', 'hacer agente'\n    ];\n    \n    const lowerMessage = message.toLowerCase();\n    return keywords.some(keyword => lowerMessage.includes(keyword));\n  };\n\n  const createAutomation = async () => {\n    if (!inputMessage.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('orchestrate', {\n        body: {\n          prompt: inputMessage,\n          dry_run: false\n        }\n      });\n\n      if (error) throw error;\n\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: `🎉 ¡Automatización creada exitosamente!\n\nWorkflow ID: ${data.workflow_id}\n\n📊 **Resumen de ejecución:**\n${data.execution_summary.message}\n\n🤖 **Modelos utilizados:** ${data.models_used.join(', ')}\n\nEl workflow ha sido guardado y está listo para usar.`,\n        isBot: true,\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n      setInputMessage('');\n    } catch (error) {\n      console.error('Error creating automation:', error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: 'Lo siento, hubo un error al crear la automatización. Por favor, intenta de nuevo.',\n        isBot: true,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: inputMessage,\n      isBot: false,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    \n    // Check if user wants to create automation\n    if (detectAutomationKeywords(inputMessage)) {\n      const suggestionMessage: Message = {\n        id: (Date.now() + 0.5).toString(),\n        text: '🤖 He detectado que quieres crear una automatización. Te recomiendo usar el botón \"Crear Automatización\" para un proceso más completo y eficiente.',\n        isBot: true,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, suggestionMessage]);\n      setInputMessage('');\n      return;\n    }\n    \n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      const { data, error } = await supabase.functions.invoke('chat-ai', {\n        body: {\n          message: inputMessage,\n          sessionId: 'landing-page-chat'\n        }\n      });\n\n      if (error) throw error;\n\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: data.response || 'Lo siento, hubo un error al procesar tu mensaje.',\n        isBot: true,\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: 'Lo siento, no pude procesar tu mensaje en este momento. Por favor, intenta de nuevo.',\n        isBot: true,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  return (\n    <div className=\"w-full max-w-2xl mx-auto mt-6 relative\">\n      <Card className=\"border border-border/50 shadow-md rounded-3xl overflow-hidden flex flex-col h-[500px]\">\n        <CardContent className=\"p-4 flex flex-col h-full relative\">\n          <div className=\"flex-1 overflow-y-auto space-y-3 p-3 bg-muted/20 rounded-2xl mb-32\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex gap-2 ${message.isBot ? 'justify-start' : 'justify-end'}`}\n              >\n                {message.isBot && (\n                  <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Bot className=\"h-3 w-3 text-primary\" />\n                  </div>\n                )}\n                <div\n                  className={`max-w-[75%] px-3 py-2 rounded-2xl text-sm ${\n                    message.isBot\n                      ? 'bg-background border text-foreground'\n                      : 'bg-primary text-primary-foreground'\n                  }`}\n                >\n                  {message.text}\n                </div>\n                {!message.isBot && (\n                  <div className=\"w-6 h-6 rounded-full bg-primary flex items-center justify-center flex-shrink-0 mt-1\">\n                    <User className=\"h-3 w-3 text-primary-foreground\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"flex gap-2 justify-start\">\n                <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Bot className=\"h-3 w-3 text-primary\" />\n                </div>\n                <div className=\"bg-background border px-3 py-2 rounded-2xl text-sm\">\n                  <div className=\"flex gap-1\">\n                    <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full animate-bounce\"></div>\n                    <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-1.5 h-1.5 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          {/* Fixed input area at absolute bottom */}\n          <div className=\"absolute bottom-0 left-0 right-0 bg-background/98 backdrop-blur-md border-t p-4 rounded-b-3xl\">\n            <div className=\"flex gap-2 max-w-full mx-auto mb-3\">\n              <Button\n                onClick={createAutomation}\n                disabled={isLoading || !inputMessage.trim()}\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"px-3 rounded-full border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n              >\n                🤖 Crear Automatización\n              </Button>\n            </div>\n            <div className=\"flex gap-2 max-w-full mx-auto\">\n              <Input\n                placeholder=\"Escribe tu pregunta o describe la automatización que necesitas...\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={isLoading}\n                className=\"flex-1 rounded-full border-border/50\"\n              />\n              <Button\n                onClick={sendMessage}\n                disabled={isLoading || !inputMessage.trim()}\n                size=\"sm\"\n                className=\"px-3 rounded-full\"\n              >\n                <Send className=\"h-3 w-3\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":8465},"client/src/components/JsonUploader.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, FileJson, CheckCircle, XCircle, Loader2 } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n// import { supabase } from \"@/integrations/supabase/client\";\n\ninterface JsonUploaderProps {\n  onClose: () => void;\n}\n\nexport const JsonUploader = ({ onClose }: JsonUploaderProps) => {\n  const [selectedFile, setSelectedFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadStatus, setUploadStatus] = useState<'idle' | 'success' | 'error'>('idle');\n  const [workflowId, setWorkflowId] = useState<string>('');\n  const [errorMessage, setErrorMessage] = useState<string>('');\n  const { toast } = useToast();\n\n  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      if (file.type === 'application/json' || file.name.endsWith('.json')) {\n        setSelectedFile(file);\n        setUploadStatus('idle');\n        setErrorMessage('');\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"Archivo inválido\",\n          description: \"Por favor selecciona un archivo JSON válido.\",\n        });\n      }\n    }\n  };\n\n  const handleUpload = async () => {\n    if (!selectedFile) return;\n\n    setIsUploading(true);\n    setUploadStatus('idle');\n\n    try {\n      // Leer el contenido del archivo JSON\n      const fileContent = await selectedFile.text();\n      const workflowData = JSON.parse(fileContent);\n\n      // Validar que tiene la estructura básica de un workflow\n      if (!workflowData.nodes || !Array.isArray(workflowData.nodes)) {\n        throw new Error('El archivo JSON no tiene la estructura de un workflow válido de n8n. Debe contener un array \"nodes\".');\n      }\n\n      // Enviar el workflow a n8n usando el edge function\n      // Temporalmente comentado para debug\n      /* const { data, error } = await supabase.functions.invoke('send-to-n8n', {\n        body: { workflow: workflowData }\n      });\n\n      if (error) {\n        throw new Error(error.message);\n      } */\n\n      // Simulación temporal para testing\n      const data = { success: true, workflowId: 'test-123', workflowName: selectedFile.name.replace('.json', '') };\n\n      if (data.success) {\n        setUploadStatus('success');\n        setWorkflowId(data.workflowId);\n        toast({\n          title: \"¡Éxito!\",\n          description: `Workflow \"${data.workflowName}\" creado en n8n exitosamente`,\n        });\n      }\n\n    } catch (error) {\n      console.error('Error uploading JSON:', error);\n      setUploadStatus('error');\n      setErrorMessage(error.message);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: `Error al subir el archivo: ${error.message}`,\n      });\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const resetUploader = () => {\n    setSelectedFile(null);\n    setUploadStatus('idle');\n    setWorkflowId('');\n    setErrorMessage('');\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4\">\n      <Card className=\"w-full max-w-2xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <FileJson className=\"h-6 w-6 text-primary\" />\n            Subir Automatización JSON a n8n\n          </CardTitle>\n          <CardDescription>\n            Selecciona un archivo JSON con un workflow de n8n para importarlo directamente a tu instancia\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6\">\n          {/* File Upload Section */}\n          <div className=\"space-y-4\">\n            <Label htmlFor=\"json-file\">Archivo JSON del Workflow</Label>\n            <div className=\"border-2 border-dashed border-muted-foreground/25 rounded-lg p-6 text-center space-y-4\">\n              <Upload className=\"h-8 w-8 text-muted-foreground mx-auto\" />\n              <div>\n                <Input\n                  id=\"json-file\"\n                  type=\"file\"\n                  accept=\".json,application/json\"\n                  onChange={handleFileSelect}\n                  className=\"hidden\"\n                />\n                <Label\n                  htmlFor=\"json-file\"\n                  className=\"cursor-pointer text-sm text-muted-foreground hover:text-foreground\"\n                >\n                  Haz clic aquí para seleccionar un archivo JSON\n                  <br />\n                  <span className=\"text-xs\">Solo archivos .json</span>\n                </Label>\n              </div>\n            </div>\n\n            {selectedFile && (\n              <div className=\"flex items-center gap-2 p-3 bg-muted/50 rounded-lg\">\n                <FileJson className=\"h-5 w-5 text-primary\" />\n                <div className=\"flex-1\">\n                  <p className=\"text-sm font-medium\">{selectedFile.name}</p>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {(selectedFile.size / 1024).toFixed(1)} KB\n                  </p>\n                </div>\n                <Button variant=\"ghost\" size=\"sm\" onClick={resetUploader}>\n                  Cambiar\n                </Button>\n              </div>\n            )}\n          </div>\n\n          {/* Status Section */}\n          {uploadStatus !== 'idle' && (\n            <div className=\"p-4 rounded-lg border\">\n              {uploadStatus === 'success' && (\n                <div className=\"flex items-center gap-2 text-green-600\">\n                  <CheckCircle className=\"h-5 w-5\" />\n                  <div>\n                    <p className=\"font-medium\">Workflow subido exitosamente</p>\n                    {workflowId && (\n                      <p className=\"text-sm text-muted-foreground\">ID del workflow: {workflowId}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n\n              {uploadStatus === 'error' && (\n                <div className=\"flex items-center gap-2 text-red-600\">\n                  <XCircle className=\"h-5 w-5\" />\n                  <div>\n                    <p className=\"font-medium\">Error al subir workflow</p>\n                    {errorMessage && (\n                      <p className=\"text-sm text-red-500 mt-1\">{errorMessage}</p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Instructions */}\n          <div className=\"text-sm text-muted-foreground space-y-2\">\n            <p className=\"font-medium\">Instrucciones:</p>\n            <ul className=\"list-disc list-inside space-y-1\">\n              <li>Selecciona un archivo JSON exportado desde n8n</li>\n              <li>El archivo debe contener un workflow válido con nodos y conexiones</li>\n              <li>El workflow se creará automáticamente en tu instancia de n8n configurada</li>\n              <li>Una vez subido, estará listo para usar en tu n8n</li>\n            </ul>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-3 justify-end\">\n            <Button variant=\"outline\" onClick={onClose}>\n              Cancelar\n            </Button>\n            <Button \n              onClick={handleUpload} \n              disabled={!selectedFile || isUploading}\n              className=\"gap-2\"\n            >\n              {isUploading ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 animate-spin\" />\n                  Subiendo...\n                </>\n              ) : (\n                <>\n                  <Upload className=\"h-4 w-4\" />\n                  Subir a n8n\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":7954},"client/src/components/LeadForm.tsx":{"content":"import * as React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { supabase } from \"@/integrations/supabase/client\";\n\nconst leadSchema = z.object({\n  name: z.string().min(2, \"Nombre demasiado corto\"),\n  email: z.string().email(\"Email inválido\"),\n  details: z.string().max(1000).optional(),\n});\n\nexport type LeadFormValues = z.infer<typeof leadSchema>;\n\ninterface LeadFormProps {\n  variant?: \"compact\" | \"full\";\n  ctaText?: string;\n}\n\nexport const LeadForm: React.FC<LeadFormProps> = ({ variant = \"full\", ctaText = \"Quiero mi demo\" }) => {\n  const { toast } = useToast();\n\n  const form = useForm<LeadFormValues>({\n    resolver: zodResolver(leadSchema),\n    defaultValues: { name: \"\", email: \"\", details: \"\" },\n  });\n\n  const [loading, setLoading] = React.useState(false);\n\n  const onSubmit = async (values: LeadFormValues) => {\n    setLoading(true);\n    try {\n      const { error } = await supabase.functions.invoke(\"send-lead\", {\n        body: { name: values.name, email: values.email, details: values.details },\n      });\n      if (error) throw error;\n\n      toast({ title: \"¡Gracias!\", description: \"Hemos recibido tu solicitud. Te contactaremos en breve.\" });\n      form.reset();\n    } catch (e: any) {\n      console.error(\"Lead form error\", e);\n      toast({\n        title: \"No se pudo enviar\",\n        description: \"Configura la API de email o envíanos un correo a u1974564828@gmail.com\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className={variant === \"compact\" ? \"grid gap-3 md:grid-cols-[1fr_1fr_auto]\" : \"grid gap-4\"}>\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Nombre</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Tu nombre\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input placeholder=\"tu@email.com\" type=\"email\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {variant === \"full\" && (\n          <FormField\n            control={form.control}\n            name=\"details\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>¿Qué quieres automatizar? (opcional)</FormLabel>\n                <FormControl>\n                  <Textarea placeholder=\"Cuéntanos brevemente tu caso\" rows={3} {...field} />\n                </FormControl>\n                <FormDescription>Ej.: Seguimiento de leads, generación de propuestas, atención al cliente…</FormDescription>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        )}\n\n        {variant === \"compact\" ? (\n          <div className=\"flex items-end\">\n            <Button type=\"submit\" disabled={loading} className=\"w-full md:w-auto\">\n              {loading ? \"Enviando…\" : ctaText}\n            </Button>\n          </div>\n        ) : (\n          <Button type=\"submit\" disabled={loading} className=\"w-full md:w-auto\">\n            {loading ? \"Enviando…\" : ctaText}\n          </Button>\n        )}\n      </form>\n    </Form>\n  );\n};\n","size_bytes":3939},"client/src/components/MiniChat.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { MessageSquare, Send, Bot, User, X, Minimize2 } from 'lucide-react';\nimport { supabase } from '@/integrations/supabase/client';\n\ninterface Message {\n  id: string;\n  text: string;\n  isBot: boolean;\n  timestamp: Date;\n}\n\nexport const MiniChat = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const [messages, setMessages] = useState<Message[]>([\n    {\n      id: '1',\n      text: '¡Hola! 👋 Soy tu consultor de IA especializado en automatización empresarial. Te ofrezco una CONSULTORÍA GRATUITA personalizada para analizar tu negocio y recomendarte las mejores automatizaciones. Para empezar, cuéntame: ¿Qué tipo de empresa tienes y cuáles son los procesos que más tiempo te consumen?',\n      isBot: true,\n      timestamp: new Date()\n    }\n  ]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  };\n\n  useEffect(() => {\n    scrollToBottom();\n  }, [messages]);\n\n  const detectAutomationKeywords = (message: string) => {\n    const keywords = [\n      'crear agente', 'creame', 'automatizacion', 'automatización', \n      'agente', 'bot', 'crear bot', 'workflow', 'proceso automatico',\n      'automatizar', 'generar agente', 'hacer agente'\n    ];\n    \n    const lowerMessage = message.toLowerCase();\n    return keywords.some(keyword => lowerMessage.includes(keyword));\n  };\n\n  const createAutomation = async () => {\n    if (!inputMessage.trim()) return;\n    \n    setIsLoading(true);\n    try {\n      const { data, error } = await supabase.functions.invoke('orchestrate', {\n        body: {\n          prompt: inputMessage,\n          dry_run: false\n        }\n      });\n\n      if (error) throw error;\n\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: `🎉 ¡Automatización creada exitosamente!\n\nWorkflow ID: ${data.workflow_id}\n\n📊 **Resumen de ejecución:**\n${data.execution_summary.message}\n\n🤖 **Modelos utilizados:** ${data.models_used.join(', ')}\n\nEl workflow ha sido guardado y está listo para usar.`,\n        isBot: true,\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n      setInputMessage('');\n    } catch (error) {\n      console.error('Error creating automation:', error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: 'Lo siento, hubo un error al crear la automatización. Por favor, intenta de nuevo.',\n        isBot: true,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const sendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage: Message = {\n      id: Date.now().toString(),\n      text: inputMessage,\n      isBot: false,\n      timestamp: new Date()\n    };\n\n    setMessages(prev => [...prev, userMessage]);\n    \n    // Check if user wants to create automation\n    if (detectAutomationKeywords(inputMessage)) {\n      const suggestionMessage: Message = {\n        id: (Date.now() + 0.5).toString(),\n        text: '🤖 He detectado que quieres crear una automatización. Te recomiendo usar el botón \"Crear Automatización\" para un proceso más completo y eficiente.',\n        isBot: true,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, suggestionMessage]);\n      setInputMessage('');\n      return;\n    }\n    \n    setInputMessage('');\n    setIsLoading(true);\n\n    try {\n      const { data, error } = await supabase.functions.invoke('chat-ai', {\n        body: {\n          message: inputMessage,\n          sessionId: 'landing-page-chat'\n        }\n      });\n\n      if (error) throw error;\n\n      const botMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: data.response || 'Lo siento, hubo un error al procesar tu mensaje.',\n        isBot: true,\n        timestamp: new Date()\n      };\n\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage: Message = {\n        id: (Date.now() + 1).toString(),\n        text: 'Lo siento, no pude procesar tu mensaje en este momento. Por favor, intenta de nuevo.',\n        isBot: true,\n        timestamp: new Date()\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      sendMessage();\n    }\n  };\n\n  if (!isOpen) {\n    return (\n      <div className=\"fixed bottom-6 right-6 z-50\">\n        <Button\n          onClick={() => setIsOpen(true)}\n          size=\"lg\"\n          className=\"rounded-full h-16 w-16 shadow-lg hover:scale-110 transition-transform\"\n        >\n          <MessageSquare className=\"h-6 w-6\" />\n        </Button>\n        <div className=\"absolute -top-12 right-0 bg-primary text-primary-foreground px-3 py-1 rounded-lg text-sm whitespace-nowrap animate-pulse\">\n          ¡Consultoría IA Gratuita!\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"fixed bottom-6 right-6 z-50 w-96 max-w-[calc(100vw-2rem)] h-[500px]\">\n      <Card className=\"shadow-2xl border-2 h-full flex flex-col relative\">\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Bot className=\"h-5 w-5 text-primary\" />\n              <CardTitle className=\"text-lg\">Consultoría IA Gratuita</CardTitle>\n            </div>\n            <div className=\"flex gap-1\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <Minimize2 className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => setIsOpen(false)}\n                className=\"h-8 w-8 p-0\"\n              >\n                <X className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-4 pt-0 flex flex-col h-full relative\">\n          <div className=\"flex-1 overflow-y-auto space-y-3 p-2 bg-muted/30 rounded-lg mb-28\">\n            {messages.map((message) => (\n              <div\n                key={message.id}\n                className={`flex gap-2 ${message.isBot ? 'justify-start' : 'justify-end'}`}\n              >\n                {message.isBot && (\n                  <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-1\">\n                    <Bot className=\"h-3 w-3 text-primary\" />\n                  </div>\n                )}\n                <div\n                  className={`max-w-[80%] px-3 py-2 rounded-lg text-sm ${\n                    message.isBot\n                      ? 'bg-background border text-foreground'\n                      : 'bg-primary text-primary-foreground'\n                  }`}\n                >\n                  {message.text}\n                </div>\n                {!message.isBot && (\n                  <div className=\"w-6 h-6 rounded-full bg-primary flex items-center justify-center flex-shrink-0 mt-1\">\n                    <User className=\"h-3 w-3 text-primary-foreground\" />\n                  </div>\n                )}\n              </div>\n            ))}\n            {isLoading && (\n              <div className=\"flex gap-2 justify-start\">\n                <div className=\"w-6 h-6 rounded-full bg-primary/10 flex items-center justify-center flex-shrink-0 mt-1\">\n                  <Bot className=\"h-3 w-3 text-primary\" />\n                </div>\n                <div className=\"bg-background border px-3 py-2 rounded-lg text-sm\">\n                  <div className=\"flex gap-1\">\n                    <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\"></div>\n                    <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                    <div className=\"w-2 h-2 bg-muted-foreground rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                  </div>\n                </div>\n              </div>\n            )}\n            <div ref={messagesEndRef} />\n          </div>\n          \n          {/* Fixed input area at absolute bottom */}\n          <div className=\"absolute bottom-0 left-0 right-0 bg-background/98 backdrop-blur-md border-t p-4\">\n            <div className=\"flex gap-2 mb-3\">\n              <Button\n                onClick={createAutomation}\n                disabled={isLoading || !inputMessage.trim()}\n                size=\"sm\"\n                variant=\"outline\"\n                className=\"px-3 border-primary text-primary hover:bg-primary hover:text-primary-foreground\"\n              >\n                🤖 Crear Automatización\n              </Button>\n            </div>\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder=\"Cuéntame sobre tu empresa o describe la automatización que necesitas...\"\n                value={inputMessage}\n                onChange={(e) => setInputMessage(e.target.value)}\n                onKeyPress={handleKeyPress}\n                disabled={isLoading}\n                className=\"flex-1\"\n              />\n              <Button\n                onClick={sendMessage}\n                disabled={isLoading || !inputMessage.trim()}\n                size=\"sm\"\n                className=\"px-3\"\n              >\n                <Send className=\"h-4 w-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};","size_bytes":10174},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/supabase.ts":{"content":"import { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = import.meta.env.VITE_SUPABASE_URL\nconst supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY\n\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Missing Supabase environment variables:', {\n    supabaseUrl: !!supabaseUrl,\n    supabaseAnonKey: !!supabaseAnonKey\n  })\n  throw new Error('Supabase configuration is missing. Please ensure your project is properly connected to Supabase.')\n}\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey)","size_bytes":536},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Auth.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Eye, EyeOff, Bot } from \"lucide-react\";\n\nexport default function Auth() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const { toast } = useToast();\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    // Check if user is already logged in\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      navigate(\"/chat\");\n    }\n  }, [navigate]);\n\n  const handleAuth = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setLoading(true);\n\n    try {\n      if (isLogin) {\n        // Login\n        const response = await fetch('/api/auth/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ email, password })\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          toast({\n            variant: \"destructive\",\n            title: \"Error de autenticación\",\n            description: errorData.error || \"Credenciales inválidas\"\n          });\n          return;\n        }\n\n        const data = await response.json();\n        localStorage.setItem('auth_token', data.token);\n        toast({\n          title: \"¡Bienvenido!\",\n          description: \"Has iniciado sesión exitosamente.\"\n        });\n        navigate(\"/chat\");\n      } else {\n        // Signup\n        if (password !== confirmPassword) {\n          toast({\n            variant: \"destructive\",\n            title: \"Error\",\n            description: \"Las contraseñas no coinciden.\",\n          });\n          return;\n        }\n\n        if (password.length < 6) {\n          toast({\n            variant: \"destructive\",\n            title: \"Error\",\n            description: \"La contraseña debe tener al menos 6 caracteres.\",\n          });\n          return;\n        }\n\n        const response = await fetch('/api/auth/register', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ email, password, username })\n        });\n\n        if (!response.ok) {\n          const errorData = await response.json();\n          toast({\n            variant: \"destructive\",\n            title: \"Error de registro\",\n            description: errorData.error || \"Error al crear la cuenta\"\n          });\n          return;\n        }\n\n        const data = await response.json();\n        localStorage.setItem('auth_token', data.token);\n        toast({\n          title: \"¡Bienvenido!\",\n          description: \"Tu cuenta ha sido creada exitosamente.\"\n        });\n        navigate(\"/chat\");\n      }\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"Ha ocurrido un error inesperado.\",\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-background to-muted flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-md\">\n        <Card className=\"border-border/50 shadow-xl\">\n          <CardHeader className=\"text-center space-y-4\">\n            <div className=\"flex justify-center\">\n              <div className=\"p-3 bg-primary/10 rounded-full\">\n                <Bot className=\"h-8 w-8 text-primary\" />\n              </div>\n            </div>\n            <div>\n              <CardTitle className=\"text-2xl font-bold\">\n                {isLogin ? \"Iniciar Sesión\" : \"Crear Cuenta\"}\n              </CardTitle>\n              <p className=\"text-muted-foreground mt-2\">\n                {isLogin \n                  ? \"Accede a tu asistente de automatización IA\" \n                  : \"Únete a la plataforma de automatización IA\"\n                }\n              </p>\n            </div>\n          </CardHeader>\n\n          <CardContent>\n            <form onSubmit={handleAuth} className=\"space-y-4\">\n              {!isLogin && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"username\">Nombre de usuario</Label>\n                  <Input\n                    id=\"username\"\n                    type=\"text\"\n                    value={username}\n                    onChange={(e) => setUsername(e.target.value)}\n                    placeholder=\"Tu nombre de usuario\"\n                    required={!isLogin}\n                  />\n                </div>\n              )}\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  value={email}\n                  onChange={(e) => setEmail(e.target.value)}\n                  placeholder=\"tu@email.com\"\n                  required\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">Contraseña</Label>\n                <div className=\"relative\">\n                  <Input\n                    id=\"password\"\n                    type={showPassword ? \"text\" : \"password\"}\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    placeholder=\"••••••••\"\n                    required\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"absolute right-2 top-1/2 -translate-y-1/2 h-auto p-1\"\n                    onClick={() => setShowPassword(!showPassword)}\n                  >\n                    {showPassword ? (\n                      <EyeOff className=\"h-4 w-4\" />\n                    ) : (\n                      <Eye className=\"h-4 w-4\" />\n                    )}\n                  </Button>\n                </div>\n              </div>\n\n              {!isLogin && (\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirmar contraseña</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    placeholder=\"••••••••\"\n                    required={!isLogin}\n                  />\n                </div>\n              )}\n\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={loading}\n              >\n                {loading \n                  ? (isLogin ? \"Iniciando sesión...\" : \"Creando cuenta...\")\n                  : (isLogin ? \"Iniciar Sesión\" : \"Crear Cuenta\")\n                }\n              </Button>\n            </form>\n\n            <div className=\"mt-6 text-center\">\n              <Button\n                type=\"button\"\n                variant=\"link\"\n                onClick={() => {\n                  setIsLogin(!isLogin);\n                  setEmail(\"\");\n                  setPassword(\"\");\n                  setConfirmPassword(\"\");\n                  setUsername(\"\");\n                }}\n                className=\"text-sm text-muted-foreground hover:text-primary\"\n              >\n                {isLogin \n                  ? \"¿No tienes cuenta? Regístrate aquí\" \n                  : \"¿Ya tienes cuenta? Inicia sesión aquí\"\n                }\n              </Button>\n            </div>\n\n            <div className=\"mt-4 text-center\">\n              <Button\n                type=\"button\"\n                variant=\"ghost\"\n                onClick={() => navigate(\"/\")}\n                className=\"text-sm\"\n              >\n                Volver al inicio\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":8383},"client/src/pages/BusinessChat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { BusinessChatSidebar } from \"@/components/BusinessChatSidebar\";\nimport { BusinessChatArea } from \"@/components/BusinessChatArea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n}\n\nexport default function BusinessChat() {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [currentChatId, setCurrentChatId] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('auth_token');\n      \n      if (!token) {\n        navigate(\"/auth\");\n        return;\n      }\n\n      try {\n        const response = await fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data.user);\n        } else {\n          localStorage.removeItem('auth_token');\n          navigate(\"/auth\");\n          return;\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('auth_token');\n        navigate(\"/auth\");\n        return;\n      }\n      \n      setLoading(false);\n    };\n\n    checkAuth();\n  }, [navigate]);\n\n  const handleCreateChat = async (title: string = \"Nueva consulta empresarial\") => {\n    if (!user) return;\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        navigate(\"/auth\");\n        return null;\n      }\n\n      const response = await fetch('/api/chat-sessions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ title })\n      });\n\n      if (!response.ok) {\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: \"No se pudo crear la conversación.\",\n        });\n        return null;\n      }\n\n      const data = await response.json();\n      setCurrentChatId(data.id);\n      return data.id;\n    } catch (error) {\n      console.error(\"Error creating chat:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo crear la conversación.\",\n      });\n      return null;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <SidebarProvider>\n      <div className=\"min-h-screen flex w-full\">\n        <BusinessChatSidebar \n          user={user}\n          currentChatId={currentChatId}\n          onChatSelect={setCurrentChatId}\n          onCreateChat={handleCreateChat}\n        />\n        <main className=\"flex-1\">\n          <BusinessChatArea \n            user={user}\n            currentChatId={currentChatId}\n            onCreateChat={handleCreateChat}\n          />\n        </main>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":3472},"client/src/pages/Chat.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { SidebarProvider } from \"@/components/ui/sidebar\";\nimport { ChatSidebar } from \"@/components/ChatSidebar\";\nimport { ChatArea } from \"@/components/ChatArea\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface User {\n  id: string;\n  email: string;\n  username: string;\n}\n\nexport default function Chat() {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [currentChatId, setCurrentChatId] = useState<string | null>(null);\n  const navigate = useNavigate();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('auth_token');\n      \n      if (!token) {\n        navigate(\"/auth\");\n        return;\n      }\n\n      try {\n        const response = await fetch('/api/auth/me', {\n          headers: {\n            'Authorization': `Bearer ${token}`\n          }\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          setUser(data.user);\n        } else {\n          localStorage.removeItem('auth_token');\n          navigate(\"/auth\");\n          return;\n        }\n      } catch (error) {\n        console.error('Auth check failed:', error);\n        localStorage.removeItem('auth_token');\n        navigate(\"/auth\");\n        return;\n      }\n      \n      setLoading(false);\n    };\n\n    checkAuth();\n  }, [navigate]);\n\n  const handleCreateChat = async (title: string = \"Nueva conversación\") => {\n    if (!user) return;\n\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        navigate(\"/auth\");\n        return null;\n      }\n\n      const response = await fetch('/api/chat-sessions', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({ title })\n      });\n\n      if (!response.ok) {\n        toast({\n          variant: \"destructive\",\n          title: \"Error\",\n          description: \"No se pudo crear la conversación.\",\n        });\n        return null;\n      }\n\n      const data = await response.json();\n      setCurrentChatId(data.id);\n      return data.id;\n    } catch (error) {\n      console.error(\"Error creating chat:\", error);\n      toast({\n        variant: \"destructive\",\n        title: \"Error\",\n        description: \"No se pudo crear la conversación.\",\n      });\n      return null;\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"flex items-center justify-center min-h-screen\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n          <p className=\"mt-4 text-muted-foreground\">Cargando...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <SidebarProvider>\n      <div className=\"min-h-screen flex w-full\">\n        <ChatSidebar \n          user={user}\n          currentChatId={currentChatId}\n          onChatSelect={setCurrentChatId}\n          onCreateChat={handleCreateChat}\n        />\n        <main className=\"flex-1\">\n          <ChatArea \n            user={user}\n            currentChatId={currentChatId}\n            onCreateChat={handleCreateChat}\n          />\n        </main>\n      </div>\n    </SidebarProvider>\n  );\n}","size_bytes":3409},"client/src/pages/Index.tsx":{"content":"import { useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CheckCircle, Clock, Code, Upload, Shield, Mail, Calendar, Database, FileText, Bot, Zap, Users, Cpu, Workflow, Brain, Target, ArrowRight, Rocket, MessageCircle, Cog } from \"lucide-react\";\nimport { LeadForm } from \"@/components/LeadForm\";\nimport { AutomationForm } from \"@/components/AutomationForm\";\nimport logoImage from \"@/assets/Captura_de_pantalla_2025-08-21_120039-removebg-preview.png\";\n\nexport default function Index() {\n  useEffect(() => {\n    document.title = \"Fluix AI — Automatiza procesos con IA\";\n    // Structured data\n    const ld = document.createElement(\"script\");\n    ld.type = \"application/ld+json\";\n    ld.innerHTML = JSON.stringify({\n      \"@context\": \"https://schema.org\",\n      \"@type\": \"Organization\",\n      name: \"Fluix AI\",\n      url: \"https://fluix.ai/\",\n      sameAs: [\"https://www.linkedin.com\", \"https://www.tiktok.com\"],\n      slogan: \"Automatiza procesos con agentes de IA sin código\",\n    });\n    document.head.appendChild(ld);\n    return () => { document.head.removeChild(ld); };\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-primary via-primary/90 to-accent text-white font-inter\">\n      {/* Modern Header */}\n      <header className=\"bg-white/10 backdrop-blur-md border-b border-white/20 sticky top-0 z-50\">\n        <div className=\"container mx-auto px-4 py-4 flex justify-between items-center\">\n          <div className=\"flex items-center gap-3\">\n            <img \n              src={logoImage} \n              alt=\"Fluix AI Logo\" \n              className=\"h-10 w-auto\"\n            />\n            <span className=\"text-2xl font-bold bg-gradient-to-r from-white to-white/80 bg-clip-text text-transparent\">\n              Fluix AI\n            </span>\n          </div>\n          <nav className=\"hidden md:flex space-x-8\">\n            <a href=\"#beneficios\" className=\"text-white/80 hover:text-white transition-colors duration-300 font-medium\">Beneficios</a>\n            <a href=\"#como-funciona\" className=\"text-white/80 hover:text-white transition-colors duration-300 font-medium\">Cómo funciona</a>\n            <a href=\"#casos\" className=\"text-white/80 hover:text-white transition-colors duration-300 font-medium\">Casos de uso</a>\n            <a href=\"#precios\" className=\"text-white/80 hover:text-white transition-colors duration-300 font-medium\">Planes</a>\n          </nav>\n          <div className=\"flex gap-3\">\n            <Button \n              onClick={() => window.location.href = '/business-chat'} \n              className=\"bg-white/20 hover:bg-white/30 backdrop-blur-sm border border-white/30 text-white font-semibold\"\n              variant=\"outline\"\n            >\n              <Bot className=\"h-4 w-4 mr-2\" />\n              Consultor IA\n            </Button>\n            <Button \n              onClick={() => document.getElementById('hero-form')?.scrollIntoView({ behavior: 'smooth' })} \n              className=\"bg-accent hover:bg-accent/90 text-white font-semibold\"\n            >\n              Solicitar demo\n            </Button>\n          </div>\n        </div>\n      </header>\n\n      <main>\n        {/* Futuristic Hero Section */}\n        <section className=\"relative overflow-hidden\">\n          {/* Animated Background Elements */}\n          <div className=\"absolute inset-0\">\n            <div className=\"absolute top-20 left-10 w-72 h-72 bg-white/5 rounded-full blur-3xl animate-pulse\"></div>\n            <div className=\"absolute top-40 right-20 w-96 h-96 bg-accent/10 rounded-full blur-3xl animate-pulse delay-1000\"></div>\n            <div className=\"absolute bottom-20 left-1/3 w-64 h-64 bg-white/5 rounded-full blur-3xl animate-pulse delay-2000\"></div>\n          </div>\n          \n          <div className=\"container mx-auto px-4 py-24 relative z-10\">\n            <div className=\"grid lg:grid-cols-2 gap-16 items-center\">\n              <div className=\"space-y-8\">\n                <div className=\"space-y-4\">\n                  <div className=\"inline-flex items-center gap-2 bg-white/10 backdrop-blur-sm px-4 py-2 rounded-full text-sm font-medium\">\n                    <Zap className=\"h-4 w-4 text-accent\" />\n                    IA Empresarial Avanzada\n                  </div>\n                  <h1 className=\"text-5xl md:text-6xl font-bold leading-tight\">\n                    Automatiza tu empresa con{\" \"}\n                    <span className=\"bg-gradient-to-r from-accent to-white bg-clip-text text-transparent\">\n                      Inteligencia Artificial\n                    </span>\n                  </h1>\n                  <p className=\"text-xl text-white/80 max-w-2xl leading-relaxed\">\n                    Transformamos procesos empresariales en flujos inteligentes. Nuestros agentes de IA especializados optimizan operaciones, mejoran la productividad y potencian el crecimiento de tu equipo.\n                  </p>\n                </div>\n\n                <div className=\"grid sm:grid-cols-2 gap-4\">\n                  <div className=\"flex items-center gap-3 bg-white/10 backdrop-blur-sm p-4 rounded-lg\">\n                    <div className=\"bg-accent/20 p-2 rounded-full\">\n                      <Brain className=\"h-5 w-5 text-accent\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">Multi-IA Avanzada</p>\n                      <p className=\"text-sm text-white/70\">ChatGPT + Claude + DeepSeek</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 bg-white/10 backdrop-blur-sm p-4 rounded-lg\">\n                    <div className=\"bg-accent/20 p-2 rounded-full\">\n                      <Users className=\"h-5 w-5 text-accent\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">Para Empresas</p>\n                      <p className=\"text-sm text-white/70\">Equipos más eficientes</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 bg-white/10 backdrop-blur-sm p-4 rounded-lg\">\n                    <div className=\"bg-accent/20 p-2 rounded-full\">\n                      <Workflow className=\"h-5 w-5 text-accent\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">Sin Código</p>\n                      <p className=\"text-sm text-white/70\">Implementación inmediata</p>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center gap-3 bg-white/10 backdrop-blur-sm p-4 rounded-lg\">\n                    <div className=\"bg-accent/20 p-2 rounded-full\">\n                      <Target className=\"h-5 w-5 text-accent\" />\n                    </div>\n                    <div>\n                      <p className=\"font-semibold\">Resultados Medibles</p>\n                      <p className=\"text-sm text-white/70\">ROI comprobado</p>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"flex flex-col sm:flex-row gap-4\">\n                  <Button \n                    onClick={() => document.getElementById('hero-form')?.scrollIntoView({ behavior: 'smooth' })}\n                    size=\"lg\" \n                    className=\"bg-accent hover:bg-accent/90 text-white font-semibold px-8 py-4 text-lg\"\n                  >\n                    Comenzar Ahora\n                    <ArrowRight className=\"h-5 w-5 ml-2\" />\n                  </Button>\n                  <Button \n                    onClick={() => window.location.href = '/business-chat'}\n                    variant=\"outline\" \n                    size=\"lg\"\n                    className=\"border-white/30 text-white hover:bg-white/10 backdrop-blur-sm font-semibold px-8 py-4 text-lg\"\n                  >\n                    <Bot className=\"h-5 w-5 mr-2\" />\n                    Consultar IA Gratis\n                  </Button>\n                </div>\n              </div>\n\n              {/* Modern Form Card */}\n              <div id=\"hero-form\" className=\"bg-white/10 backdrop-blur-md border border-white/20 rounded-3xl p-8 shadow-2xl\">\n                <div className=\"text-center mb-6\">\n                  <div className=\"inline-flex items-center gap-2 bg-accent/20 px-4 py-2 rounded-full text-sm font-medium mb-4\">\n                    <Cpu className=\"h-4 w-4 text-accent\" />\n                    Demo Personalizada\n                  </div>\n                  <h2 className=\"text-2xl font-bold mb-2\">Descubre el Poder de la IA</h2>\n                  <p className=\"text-white/80\">Te mostramos cómo automatizar tu empresa en 30 minutos</p>\n                </div>\n                <div className=\"bg-white/5 rounded-2xl p-6\">\n                  <LeadForm ctaText=\"Solicitar Demo Gratuita\" />\n                </div>\n                <div className=\"text-center mt-4\">\n                  <p className=\"text-sm text-white/60\">✓ Sin compromiso ✓ Consulta especializada ✓ Resultados inmediatos</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Benefits Section */}\n        <section id=\"beneficios\" className=\"bg-white text-primary py-20\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center mb-16\">\n              <div className=\"inline-flex items-center gap-2 bg-primary/10 px-4 py-2 rounded-full text-sm font-medium mb-4\">\n                <Zap className=\"h-4 w-4 text-primary\" />\n                Beneficios Empresariales\n              </div>\n              <h2 className=\"text-4xl font-bold mb-4\">Transforma tu empresa con IA</h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Potencia a tus empleados con automatizaciones inteligentes que liberan tiempo para tareas estratégicas\n              </p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-8\">\n              <div className=\"group hover:scale-105 transition-transform duration-300\">\n                <Card className=\"h-full border-primary/20 hover:border-primary/40 transition-colors duration-300\">\n                  <CardHeader className=\"text-center p-8\">\n                    <div className=\"bg-primary/10 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-primary/20 transition-colors duration-300\">\n                      <Clock className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-xl mb-3\">Implementación Rápida</CardTitle>\n                    <CardDescription className=\"text-base\">\n                      Automatizaciones listas en minutos. Reduce el tiempo de implementación de semanas a horas.\n                    </CardDescription>\n                  </CardHeader>\n                </Card>\n              </div>\n\n              <div className=\"group hover:scale-105 transition-transform duration-300\">\n                <Card className=\"h-full border-primary/20 hover:border-primary/40 transition-colors duration-300\">\n                  <CardHeader className=\"text-center p-8\">\n                    <div className=\"bg-accent/10 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-accent/20 transition-colors duration-300\">\n                      <Users className=\"h-8 w-8 text-accent\" />\n                    </div>\n                    <CardTitle className=\"text-xl mb-3\">Equipos Más Eficientes</CardTitle>\n                    <CardDescription className=\"text-base\">\n                      Libera a tus empleados de tareas repetitivas para que se enfoquen en innovación y crecimiento.\n                    </CardDescription>\n                  </CardHeader>\n                </Card>\n              </div>\n\n              <div className=\"group hover:scale-105 transition-transform duration-300\">\n                <Card className=\"h-full border-primary/20 hover:border-primary/40 transition-colors duration-300\">\n                  <CardHeader className=\"text-center p-8\">\n                    <div className=\"bg-primary/10 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-primary/20 transition-colors duration-300\">\n                      <Brain className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-xl mb-3\">IA Multi-Modelo</CardTitle>\n                    <CardDescription className=\"text-base\">\n                      Combinamos ChatGPT, Claude y DeepSeek para obtener los mejores resultados en cada proceso.\n                    </CardDescription>\n                  </CardHeader>\n                </Card>\n              </div>\n\n              <div className=\"group hover:scale-105 transition-transform duration-300\">\n                <Card className=\"h-full border-primary/20 hover:border-primary/40 transition-colors duration-300\">\n                  <CardHeader className=\"text-center p-8\">\n                    <div className=\"bg-accent/10 w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 group-hover:bg-accent/20 transition-colors duration-300\">\n                      <Shield className=\"h-8 w-8 text-accent\" />\n                    </div>\n                    <CardTitle className=\"text-xl mb-3\">Soporte Especializado</CardTitle>\n                    <CardDescription className=\"text-base\">\n                      Acompañamiento completo desde la implementación hasta la optimización continua.\n                    </CardDescription>\n                  </CardHeader>\n                </Card>\n              </div>\n            </div>\n\n            {/* Stats Section */}\n            <div className=\"mt-20 grid grid-cols-2 md:grid-cols-4 gap-8\">\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-primary mb-2\">80%</div>\n                <p className=\"text-muted-foreground\">Reducción en tareas repetitivas</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">24/7</div>\n                <p className=\"text-muted-foreground\">Operación continua</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-primary mb-2\">15min</div>\n                <p className=\"text-muted-foreground\">Implementación promedio</p>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-4xl font-bold text-accent mb-2\">100+</div>\n                <p className=\"text-muted-foreground\">Empresas automatizadas</p>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* How It Works */}\n        <section id=\"como-funciona\" className=\"bg-gradient-to-br from-primary/5 to-accent/5 py-20\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center mb-16\">\n              <div className=\"inline-flex items-center gap-2 bg-primary/10 px-4 py-2 rounded-full text-sm font-medium mb-4\">\n                <Workflow className=\"h-4 w-4 text-primary\" />\n                Proceso Inteligente\n              </div>\n              <h2 className=\"text-4xl font-bold mb-4 text-primary\">Cómo automatizamos tu empresa</h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Proceso optimizado con IA para crear automatizaciones empresariales en tiempo récord\n              </p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-4 gap-8\">\n              <div className=\"text-center group\">\n                <div className=\"bg-primary/10 w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:bg-primary/20 transition-colors duration-300\">\n                  <div className=\"bg-primary text-white w-12 h-12 rounded-2xl flex items-center justify-center text-xl font-bold\">1</div>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3 text-primary\">Consulta Inicial</h3>\n                <p className=\"text-muted-foreground\">Nuestro consultor IA analiza tus procesos y define los objetivos de automatización</p>\n              </div>\n\n              <div className=\"text-center group\">\n                <div className=\"bg-accent/10 w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:bg-accent/20 transition-colors duration-300\">\n                  <div className=\"bg-accent text-white w-12 h-12 rounded-2xl flex items-center justify-center text-xl font-bold\">2</div>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3 text-accent\">Diseño con IA</h3>\n                <p className=\"text-muted-foreground\">ChatGPT, Claude y DeepSeek crean colaborativamente la solución óptima</p>\n              </div>\n\n              <div className=\"text-center group\">\n                <div className=\"bg-primary/10 w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:bg-primary/20 transition-colors duration-300\">\n                  <div className=\"bg-primary text-white w-12 h-12 rounded-2xl flex items-center justify-center text-xl font-bold\">3</div>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3 text-primary\">Optimización</h3>\n                <p className=\"text-muted-foreground\">Refinamos y probamos cada flujo para máxima eficiencia y confiabilidad</p>\n              </div>\n\n              <div className=\"text-center group\">\n                <div className=\"bg-accent/10 w-20 h-20 rounded-3xl flex items-center justify-center mx-auto mb-6 group-hover:bg-accent/20 transition-colors duration-300\">\n                  <div className=\"bg-accent text-white w-12 h-12 rounded-2xl flex items-center justify-center text-xl font-bold\">4</div>\n                </div>\n                <h3 className=\"text-xl font-semibold mb-3 text-accent\">Implementación</h3>\n                <p className=\"text-muted-foreground\">Entregamos JSON listo para n8n y acompañamos la puesta en marcha</p>\n              </div>\n            </div>\n\n            <div className=\"mt-16 text-center\">\n              <div className=\"bg-white/50 backdrop-blur-sm border border-primary/20 rounded-3xl p-8 inline-block\">\n                <div className=\"flex items-center gap-4 text-lg font-semibold text-primary\">\n                  <Clock className=\"h-6 w-6\" />\n                  Tiempo promedio: 15-30 minutos\n                  <ArrowRight className=\"h-6 w-6 text-accent\" />\n                  <Target className=\"h-6 w-6\" />\n                  Resultado: Automatización funcional\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Use Cases */}\n        <section id=\"casos\" className=\"bg-white py-20\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center mb-16\">\n              <div className=\"inline-flex items-center gap-2 bg-primary/10 px-4 py-2 rounded-full text-sm font-medium mb-4\">\n                <Target className=\"h-4 w-4 text-primary\" />\n                Casos de Éxito\n              </div>\n              <h2 className=\"text-4xl font-bold mb-4 text-primary\">Automatizaciones que transforman empresas</h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Descubre cómo nuestros agentes de IA optimizan operaciones en diferentes sectores\n              </p>\n            </div>\n            \n            <div className=\"grid lg:grid-cols-3 gap-8\">\n              {/* E-commerce */}\n              <div className=\"group\">\n                <Card className=\"h-full border-primary/20 hover:border-primary/40 transition-all duration-300 hover:shadow-xl\">\n                  <CardHeader className=\"p-8\">\n                    <div className=\"bg-primary/10 w-16 h-16 rounded-2xl flex items-center justify-center mb-6 group-hover:bg-primary/20 transition-colors duration-300\">\n                      <Database className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-2xl mb-4 text-primary\">E-commerce</CardTitle>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-accent/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Seguimiento automático</p>\n                          <p className=\"text-sm text-muted-foreground\">Notificaciones inteligentes de pedidos y envíos</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-accent/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Gestión de inventario</p>\n                          <p className=\"text-sm text-muted-foreground\">Control automático de stock y reposición</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-accent/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Recuperación de carritos</p>\n                          <p className=\"text-sm text-muted-foreground\">Campañas automáticas personalizadas</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                </Card>\n              </div>\n\n              {/* Servicios Profesionales */}\n              <div className=\"group\">\n                <Card className=\"h-full border-primary/20 hover:border-primary/40 transition-all duration-300 hover:shadow-xl\">\n                  <CardHeader className=\"p-8\">\n                    <div className=\"bg-accent/10 w-16 h-16 rounded-2xl flex items-center justify-center mb-6 group-hover:bg-accent/20 transition-colors duration-300\">\n                      <Users className=\"h-8 w-8 text-accent\" />\n                    </div>\n                    <CardTitle className=\"text-2xl mb-4 text-accent\">Servicios Profesionales</CardTitle>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-primary/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Programación inteligente</p>\n                          <p className=\"text-sm text-muted-foreground\">Optimización automática de calendarios</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-primary/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Generación de documentos</p>\n                          <p className=\"text-sm text-muted-foreground\">Propuestas y contratos automáticos</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-primary/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-primary\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Seguimiento financiero</p>\n                          <p className=\"text-sm text-muted-foreground\">Control automático de facturas y cobros</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                </Card>\n              </div>\n\n              {/* RRHH y Operaciones */}\n              <div className=\"group\">\n                <Card className=\"h-full border-primary/20 hover:border-primary/40 transition-all duration-300 hover:shadow-xl\">\n                  <CardHeader className=\"p-8\">\n                    <div className=\"bg-primary/10 w-16 h-16 rounded-2xl flex items-center justify-center mb-6 group-hover:bg-primary/20 transition-colors duration-300\">\n                      <Workflow className=\"h-8 w-8 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-2xl mb-4 text-primary\">RRHH y Operaciones</CardTitle>\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-accent/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Onboarding automático</p>\n                          <p className=\"text-sm text-muted-foreground\">Integración perfecta de nuevos empleados</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-accent/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Evaluaciones inteligentes</p>\n                          <p className=\"text-sm text-muted-foreground\">Análisis automático de rendimiento</p>\n                        </div>\n                      </div>\n                      <div className=\"flex items-start gap-3\">\n                        <div className=\"bg-accent/20 p-1 rounded-full mt-1\">\n                          <CheckCircle className=\"h-4 w-4 text-accent\" />\n                        </div>\n                        <div>\n                          <p className=\"font-semibold\">Gestión de procesos</p>\n                          <p className=\"text-sm text-muted-foreground\">Optimización de flujos operativos</p>\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                </Card>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Testimonials */}\n        <section className=\"bg-muted/50 py-16\">\n          <div className=\"container mx-auto px-4\">\n            <h2 className=\"text-3xl font-bold text-center mb-10\">Lo que dicen nuestros clientes</h2>\n            <div className=\"grid md:grid-cols-3 gap-6\">\n              <Card><CardHeader><CardDescription>“Implementamos en 2 días lo que antes tardaba semanas.”</CardDescription><CardTitle className=\"mt-2\">María G.</CardTitle></CardHeader></Card>\n              <Card><CardHeader><CardDescription>“El JSON para n8n funcionó a la primera. Ahorro brutal.”</CardDescription><CardTitle className=\"mt-2\">Carlos R.</CardTitle></CardHeader></Card>\n              <Card><CardHeader><CardDescription>“Soporte excelente y resultados inmediatos.”</CardDescription><CardTitle className=\"mt-2\">Ana S.</CardTitle></CardHeader></Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Getting Started */}\n        <section id=\"precios\" className=\"py-20 bg-gradient-to-br from-accent/5 to-primary/10\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"text-center mb-16\">\n              <div className=\"inline-flex items-center gap-2 bg-accent/10 px-4 py-2 rounded-full text-sm font-medium mb-4\">\n                <Rocket className=\"h-4 w-4 text-accent\" />\n                Proceso de Implementación\n              </div>\n              <h2 className=\"text-4xl font-bold mb-4 text-primary\">Cómo empezar con Fluix AI</h2>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n                Un proceso simple y estructurado para transformar tu empresa con automatizaciones inteligentes\n              </p>\n            </div>\n            \n            <div className=\"grid md:grid-cols-3 gap-8\">\n              <Card className=\"border-primary/20 hover:border-primary/40 transition-all duration-300 hover:shadow-lg hover:scale-105\">\n                <CardHeader className=\"p-8 text-center\">\n                  <div className=\"bg-primary/10 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n                    <MessageCircle className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-xl mb-3\">1. Consultoría IA gratuita</CardTitle>\n                  <CardDescription className=\"text-base\">\n                    Analizamos tus procesos actuales, identificamos oportunidades de automatización y definimos el alcance del proyecto sin costo.\n                  </CardDescription>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"border-accent/20 hover:border-accent/40 transition-all duration-300 hover:shadow-lg hover:scale-105\">\n                <CardHeader className=\"p-8 text-center\">\n                  <div className=\"bg-accent/10 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n                    <Cog className=\"h-8 w-8 text-accent\" />\n                  </div>\n                  <CardTitle className=\"text-xl mb-3\">2. Desarrollo e implementación</CardTitle>\n                  <CardDescription className=\"text-base\">\n                    Creamos agentes de IA personalizados y automatizaciones con paquetes mensuales que incluyen soporte continuo y optimizaciones.\n                  </CardDescription>\n                </CardHeader>\n              </Card>\n\n              <Card className=\"border-primary/20 hover:border-primary/40 transition-all duration-300 hover:shadow-lg hover:scale-105\">\n                <CardHeader className=\"p-8 text-center\">\n                  <div className=\"bg-primary/10 p-4 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center\">\n                    <Target className=\"h-8 w-8 text-primary\" />\n                  </div>\n                  <CardTitle className=\"text-xl mb-3\">3. Escalamiento empresarial</CardTitle>\n                  <CardDescription className=\"text-base\">\n                    Planes personalizados que se adaptan al crecimiento de tu empresa con soluciones escalables y soporte prioritario.\n                  </CardDescription>\n                </CardHeader>\n              </Card>\n            </div>\n          </div>\n        </section>\n\n        {/* Automation Form */}\n        <section className=\"py-16 bg-muted/30\">\n          <div className=\"container mx-auto px-4 max-w-4xl\">\n            <div className=\"text-center mb-8\">\n              <h2 className=\"text-3xl font-bold mb-4\">Crea tu Automatización</h2>\n              <p className=\"text-muted-foreground\">Describe lo que quieres automatizar y generamos el workflow de n8n para ti</p>\n            </div>\n            <AutomationForm />\n          </div>\n        </section>\n\n        {/* CTA final */}\n        <section className=\"bg-primary text-primary-foreground py-16\">\n          <div className=\"container mx-auto px-4\">\n            <div className=\"max-w-3xl mx-auto\">\n              <h2 className=\"text-3xl font-bold text-center mb-6\">¿Listo para empezar?</h2>\n              <p className=\"text-center mb-6 opacity-90\">Solicita tu demo o cuéntanos qué quieres automatizar.</p>\n              <div className=\"bg-card text-card-foreground border rounded-lg p-6\">\n                <LeadForm ctaText=\"Quiero mi demo\" />\n              </div>\n            </div>\n          </div>\n        </section>\n      </main>\n\n      <footer className=\"border-t py-12\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <span className=\"text-xl font-bold font-playfair\">Fluix AI</span>\n          </div>\n          <p className=\"text-muted-foreground mb-4\">Automatizaciones con IA para cualquier negocio</p>\n          <div className=\"flex justify-center space-x-6 text-sm text-muted-foreground\">\n            <a href=\"#\" className=\"hover:text-foreground\">Términos</a>\n            <a href=\"#\" className=\"hover:text-foreground\">Privacidad</a>\n            <a href=\"https://www.linkedin.com\" className=\"hover:text-foreground\" target=\"_blank\" rel=\"noreferrer\">LinkedIn</a>\n            <a href=\"https://www.tiktok.com\" className=\"hover:text-foreground\" target=\"_blank\" rel=\"noreferrer\">TikTok</a>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":33022},"client/src/pages/NotFound.tsx":{"content":"import { useLocation } from \"react-router-dom\";\nimport { useEffect } from \"react\";\n\nconst NotFound = () => {\n  const location = useLocation();\n\n  useEffect(() => {\n    console.error(\n      \"404 Error: User attempted to access non-existent route:\",\n      location.pathname\n    );\n  }, [location.pathname]);\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-100\">\n      <div className=\"text-center\">\n        <h1 className=\"text-4xl font-bold mb-4\">404</h1>\n        <p className=\"text-xl text-gray-600 mb-4\">Oops! Page not found</p>\n        <a href=\"/\" className=\"text-blue-500 hover:text-blue-700 underline\">\n          Return to Home\n        </a>\n      </div>\n    </div>\n  );\n};\n\nexport default NotFound;\n","size_bytes":739},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"import * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1405},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:size-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2701},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\nimport { DayPicker } from \"react-day-picker\";\n\nimport { cn } from \"@/lib/utils\";\nimport { buttonVariants } from \"@/components/ui/button\";\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>;\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ..._props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ..._props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  );\n}\nCalendar.displayName = \"Calendar\";\n\nexport { Calendar };\n","size_bytes":2620},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1877},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"import * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10466},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"import * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":315},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4879},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7246},"client/src/components/ui/dialog.tsx":{"content":"import * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3835},"client/src/components/ui/drawer.tsx":{"content":"import * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3007},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7295},"client/src/components/ui/form.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  ControllerProps,\n  FieldPath,\n  FieldValues,\n  FormProvider,\n  useFormContext,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message) : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4085},"client/src/components/ui/hover-card.tsx":{"content":"import * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1184},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"import * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst MenubarMenu = MenubarPrimitive.Menu\n\nconst MenubarGroup = MenubarPrimitive.Group\n\nconst MenubarPortal = MenubarPrimitive.Portal\n\nconst MenubarSub = MenubarPrimitive.Sub\n\nconst MenubarRadioGroup = MenubarPrimitive.RadioGroup\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":7974},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5046},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1230},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"import { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1709},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"import * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5615},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"import * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n  VariantProps<typeof sheetVariants> { }\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet, SheetClose,\n  SheetContent, SheetDescription, SheetFooter, SheetHeader, SheetOverlay, SheetPortal, SheetTitle, SheetTrigger\n}\n\n","size_bytes":4250},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport { Sheet, SheetContent } from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar:state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden md:block text-sidebar-foreground\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex min-h-svh flex-1 flex-col bg-background\",\n        \"peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"rounded-md h-8 flex gap-2 px-2 items-center\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 flex-1 max-w-[--skeleton-width]\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23367},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/sonner.tsx":{"content":"import { useTheme } from \"next-themes\"\nimport { Toaster as Sonner, toast } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster, toast }\n","size_bytes":894},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":772},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"import * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1739},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3\",\n        sm: \"h-9 px-2.5\",\n        lg: \"h-11 px-5\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1435},"client/src/components/ui/tooltip.tsx":{"content":"import * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1145},"client/src/components/ui/use-toast.ts":{"content":"import { useToast, toast } from \"@/hooks/use-toast\";\n\nexport { useToast, toast };\n","size_bytes":82},"client/src/integrations/supabase/client.ts":{"content":"// Local API client to replace Supabase functionality\n// Import this client like: import { localApi } from \"@/integrations/supabase/client\";\n\nconst API_BASE_URL = '';\n\ninterface User {\n  id: string;\n  email: string;\n  username?: string;\n}\n\ninterface AuthResponse {\n  user: User;\n  token: string;\n}\n\nclass LocalApiClient {\n  private token: string | null = null;\n\n  constructor() {\n    this.token = localStorage.getItem('auth_token');\n  }\n\n  private getHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      ...(this.token && { 'Authorization': `Bearer ${this.token}` })\n    };\n  }\n\n  // Auth methods\n  async signUp(email: string, password: string, username?: string) {\n    const response = await fetch(`${API_BASE_URL}/api/auth/register`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ email, password, username })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Registration failed');\n    }\n\n    const data: AuthResponse = await response.json();\n    this.token = data.token;\n    localStorage.setItem('auth_token', data.token);\n    return { data: { user: data.user }, error: null };\n  }\n\n  async signInWithPassword(email: string, password: string) {\n    const response = await fetch(`${API_BASE_URL}/api/auth/login`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ email, password })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Login failed');\n    }\n\n    const data: AuthResponse = await response.json();\n    this.token = data.token;\n    localStorage.setItem('auth_token', data.token);\n    return { data: { user: data.user }, error: null };\n  }\n\n  async signOut() {\n    this.token = null;\n    localStorage.removeItem('auth_token');\n    return { error: null };\n  }\n\n  async getUser() {\n    if (!this.token) {\n      return { data: { user: null }, error: null };\n    }\n\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/me`, {\n        headers: this.getHeaders()\n      });\n\n      if (!response.ok) {\n        if (response.status === 401) {\n          this.token = null;\n          localStorage.removeItem('auth_token');\n          return { data: { user: null }, error: null };\n        }\n        throw new Error('Failed to get user');\n      }\n\n      const data = await response.json();\n      return { data: { user: data.user }, error: null };\n    } catch (error) {\n      return { data: { user: null }, error };\n    }\n  }\n\n  // Database methods\n  from(table: string) {\n    return {\n      select: (columns = '*') => ({\n        eq: (column: string, value: any) => ({\n          single: async () => {\n            const response = await fetch(`${API_BASE_URL}/api/${table}?${column}=${value}`, {\n              headers: this.getHeaders()\n            });\n            if (!response.ok) throw new Error('Failed to fetch');\n            const data = await response.json();\n            return { data: data[0] || null, error: null };\n          }\n        }),\n        order: (column: string, options?: { ascending?: boolean }) => ({\n          limit: (count: number) => this.executeSelect(table, columns, { orderBy: column, ascending: options?.ascending, limit: count })\n        }),\n        limit: (count: number) => this.executeSelect(table, columns, { limit: count })\n      }),\n      insert: (values: any) => ({\n        select: async () => {\n          const response = await fetch(`${API_BASE_URL}/api/${table}`, {\n            method: 'POST',\n            headers: this.getHeaders(),\n            body: JSON.stringify(values)\n          });\n          if (!response.ok) throw new Error('Failed to insert');\n          const data = await response.json();\n          return { data, error: null };\n        }\n      }),\n      update: (values: any) => ({\n        eq: (column: string, value: any) => ({\n          select: async () => {\n            const response = await fetch(`${API_BASE_URL}/api/${table}/${value}`, {\n              method: 'PUT',\n              headers: this.getHeaders(),\n              body: JSON.stringify(values)\n            });\n            if (!response.ok) throw new Error('Failed to update');\n            const data = await response.json();\n            return { data, error: null };\n          }\n        })\n      }),\n      delete: () => ({\n        eq: (column: string, value: any) => ({\n          select: async () => {\n            const response = await fetch(`${API_BASE_URL}/api/${table}/${value}`, {\n              method: 'DELETE',\n              headers: this.getHeaders()\n            });\n            if (!response.ok) throw new Error('Failed to delete');\n            return { data: null, error: null };\n          }\n        })\n      })\n    };\n  }\n\n  private async executeSelect(table: string, columns: string, options: any = {}) {\n    const params = new URLSearchParams();\n    if (options.limit) params.append('limit', options.limit.toString());\n    if (options.orderBy) params.append('orderBy', options.orderBy);\n    if (options.ascending !== undefined) params.append('ascending', options.ascending.toString());\n\n    const response = await fetch(`${API_BASE_URL}/api/${table}?${params}`, {\n      headers: this.getHeaders()\n    });\n    \n    if (!response.ok) throw new Error('Failed to fetch');\n    const data = await response.json();\n    return { data, error: null };\n  }\n\n  // Chat specific methods\n  async sendMessage(message: string, sessionId: string = 'landing-page-chat') {\n    const response = await fetch(`${API_BASE_URL}/api/chat`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ message, sessionId })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to send message');\n    }\n\n    return await response.json();\n  }\n\n  async sendLead(name: string, email: string, details: string) {\n    const response = await fetch(`${API_BASE_URL}/api/send-lead`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ name, email, details })\n    });\n\n    if (!response.ok) {\n      const error = await response.json();\n      throw new Error(error.error || 'Failed to send lead');\n    }\n\n    return await response.json();\n  }\n\n  // Auth state management\n  get auth() {\n    return {\n      getUser: () => this.getUser(),\n      signUp: (options: { email: string; password: string; options?: { data?: { username?: string } } }) => \n        this.signUp(options.email, options.password, options.options?.data?.username),\n      signInWithPassword: (options: { email: string; password: string }) => \n        this.signInWithPassword(options.email, options.password),\n      signOut: () => this.signOut(),\n      onAuthStateChange: (callback: (event: string, session: any) => void) => {\n        // For compatibility with existing code, but we'll handle auth differently\n        const checkAuth = async () => {\n          const { data } = await this.getUser();\n          callback(data.user ? 'SIGNED_IN' : 'SIGNED_OUT', data.user ? { user: data.user } : null);\n        };\n        checkAuth();\n        return { data: { subscription: { unsubscribe: () => {} } } };\n      }\n    };\n  }\n}\n\n// Export the client instance\nexport const supabase = new LocalApiClient();\n\n// For compatibility, also export as localApi\nexport const localApi = supabase;","size_bytes":7403},"client/src/integrations/supabase/types.ts":{"content":"export type Json =\n  | string\n  | number\n  | boolean\n  | null\n  | { [key: string]: Json | undefined }\n  | Json[]\n\nexport type Database = {\n  // Allows to automatically instantiate createClient with right options\n  // instead of createClient<Database, { PostgrestVersion: 'XX' }>(URL, KEY)\n  __InternalSupabase: {\n    PostgrestVersion: \"13.0.4\"\n  }\n  public: {\n    Tables: {\n      automations: {\n        Row: {\n          created_at: string\n          id: string\n          prompt: string\n          status: string | null\n          title: string | null\n          user_id: string | null\n          workflow_json: Json\n        }\n        Insert: {\n          created_at?: string\n          id?: string\n          prompt: string\n          status?: string | null\n          title?: string | null\n          user_id?: string | null\n          workflow_json: Json\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          prompt?: string\n          status?: string | null\n          title?: string | null\n          user_id?: string | null\n          workflow_json?: Json\n        }\n        Relationships: []\n      }\n      chat_sessions: {\n        Row: {\n          created_at: string\n          id: string\n          title: string\n          updated_at: string\n          user_id: string\n        }\n        Insert: {\n          created_at?: string\n          id?: string\n          title: string\n          updated_at?: string\n          user_id: string\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          title?: string\n          updated_at?: string\n          user_id?: string\n        }\n        Relationships: []\n      }\n      messages: {\n        Row: {\n          ai_type: string | null\n          chat_session_id: string\n          content: string\n          created_at: string\n          id: string\n          role: string | null\n          sender: string\n          workflow_error: string | null\n          workflow_id: string | null\n          workflow_status: string | null\n        }\n        Insert: {\n          ai_type?: string | null\n          chat_session_id: string\n          content: string\n          created_at?: string\n          id?: string\n          role?: string | null\n          sender: string\n          workflow_error?: string | null\n          workflow_id?: string | null\n          workflow_status?: string | null\n        }\n        Update: {\n          ai_type?: string | null\n          chat_session_id?: string\n          content?: string\n          created_at?: string\n          id?: string\n          role?: string | null\n          sender?: string\n          workflow_error?: string | null\n          workflow_id?: string | null\n          workflow_status?: string | null\n        }\n        Relationships: [\n          {\n            foreignKeyName: \"messages_chat_session_id_fkey\"\n            columns: [\"chat_session_id\"]\n            isOneToOne: false\n            referencedRelation: \"chat_sessions\"\n            referencedColumns: [\"id\"]\n          },\n        ]\n      }\n      \"n8n api\": {\n        Row: {\n          created_at: string\n          id: number\n        }\n        Insert: {\n          created_at?: string\n          id?: number\n        }\n        Update: {\n          created_at?: string\n          id?: number\n        }\n        Relationships: []\n      }\n      profiles: {\n        Row: {\n          created_at: string\n          id: string\n          updated_at: string\n          user_id: string\n          username: string | null\n        }\n        Insert: {\n          created_at?: string\n          id?: string\n          updated_at?: string\n          user_id: string\n          username?: string | null\n        }\n        Update: {\n          created_at?: string\n          id?: string\n          updated_at?: string\n          user_id?: string\n          username?: string | null\n        }\n        Relationships: []\n      }\n      templates: {\n        Row: {\n          category: string\n          created_at: string\n          description: string | null\n          id: string\n          is_active: boolean\n          keywords: string[] | null\n          name: string\n          subcategory: string | null\n          template_json: Json\n          updated_at: string\n        }\n        Insert: {\n          category: string\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_active?: boolean\n          keywords?: string[] | null\n          name: string\n          subcategory?: string | null\n          template_json: Json\n          updated_at?: string\n        }\n        Update: {\n          category?: string\n          created_at?: string\n          description?: string | null\n          id?: string\n          is_active?: boolean\n          keywords?: string[] | null\n          name?: string\n          subcategory?: string | null\n          template_json?: Json\n          updated_at?: string\n        }\n        Relationships: []\n      }\n      workflow_executions: {\n        Row: {\n          created_at: string\n          error_message: string | null\n          execution_time_ms: number | null\n          id: string\n          input_data: Json | null\n          output_data: Json | null\n          status: string\n          step_name: string\n          step_number: number\n          workflow_id: string\n        }\n        Insert: {\n          created_at?: string\n          error_message?: string | null\n          execution_time_ms?: number | null\n          id?: string\n          input_data?: Json | null\n          output_data?: Json | null\n          status?: string\n          step_name: string\n          step_number: number\n          workflow_id: string\n        }\n        Update: {\n          created_at?: string\n          error_message?: string | null\n          execution_time_ms?: number | null\n          id?: string\n          input_data?: Json | null\n          output_data?: Json | null\n          status?: string\n          step_name?: string\n          step_number?: number\n          workflow_id?: string\n        }\n        Relationships: []\n      }\n      workflows: {\n        Row: {\n          created_at: string\n          description: string | null\n          id: string\n          status: string\n          template_used: string | null\n          title: string\n          updated_at: string\n          user_id: string\n          validation_errors: Json | null\n          workflow_json: Json\n        }\n        Insert: {\n          created_at?: string\n          description?: string | null\n          id?: string\n          status?: string\n          template_used?: string | null\n          title: string\n          updated_at?: string\n          user_id: string\n          validation_errors?: Json | null\n          workflow_json: Json\n        }\n        Update: {\n          created_at?: string\n          description?: string | null\n          id?: string\n          status?: string\n          template_used?: string | null\n          title?: string\n          updated_at?: string\n          user_id?: string\n          validation_errors?: Json | null\n          workflow_json?: Json\n        }\n        Relationships: []\n      }\n    }\n    Views: {\n      [_ in never]: never\n    }\n    Functions: {\n      [_ in never]: never\n    }\n    Enums: {\n      [_ in never]: never\n    }\n    CompositeTypes: {\n      [_ in never]: never\n    }\n  }\n}\n\ntype DatabaseWithoutInternals = Omit<Database, \"__InternalSupabase\">\n\ntype DefaultSchema = DatabaseWithoutInternals[Extract<keyof Database, \"public\">]\n\nexport type Tables<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof (DefaultSchema[\"Tables\"] & DefaultSchema[\"Views\"])\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n        DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? (DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"] &\n      DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Views\"])[TableName] extends {\n      Row: infer R\n    }\n    ? R\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])\n    ? (DefaultSchema[\"Tables\"] &\n        DefaultSchema[\"Views\"])[DefaultSchemaTableNameOrOptions] extends {\n        Row: infer R\n      }\n      ? R\n      : never\n    : never\n\nexport type TablesInsert<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Insert: infer I\n    }\n    ? I\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Insert: infer I\n      }\n      ? I\n      : never\n    : never\n\nexport type TablesUpdate<\n  DefaultSchemaTableNameOrOptions extends\n    | keyof DefaultSchema[\"Tables\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  TableName extends DefaultSchemaTableNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"]\n    : never = never,\n> = DefaultSchemaTableNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaTableNameOrOptions[\"schema\"]][\"Tables\"][TableName] extends {\n      Update: infer U\n    }\n    ? U\n    : never\n  : DefaultSchemaTableNameOrOptions extends keyof DefaultSchema[\"Tables\"]\n    ? DefaultSchema[\"Tables\"][DefaultSchemaTableNameOrOptions] extends {\n        Update: infer U\n      }\n      ? U\n      : never\n    : never\n\nexport type Enums<\n  DefaultSchemaEnumNameOrOptions extends\n    | keyof DefaultSchema[\"Enums\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  EnumName extends DefaultSchemaEnumNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"]\n    : never = never,\n> = DefaultSchemaEnumNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[DefaultSchemaEnumNameOrOptions[\"schema\"]][\"Enums\"][EnumName]\n  : DefaultSchemaEnumNameOrOptions extends keyof DefaultSchema[\"Enums\"]\n    ? DefaultSchema[\"Enums\"][DefaultSchemaEnumNameOrOptions]\n    : never\n\nexport type CompositeTypes<\n  PublicCompositeTypeNameOrOptions extends\n    | keyof DefaultSchema[\"CompositeTypes\"]\n    | { schema: keyof DatabaseWithoutInternals },\n  CompositeTypeName extends PublicCompositeTypeNameOrOptions extends {\n    schema: keyof DatabaseWithoutInternals\n  }\n    ? keyof DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"]\n    : never = never,\n> = PublicCompositeTypeNameOrOptions extends {\n  schema: keyof DatabaseWithoutInternals\n}\n  ? DatabaseWithoutInternals[PublicCompositeTypeNameOrOptions[\"schema\"]][\"CompositeTypes\"][CompositeTypeName]\n  : PublicCompositeTypeNameOrOptions extends keyof DefaultSchema[\"CompositeTypes\"]\n    ? DefaultSchema[\"CompositeTypes\"][PublicCompositeTypeNameOrOptions]\n    : never\n\nexport const Constants = {\n  public: {\n    Enums: {},\n  },\n} as const\n","size_bytes":11691},"client/src/components/WorkflowComplexityVisualization.tsx":{"content":"import React, { useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { \n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { \n  BarChart3, \n  GitBranch, \n  Zap, \n  AlertCircle, \n  Shield, \n  Database, \n  ExternalLink,\n  Info,\n  TrendingUp,\n  Activity\n} from 'lucide-react';\nimport { \n  calculateWorkflowComplexity, \n  ComplexityMetrics, \n  WorkflowData,\n  getComplexityColor,\n  getComplexityIcon \n} from '@/utils/workflowComplexity';\n\ninterface WorkflowComplexityVisualizationProps {\n  workflowData: WorkflowData;\n  showDetailedView?: boolean;\n  className?: string;\n}\n\nconst ComplexityFactorCard: React.FC<{\n  icon: React.ReactNode;\n  title: string;\n  value: number;\n  maxValue: number;\n  description: string;\n  color: string;\n}> = ({ icon, title, value, maxValue, description, color }) => {\n  const percentage = Math.min((value / maxValue) * 100, 100);\n  \n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Card className=\"cursor-help hover:shadow-md transition-shadow duration-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3 mb-2\">\n                <div className={`p-2 rounded-lg ${color}`}>\n                  {icon}\n                </div>\n                <div className=\"flex-1\">\n                  <h4 className=\"font-medium text-sm\">{title}</h4>\n                  <p className=\"text-2xl font-bold\">{value}</p>\n                </div>\n              </div>\n              <Progress value={percentage} className=\"h-2\" />\n            </CardContent>\n          </Card>\n        </TooltipTrigger>\n        <TooltipContent side=\"top\" className=\"max-w-xs\">\n          <p className=\"font-medium\">{title}</p>\n          <p className=\"text-sm text-muted-foreground mt-1\">{description}</p>\n          <p className=\"text-sm mt-1\">Current: {value} | Impact: {percentage.toFixed(0)}%</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  );\n};\n\nexport const WorkflowComplexityVisualization: React.FC<WorkflowComplexityVisualizationProps> = ({\n  workflowData,\n  showDetailedView = false,\n  className = ''\n}) => {\n  const [expandedView, setExpandedView] = useState(showDetailedView);\n  const complexity = calculateWorkflowComplexity(workflowData);\n\n  // Simple view for inline display\n  if (!expandedView) {\n    return (\n      <TooltipProvider>\n        <Tooltip>\n          <TooltipTrigger asChild>\n            <div \n              className={`inline-flex items-center space-x-2 cursor-pointer ${className}`}\n              onClick={() => setExpandedView(true)}\n            >\n              <Badge \n                variant=\"outline\" \n                className={`${getComplexityColor(complexity.level)} font-medium`}\n              >\n                <span className=\"mr-1\">{getComplexityIcon(complexity.level)}</span>\n                {complexity.level.charAt(0).toUpperCase() + complexity.level.slice(1)}\n                <span className=\"ml-1 text-xs\">({complexity.totalScore})</span>\n              </Badge>\n              <Info className=\"h-4 w-4 text-muted-foreground\" />\n            </div>\n          </TooltipTrigger>\n          <TooltipContent side=\"top\" className=\"max-w-sm\">\n            <div className=\"space-y-2\">\n              <p className=\"font-medium\">Workflow Complexity: {complexity.level}</p>\n              <p className=\"text-sm\">Score: {complexity.totalScore}/120+</p>\n              <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                <div>Nodes: {complexity.factors.nodeCount}</div>\n                <div>Services: {complexity.factors.externalServices}</div>\n                <div>Logic: {complexity.factors.conditionalLogic}</div>\n                <div>Transforms: {complexity.factors.dataTransformations}</div>\n              </div>\n              <p className=\"text-xs text-muted-foreground mt-2\">\n                Click for detailed analysis\n              </p>\n            </div>\n          </TooltipContent>\n        </Tooltip>\n      </TooltipProvider>\n    );\n  }\n\n  // Detailed view\n  return (\n    <div className={`space-y-4 ${className}`}>\n      {/* Header with overall complexity */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <Activity className=\"h-5 w-5\" />\n              <span>Workflow Complexity Analysis</span>\n            </CardTitle>\n            <button\n              onClick={() => setExpandedView(false)}\n              className=\"text-muted-foreground hover:text-foreground\"\n            >\n              ×\n            </button>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center space-x-6 mb-4\">\n            <div className=\"text-center\">\n              <div className=\"text-4xl mb-1\">{getComplexityIcon(complexity.level)}</div>\n              <Badge className={`${getComplexityColor(complexity.level)} font-medium`}>\n                {complexity.level.toUpperCase()}\n              </Badge>\n            </div>\n            <div className=\"flex-1\">\n              <div className=\"flex items-baseline space-x-2 mb-2\">\n                <span className=\"text-3xl font-bold\">{complexity.totalScore}</span>\n                <span className=\"text-muted-foreground\">/ 120+ points</span>\n              </div>\n              <Progress \n                value={Math.min((complexity.totalScore / 120) * 100, 100)} \n                className=\"h-3\" \n              />\n              <p className=\"text-sm text-muted-foreground mt-2\">\n                Based on {complexity.factors.nodeCount} nodes and {complexity.factors.nodeTypes} node types\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Complexity Factors Grid */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        <ComplexityFactorCard\n          icon={<BarChart3 className=\"h-4 w-4\" />}\n          title=\"Node Count\"\n          value={complexity.factors.nodeCount}\n          maxValue={20}\n          description=\"Total number of workflow nodes. More nodes typically indicate higher complexity and potential maintenance overhead.\"\n          color=\"bg-blue-100 text-blue-600\"\n        />\n\n        <ComplexityFactorCard\n          icon={<GitBranch className=\"h-4 w-4\" />}\n          title=\"Connections\"\n          value={complexity.factors.connections}\n          maxValue={30}\n          description=\"Number of connections between nodes. Complex routing and branching increases the difficulty of understanding workflow flow.\"\n          color=\"bg-purple-100 text-purple-600\"\n        />\n\n        <ComplexityFactorCard\n          icon={<Zap className=\"h-4 w-4\" />}\n          title=\"Conditional Logic\"\n          value={complexity.factors.conditionalLogic}\n          maxValue={10}\n          description=\"IF statements, switches, and filters that create branching logic. These require careful testing and validation.\"\n          color=\"bg-orange-100 text-orange-600\"\n        />\n\n        <ComplexityFactorCard\n          icon={<Shield className=\"h-4 w-4\" />}\n          title=\"Error Handling\"\n          value={complexity.factors.errorHandling}\n          maxValue={15}\n          description=\"Nodes with error handling and continue-on-fail settings. Proper error handling improves workflow reliability.\"\n          color=\"bg-green-100 text-green-600\"\n        />\n\n        <ComplexityFactorCard\n          icon={<Database className=\"h-4 w-4\" />}\n          title=\"Data Transforms\"\n          value={complexity.factors.dataTransformations}\n          maxValue={10}\n          description=\"Set, Function, and Code nodes that manipulate data. Complex transformations can be hard to debug and maintain.\"\n          color=\"bg-indigo-100 text-indigo-600\"\n        />\n\n        <ComplexityFactorCard\n          icon={<ExternalLink className=\"h-4 w-4\" />}\n          title=\"External Services\"\n          value={complexity.factors.externalServices}\n          maxValue={8}\n          description=\"Number of different external APIs and services. Each service adds potential failure points and rate limit considerations.\"\n          color=\"bg-teal-100 text-teal-600\"\n        />\n      </div>\n\n      {/* Recommendations */}\n      {complexity.recommendations.length > 0 && (\n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"flex items-center space-x-2\">\n              <TrendingUp className=\"h-5 w-5\" />\n              <span>Optimization Recommendations</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              {complexity.recommendations.map((recommendation, index) => (\n                <div key={index} className=\"flex items-start space-x-2\">\n                  <AlertCircle className=\"h-4 w-4 text-blue-500 mt-0.5 flex-shrink-0\" />\n                  <p className=\"text-sm text-muted-foreground\">{recommendation}</p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Complexity Breakdown */}\n      <Card>\n        <CardHeader className=\"pb-3\">\n          <CardTitle>Complexity Breakdown</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium\">Total Nodes:</span>\n                <span className=\"ml-2\">{complexity.factors.nodeCount}</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Unique Types:</span>\n                <span className=\"ml-2\">{complexity.factors.nodeTypes}</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Total Connections:</span>\n                <span className=\"ml-2\">{complexity.factors.connections}</span>\n              </div>\n              <div>\n                <span className=\"font-medium\">Logic Branches:</span>\n                <span className=\"ml-2\">{complexity.factors.conditionalLogic}</span>\n              </div>\n            </div>\n            \n            <div className=\"mt-4 p-3 bg-muted rounded-lg\">\n              <p className=\"text-xs text-muted-foreground\">\n                <strong>Complexity Levels:</strong> Simple (0-20) | Moderate (21-50) | Complex (51-100) | Advanced (100+)\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default WorkflowComplexityVisualization;","size_bytes":10721},"client/src/utils/workflowComplexity.ts":{"content":"/**\n * Workflow Complexity Analysis Utility\n * Analyzes n8n workflow JSON to calculate complexity scores\n */\n\nexport interface ComplexityMetrics {\n  totalScore: number;\n  level: 'simple' | 'moderate' | 'complex' | 'advanced';\n  factors: {\n    nodeCount: number;\n    nodeTypes: number;\n    connections: number;\n    conditionalLogic: number;\n    errorHandling: number;\n    dataTransformations: number;\n    externalServices: number;\n  };\n  recommendations: string[];\n}\n\nexport interface WorkflowNode {\n  id?: string;\n  name: string;\n  type: string;\n  parameters?: any;\n  continueOnFail?: boolean;\n  typeVersion?: number;\n  position?: [number, number];\n}\n\nexport interface WorkflowConnections {\n  [nodeName: string]: {\n    main?: Array<Array<{ node: string; type: string; index: number }>>;\n    error?: Array<Array<{ node: string; type: string; index: number }>>;\n  };\n}\n\nexport interface WorkflowData {\n  nodes: WorkflowNode[];\n  connections?: WorkflowConnections;\n  name?: string;\n}\n\n/**\n * Node type complexity weights\n */\nconst NODE_COMPLEXITY_WEIGHTS: Record<string, number> = {\n  // Triggers (simple)\n  'n8n-nodes-base.start': 1,\n  'n8n-nodes-base.webhook': 2,\n  'n8n-nodes-base.cron': 2,\n  'n8n-nodes-base.manualTrigger': 1,\n\n  // Basic actions\n  'n8n-nodes-base.emailSend': 2,\n  'n8n-nodes-base.http': 3,\n  'n8n-nodes-base.respondToWebhook': 1,\n\n  // Data manipulation (moderate complexity)\n  'n8n-nodes-base.set': 3,\n  'n8n-nodes-base.function': 5,\n  'n8n-nodes-base.functionItem': 4,\n  'n8n-nodes-base.merge': 4,\n  'n8n-nodes-base.split': 3,\n\n  // Conditional logic (high complexity)\n  'n8n-nodes-base.if': 4,\n  'n8n-nodes-base.switch': 5,\n  'n8n-nodes-base.filter': 3,\n\n  // External services (variable complexity)\n  'n8n-nodes-base.slack': 3,\n  'n8n-nodes-base.googleSheets': 4,\n  'n8n-nodes-base.gmail': 4,\n  'n8n-nodes-base.hubspot': 5,\n  'n8n-nodes-base.salesforce': 6,\n  'n8n-nodes-base.mysql': 5,\n  'n8n-nodes-base.postgres': 5,\n  'n8n-nodes-base.mongodb': 5,\n\n  // Advanced operations\n  'n8n-nodes-base.code': 6,\n  'n8n-nodes-base.executeWorkflow': 7,\n  'n8n-nodes-base.loop': 6,\n  'n8n-nodes-base.wait': 2,\n\n  // Default weight for unknown nodes\n  default: 3\n};\n\n/**\n * Calculate workflow complexity score\n */\nexport function calculateWorkflowComplexity(workflowData: WorkflowData): ComplexityMetrics {\n  if (!workflowData.nodes || !Array.isArray(workflowData.nodes)) {\n    return {\n      totalScore: 0,\n      level: 'simple',\n      factors: {\n        nodeCount: 0,\n        nodeTypes: 0,\n        connections: 0,\n        conditionalLogic: 0,\n        errorHandling: 0,\n        dataTransformations: 0,\n        externalServices: 0\n      },\n      recommendations: ['Invalid workflow structure']\n    };\n  }\n\n  const nodes = workflowData.nodes;\n  const connections = workflowData.connections || {};\n\n  // Factor 1: Node count (base complexity)\n  const nodeCount = nodes.length;\n  const nodeCountScore = Math.min(nodeCount * 2, 20); // Cap at 20 points\n\n  // Factor 2: Unique node types (diversity complexity)\n  const uniqueTypes = new Set(nodes.map(node => node.type)).size;\n  const nodeTypesScore = uniqueTypes * 3;\n\n  // Factor 3: Connection complexity\n  let connectionCount = 0;\n  Object.values(connections).forEach(nodeConnections => {\n    if (nodeConnections.main) {\n      nodeConnections.main.forEach(connArray => {\n        connectionCount += connArray.length;\n      });\n    }\n    if (nodeConnections.error) {\n      nodeConnections.error.forEach(connArray => {\n        connectionCount += connArray.length;\n      });\n    }\n  });\n  const connectionsScore = connectionCount * 1.5;\n\n  // Factor 4: Conditional logic nodes\n  const conditionalNodes = nodes.filter(node => \n    node.type.includes('if') || \n    node.type.includes('switch') || \n    node.type.includes('filter')\n  );\n  const conditionalLogicScore = conditionalNodes.length * 8;\n\n  // Factor 5: Error handling\n  const errorHandlingCount = Object.values(connections).reduce((count, nodeConnections) => {\n    return count + (nodeConnections.error ? nodeConnections.error.length : 0);\n  }, 0);\n  const nodesWithErrorHandling = nodes.filter(node => node.continueOnFail === true);\n  const errorHandlingScore = (errorHandlingCount + nodesWithErrorHandling.length) * 4;\n\n  // Factor 6: Data transformation complexity\n  const transformationNodes = nodes.filter(node => \n    node.type.includes('function') || \n    node.type.includes('set') || \n    node.type.includes('code') || \n    node.type.includes('merge') ||\n    node.type.includes('split')\n  );\n  const dataTransformationsScore = transformationNodes.length * 6;\n\n  // Factor 7: External service integrations\n  const externalServices = new Set();\n  nodes.forEach(node => {\n    if (!node.type.includes('n8n-nodes-base.start') && \n        !node.type.includes('n8n-nodes-base.set') &&\n        !node.type.includes('n8n-nodes-base.function') &&\n        !node.type.includes('n8n-nodes-base.if') &&\n        !node.type.includes('n8n-nodes-base.switch')) {\n      // Extract service name from node type\n      const serviceName = node.type.replace('n8n-nodes-base.', '').replace('n8n-nodes-community.', '');\n      externalServices.add(serviceName);\n    }\n  });\n  const externalServicesScore = externalServices.size * 5;\n\n  // Calculate weighted node complexity\n  const nodeComplexityScore = nodes.reduce((total, node) => {\n    const weight = NODE_COMPLEXITY_WEIGHTS[node.type] || NODE_COMPLEXITY_WEIGHTS.default;\n    return total + weight;\n  }, 0);\n\n  // Total complexity score\n  const totalScore = Math.round(\n    nodeCountScore + \n    nodeTypesScore + \n    connectionsScore + \n    conditionalLogicScore + \n    errorHandlingScore + \n    dataTransformationsScore + \n    externalServicesScore + \n    nodeComplexityScore\n  );\n\n  // Determine complexity level\n  let level: 'simple' | 'moderate' | 'complex' | 'advanced';\n  if (totalScore <= 20) level = 'simple';\n  else if (totalScore <= 50) level = 'moderate';\n  else if (totalScore <= 100) level = 'complex';\n  else level = 'advanced';\n\n  // Generate recommendations\n  const recommendations: string[] = [];\n  \n  if (nodeCount > 15) {\n    recommendations.push('Consider breaking this workflow into smaller, focused workflows');\n  }\n  if (conditionalNodes.length > 3) {\n    recommendations.push('High conditional logic complexity - ensure proper testing');\n  }\n  if (errorHandlingCount === 0 && nodeCount > 5) {\n    recommendations.push('Add error handling to critical nodes for better reliability');\n  }\n  if (transformationNodes.length > 5) {\n    recommendations.push('Consider consolidating data transformations to reduce complexity');\n  }\n  if (externalServices.size > 7) {\n    recommendations.push('Many external services - monitor rate limits and dependencies');\n  }\n  if (recommendations.length === 0) {\n    recommendations.push('Well-structured workflow with appropriate complexity');\n  }\n\n  return {\n    totalScore,\n    level,\n    factors: {\n      nodeCount,\n      nodeTypes: uniqueTypes,\n      connections: connectionCount,\n      conditionalLogic: conditionalNodes.length,\n      errorHandling: errorHandlingCount + nodesWithErrorHandling.length,\n      dataTransformations: transformationNodes.length,\n      externalServices: externalServices.size\n    },\n    recommendations\n  };\n}\n\n/**\n * Get complexity level color\n */\nexport function getComplexityColor(level: string): string {\n  switch (level) {\n    case 'simple': return 'text-green-600 bg-green-50 border-green-200';\n    case 'moderate': return 'text-blue-600 bg-blue-50 border-blue-200';\n    case 'complex': return 'text-orange-600 bg-orange-50 border-orange-200';\n    case 'advanced': return 'text-red-600 bg-red-50 border-red-200';\n    default: return 'text-gray-600 bg-gray-50 border-gray-200';\n  }\n}\n\n/**\n * Get complexity level icon\n */\nexport function getComplexityIcon(level: string): string {\n  switch (level) {\n    case 'simple': return '🟢';\n    case 'moderate': return '🔵';\n    case 'complex': return '🟠';\n    case 'advanced': return '🔴';\n    default: return '⚪';\n  }\n}","size_bytes":8012}},"version":1}